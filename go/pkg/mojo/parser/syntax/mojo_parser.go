// Code generated from java-escape by ANTLR 4.11.1. DO NOT EDIT.

package syntax // MojoParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr/antlr4/runtime/Go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type MojoParser struct {
	*antlr.BaseParser
}

var mojoparserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func mojoparserParserInit() {
	staticData := &mojoparserParserStaticData
	staticData.literalNames = []string{
		"", "'and'", "'as'", "'attribute'", "'break'", "'const'", "'continue'",
		"'else'", "'enum'", "'false'", "'for'", "'func'", "'if'", "'import'",
		"'in'", "'interface'", "'is'", "'match'", "'not'", "'null'", "'or'",
		"'package'", "'repeat'", "'return'", "'struct'", "'true'", "'type'",
		"'var'", "'while'", "'xor'", "'.'", "'{'", "'('", "'['", "'}'", "')'",
		"']'", "','", "':'", "';'", "'<'", "'>'", "'!'", "'?'", "'@'", "'&'",
		"'-'", "'='", "'|'", "'/'", "'+'", "'*'", "'%'", "'^'", "'~'", "'$'",
		"'`'", "'_'",
	}
	staticData.symbolicNames = []string{
		"", "KEYWORD_AND", "KEYWORD_AS", "KEYWORD_ATTRIBUTE", "KEYWORD_BREAK",
		"KEYWORD_CONST", "KEYWORD_CONTINUE", "KEYWORD_ELSE", "KEYWORD_ENUM",
		"KEYWORD_FALSE", "KEYWORD_FOR", "KEYWORD_FUNC", "KEYWORD_IF", "KEYWORD_IMPORT",
		"KEYWORD_IN", "KEYWORD_INTERFACE", "KEYWORD_IS", "KEYWORD_MATCH", "KEYWORD_NOT",
		"KEYWORD_NULL", "KEYWORD_OR", "KEYWORD_PACKAGE", "KEYWORD_REPEATE",
		"KEYWORD_RETURN", "KEYWORD_STRUCT", "KEYWORD_TRUE", "KEYWORD_TYPE",
		"KEYWORD_VAR", "KEYWORD_WHILE", "KEYWORD_XOR", "DOT", "LCURLY", "LPAREN",
		"LBRACK", "RCURLY", "RPAREN", "RBRACK", "COMMA", "COLON", "SEMI", "LT",
		"GT", "BANG", "QUESTION", "AT", "AND", "MINUS", "EQUAL", "PIPE", "SLASH",
		"PLUS", "STAR", "PERCENT", "CARET", "TILDE", "DOLLER", "BACKTICK", "UNDERSCORE",
		"PLUS_PLUS", "MINUS_MINUS", "COLON_EQUAL", "RIGHT_RIGHT_ARROWS", "RIGHT_ARROW",
		"DOT_DOT", "DOT_DOT_LT", "ELLIPSIS", "GRAPH_RIGHT_PATH", "GRAPH_LEFT_PATH",
		"GRAPH_PATH", "GRAPH_CONSTRAINT_PATH_LEFT", "GRAPH_CONSTRAINT_PATH_LEFT_ARROW",
		"GRAPH_CONSTRAINT_PATH_RIGHT", "GRAPH_CONSTRAINT_PATH_RIGHT_ARROW",
		"TYPE_IDENTIFIER", "VALUE_IDENTIFIER", "OPERATOR_HEAD_OTHER", "IMPLICIT_PARAMETER_NAME",
		"BINARY_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", "PURE_DECIMAL_DIGITS",
		"HEXADECIMAL_LITERAL", "FLOAT_LITERAL", "STATIC_STRING_LITERAL", "INTERPOLATED_STRING_LITERAL",
		"WS", "BLOCK_COMMENT", "LINE_COMMENT", "LINE_COMMENT_DISTINCT_DOCUMENT",
		"EOL", "LINE_DOCUMENT", "FOLLOWING_LINE_DOCUMENT", "INNER_LINE_DOCUMENT",
		"OPERATOR_FOLLOWING_CHARACTER",
	}
	staticData.ruleNames = []string{
		"mojoFile", "statement", "freeFloatingDocument", "statements", "loopStatement",
		"forInStatement", "whileStatement", "conditions", "condition", "optionalBindingCondition",
		"branchStatement", "ifStatement", "elseClause", "matchStatement", "matchCases",
		"matchCase", "controlTransferStatement", "breakStatement", "continueStatement",
		"returnStatement", "genericParameterClause", "genericParameters", "genericParameter",
		"genericArgumentClause", "genericArguments", "genericArgument", "declaration",
		"codeBlock", "packageDeclaration", "packageIdentifier", "packageName",
		"importDeclaration", "importPath", "importPathIdentifier", "importAllClause",
		"importValueAsClause", "importTypeClause", "importTypeAsClause", "importGroupClause",
		"importGroup", "importValue", "importType", "constantDeclaration", "patternInitializers",
		"documentedPatternInitializer", "patternInitializer", "initializer",
		"variableDeclaration", "typeAliasDeclaration", "typeAliasName", "typeAliasAssignment",
		"functionDeclaration", "functionName", "functionSignature", "functionResult",
		"functionBody", "functionParameterClause", "functionParameters", "functionParameter",
		"enumDeclaration", "enumBody", "enumName", "enumMembers", "enumMember",
		"structDeclaration", "structName", "structType", "structBody", "structMembers",
		"structMember", "structMemberDeclaration", "interfaceDeclaration", "interfaceName",
		"interfaceType", "interfaceBody", "interfaceMembers", "interfaceMember",
		"interfaceMethodDeclaration", "attributeDeclaration", "attributeAliasDeclaration",
		"attributeAliasAssignment", "pattern", "wildcardPattern", "identifierPattern",
		"tuplePattern", "tuplePatternElementList", "tuplePatternElement", "optionalPattern",
		"expressionPattern", "attribute", "attributeIdentifier", "attributeName",
		"attributeArgumentClause", "attributeArgument", "attributeArguments",
		"attributes", "expression", "expressions", "prefixExpression", "binaryExpression",
		"binaryExpressions", "conditionalOperator", "typeCastingOperator", "primaryExpression",
		"literalExpression", "numericOperatorLiteral", "stringOperatorLiteral",
		"postfixLiteralOperator", "prefixLiteralOperator", "arrayLiteral", "arrayLiteralItems",
		"arrayLiteralItem", "mapLiteral", "mapLiteralItems", "mapLiteralItem",
		"objectLiteral", "objectLiteralItems", "objectLiteralItem", "structLiteral",
		"structConstructionExpression", "closureExpression", "closureParameters",
		"closureParameter", "implicitMemberExpression", "parenthesizedExpression",
		"tupleExpression", "tupleElement", "wildcardExpression", "postfixExpression",
		"suffixExpression", "explicitMemberSuffix", "subscriptSuffix", "functionCallSuffix",
		"functionCallArgumentClause", "functionCallArguments", "functionCallArgument",
		"trailingClosures", "labeledTrailingClosures", "labeledTrailingClosure",
		"argumentNames", "argumentName", "type_", "basicType", "primeType",
		"typeAnnotation", "typeIdentifier", "typeIdentifierClause", "typeName",
		"tupleType", "tupleTypeElements", "tupleTypeElement", "functionType",
		"arrayType", "mapType", "keyAttributes", "typeInheritanceClause", "typeInheritances",
		"typeInheritance", "declarationIdentifier", "labelIdentifier", "pathIdentifier",
		"identifier", "keywordAsIdentifierInDeclarations", "keywordAsIdentifierInLabels",
		"document", "followingDocument", "assignmentOperator", "negatePrefixOperator",
		"arrowOperator", "rangeOperator", "halfOpenRangeOperator", "binaryOperator",
		"prefixOperator", "postfixOperator", "operator", "operator_characters",
		"operator_character", "operator_head", "dot_operator_head", "dot_operator_character",
		"literal", "boolLiteral", "nullLiteral", "numericLiteral", "integerLiteral",
		"stringLiteral", "eos", "eov", "eosWithDocument", "eovWithDocument",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 93, 2316, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2,
		63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68,
		7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7,
		73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78,
		2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2,
		84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89,
		7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7,
		94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99,
		2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104,
		7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108,
		2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2, 113,
		7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117,
		2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2, 122,
		7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126,
		2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 2, 131,
		7, 131, 2, 132, 7, 132, 2, 133, 7, 133, 2, 134, 7, 134, 2, 135, 7, 135,
		2, 136, 7, 136, 2, 137, 7, 137, 2, 138, 7, 138, 2, 139, 7, 139, 2, 140,
		7, 140, 2, 141, 7, 141, 2, 142, 7, 142, 2, 143, 7, 143, 2, 144, 7, 144,
		2, 145, 7, 145, 2, 146, 7, 146, 2, 147, 7, 147, 2, 148, 7, 148, 2, 149,
		7, 149, 2, 150, 7, 150, 2, 151, 7, 151, 2, 152, 7, 152, 2, 153, 7, 153,
		2, 154, 7, 154, 2, 155, 7, 155, 2, 156, 7, 156, 2, 157, 7, 157, 2, 158,
		7, 158, 2, 159, 7, 159, 2, 160, 7, 160, 2, 161, 7, 161, 2, 162, 7, 162,
		2, 163, 7, 163, 2, 164, 7, 164, 2, 165, 7, 165, 2, 166, 7, 166, 2, 167,
		7, 167, 2, 168, 7, 168, 2, 169, 7, 169, 2, 170, 7, 170, 2, 171, 7, 171,
		2, 172, 7, 172, 2, 173, 7, 173, 2, 174, 7, 174, 2, 175, 7, 175, 2, 176,
		7, 176, 2, 177, 7, 177, 2, 178, 7, 178, 2, 179, 7, 179, 2, 180, 7, 180,
		2, 181, 7, 181, 2, 182, 7, 182, 2, 183, 7, 183, 2, 184, 7, 184, 2, 185,
		7, 185, 2, 186, 7, 186, 2, 187, 7, 187, 2, 188, 7, 188, 2, 189, 7, 189,
		1, 0, 5, 0, 382, 8, 0, 10, 0, 12, 0, 385, 9, 0, 1, 0, 3, 0, 388, 8, 0,
		1, 0, 5, 0, 391, 8, 0, 10, 0, 12, 0, 394, 9, 0, 1, 0, 1, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 404, 8, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3,
		5, 3, 411, 8, 3, 10, 3, 12, 3, 414, 9, 3, 1, 3, 1, 3, 5, 3, 418, 8, 3,
		10, 3, 12, 3, 421, 9, 3, 1, 3, 3, 3, 424, 8, 3, 1, 4, 1, 4, 3, 4, 428,
		8, 4, 1, 5, 1, 5, 1, 5, 5, 5, 433, 8, 5, 10, 5, 12, 5, 436, 9, 5, 1, 5,
		1, 5, 1, 5, 5, 5, 441, 8, 5, 10, 5, 12, 5, 444, 9, 5, 1, 5, 1, 5, 1, 6,
		1, 6, 1, 6, 5, 6, 451, 8, 6, 10, 6, 12, 6, 454, 9, 6, 1, 6, 1, 6, 1, 7,
		1, 7, 1, 7, 5, 7, 461, 8, 7, 10, 7, 12, 7, 464, 9, 7, 1, 7, 1, 7, 5, 7,
		468, 8, 7, 10, 7, 12, 7, 471, 9, 7, 1, 8, 1, 8, 3, 8, 475, 8, 8, 1, 9,
		1, 9, 1, 9, 5, 9, 480, 8, 9, 10, 9, 12, 9, 483, 9, 9, 1, 9, 1, 9, 1, 10,
		1, 10, 3, 10, 489, 8, 10, 1, 11, 1, 11, 1, 11, 5, 11, 494, 8, 11, 10, 11,
		12, 11, 497, 9, 11, 1, 11, 1, 11, 5, 11, 501, 8, 11, 10, 11, 12, 11, 504,
		9, 11, 1, 11, 3, 11, 507, 8, 11, 1, 12, 1, 12, 5, 12, 511, 8, 12, 10, 12,
		12, 12, 514, 9, 12, 1, 12, 1, 12, 1, 12, 5, 12, 519, 8, 12, 10, 12, 12,
		12, 522, 9, 12, 1, 12, 3, 12, 525, 8, 12, 1, 13, 1, 13, 1, 13, 5, 13, 530,
		8, 13, 10, 13, 12, 13, 533, 9, 13, 1, 13, 1, 13, 5, 13, 537, 8, 13, 10,
		13, 12, 13, 540, 9, 13, 1, 13, 3, 13, 543, 8, 13, 1, 13, 5, 13, 546, 8,
		13, 10, 13, 12, 13, 549, 9, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 5, 14,
		556, 8, 14, 10, 14, 12, 14, 559, 9, 14, 1, 14, 1, 14, 5, 14, 563, 8, 14,
		10, 14, 12, 14, 566, 9, 14, 1, 14, 1, 14, 1, 15, 1, 15, 5, 15, 572, 8,
		15, 10, 15, 12, 15, 575, 9, 15, 1, 15, 1, 15, 5, 15, 579, 8, 15, 10, 15,
		12, 15, 582, 9, 15, 1, 15, 1, 15, 3, 15, 586, 8, 15, 1, 16, 1, 16, 1, 16,
		3, 16, 591, 8, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 3, 19, 599,
		8, 19, 1, 20, 1, 20, 5, 20, 603, 8, 20, 10, 20, 12, 20, 606, 9, 20, 1,
		20, 1, 20, 5, 20, 610, 8, 20, 10, 20, 12, 20, 613, 9, 20, 1, 20, 1, 20,
		1, 21, 1, 21, 1, 21, 5, 21, 620, 8, 21, 10, 21, 12, 21, 623, 9, 21, 1,
		21, 1, 21, 5, 21, 627, 8, 21, 10, 21, 12, 21, 630, 9, 21, 1, 21, 3, 21,
		633, 8, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 642,
		8, 22, 1, 23, 1, 23, 5, 23, 646, 8, 23, 10, 23, 12, 23, 649, 9, 23, 1,
		23, 1, 23, 5, 23, 653, 8, 23, 10, 23, 12, 23, 656, 9, 23, 1, 23, 1, 23,
		1, 24, 1, 24, 1, 24, 5, 24, 663, 8, 24, 10, 24, 12, 24, 666, 9, 24, 1,
		24, 1, 24, 5, 24, 670, 8, 24, 10, 24, 12, 24, 673, 9, 24, 1, 25, 1, 25,
		3, 25, 677, 8, 25, 1, 26, 1, 26, 1, 26, 3, 26, 682, 8, 26, 1, 26, 1, 26,
		5, 26, 686, 8, 26, 10, 26, 12, 26, 689, 9, 26, 3, 26, 691, 8, 26, 1, 26,
		1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3,
		26, 704, 8, 26, 1, 27, 1, 27, 5, 27, 708, 8, 27, 10, 27, 12, 27, 711, 9,
		27, 1, 27, 3, 27, 714, 8, 27, 1, 27, 5, 27, 717, 8, 27, 10, 27, 12, 27,
		720, 9, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 5, 28, 727, 8, 28, 10, 28,
		12, 28, 730, 9, 28, 1, 28, 3, 28, 733, 8, 28, 1, 29, 1, 29, 1, 29, 5, 29,
		738, 8, 29, 10, 29, 12, 29, 741, 9, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1,
		31, 1, 31, 1, 31, 1, 31, 3, 31, 751, 8, 31, 1, 32, 1, 32, 1, 32, 5, 32,
		756, 8, 32, 10, 32, 12, 32, 759, 9, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1,
		34, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 3, 36, 772, 8, 36, 1, 37,
		1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 5, 38, 780, 8, 38, 10, 38, 12, 38, 783,
		9, 38, 1, 38, 1, 38, 5, 38, 787, 8, 38, 10, 38, 12, 38, 790, 9, 38, 1,
		38, 1, 38, 1, 39, 1, 39, 3, 39, 796, 8, 39, 1, 39, 1, 39, 5, 39, 800, 8,
		39, 10, 39, 12, 39, 803, 9, 39, 1, 39, 1, 39, 3, 39, 807, 8, 39, 5, 39,
		809, 8, 39, 10, 39, 12, 39, 812, 9, 39, 1, 39, 3, 39, 815, 8, 39, 1, 40,
		1, 40, 3, 40, 819, 8, 40, 1, 41, 1, 41, 3, 41, 823, 8, 41, 1, 42, 1, 42,
		1, 42, 1, 43, 1, 43, 1, 43, 5, 43, 831, 8, 43, 10, 43, 12, 43, 834, 9,
		43, 1, 43, 1, 43, 5, 43, 838, 8, 43, 10, 43, 12, 43, 841, 9, 43, 1, 43,
		1, 43, 5, 43, 845, 8, 43, 10, 43, 12, 43, 848, 9, 43, 1, 43, 1, 43, 1,
		43, 5, 43, 853, 8, 43, 10, 43, 12, 43, 856, 9, 43, 1, 43, 1, 43, 5, 43,
		860, 8, 43, 10, 43, 12, 43, 863, 9, 43, 1, 43, 3, 43, 866, 8, 43, 1, 43,
		5, 43, 869, 8, 43, 10, 43, 12, 43, 872, 9, 43, 1, 43, 1, 43, 3, 43, 876,
		8, 43, 1, 44, 1, 44, 1, 44, 3, 44, 881, 8, 44, 1, 44, 1, 44, 1, 44, 3,
		44, 886, 8, 44, 1, 44, 1, 44, 1, 45, 1, 45, 3, 45, 892, 8, 45, 1, 46, 1,
		46, 5, 46, 896, 8, 46, 10, 46, 12, 46, 899, 9, 46, 1, 46, 1, 46, 1, 47,
		1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 909, 8, 47, 1, 48, 1, 48, 1,
		48, 3, 48, 914, 8, 48, 1, 48, 5, 48, 917, 8, 48, 10, 48, 12, 48, 920, 9,
		48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 50, 1, 50, 5, 50, 928, 8, 50, 10, 50,
		12, 50, 931, 9, 50, 1, 50, 1, 50, 3, 50, 935, 8, 50, 1, 50, 3, 50, 938,
		8, 50, 1, 51, 1, 51, 1, 51, 3, 51, 943, 8, 51, 1, 51, 1, 51, 5, 51, 947,
		8, 51, 10, 51, 12, 51, 950, 9, 51, 1, 51, 3, 51, 953, 8, 51, 1, 52, 1,
		52, 3, 52, 957, 8, 52, 1, 53, 1, 53, 3, 53, 961, 8, 53, 1, 53, 5, 53, 964,
		8, 53, 10, 53, 12, 53, 967, 9, 53, 1, 53, 3, 53, 970, 8, 53, 1, 54, 1,
		54, 1, 54, 3, 54, 975, 8, 54, 3, 54, 977, 8, 54, 1, 54, 1, 54, 3, 54, 981,
		8, 54, 1, 54, 5, 54, 984, 8, 54, 10, 54, 12, 54, 987, 9, 54, 1, 54, 3,
		54, 990, 8, 54, 1, 55, 1, 55, 3, 55, 994, 8, 55, 1, 55, 5, 55, 997, 8,
		55, 10, 55, 12, 55, 1000, 9, 55, 1, 55, 3, 55, 1003, 8, 55, 1, 55, 5, 55,
		1006, 8, 55, 10, 55, 12, 55, 1009, 9, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1,
		56, 1, 56, 5, 56, 1017, 8, 56, 10, 56, 12, 56, 1020, 9, 56, 1, 56, 1, 56,
		5, 56, 1024, 8, 56, 10, 56, 12, 56, 1027, 9, 56, 1, 56, 1, 56, 3, 56, 1031,
		8, 56, 1, 57, 1, 57, 1, 57, 5, 57, 1036, 8, 57, 10, 57, 12, 57, 1039, 9,
		57, 1, 57, 1, 57, 5, 57, 1043, 8, 57, 10, 57, 12, 57, 1046, 9, 57, 1, 57,
		3, 57, 1049, 8, 57, 1, 58, 1, 58, 1, 58, 5, 58, 1054, 8, 58, 10, 58, 12,
		58, 1057, 9, 58, 1, 58, 3, 58, 1060, 8, 58, 1, 58, 1, 58, 3, 58, 1064,
		8, 58, 1, 58, 1, 58, 1, 58, 3, 58, 1069, 8, 58, 3, 58, 1071, 8, 58, 1,
		59, 1, 59, 1, 59, 3, 59, 1076, 8, 59, 1, 59, 5, 59, 1079, 8, 59, 10, 59,
		12, 59, 1082, 9, 59, 1, 59, 3, 59, 1085, 8, 59, 1, 59, 5, 59, 1088, 8,
		59, 10, 59, 12, 59, 1091, 9, 59, 1, 59, 1, 59, 1, 60, 1, 60, 3, 60, 1097,
		8, 60, 1, 60, 5, 60, 1100, 8, 60, 10, 60, 12, 60, 1103, 9, 60, 1, 60, 3,
		60, 1106, 8, 60, 1, 60, 5, 60, 1109, 8, 60, 10, 60, 12, 60, 1112, 9, 60,
		1, 60, 1, 60, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 5, 62, 1121, 8, 62, 10,
		62, 12, 62, 1124, 9, 62, 1, 62, 1, 62, 5, 62, 1128, 8, 62, 10, 62, 12,
		62, 1131, 9, 62, 1, 62, 3, 62, 1134, 8, 62, 1, 63, 1, 63, 1, 63, 3, 63,
		1139, 8, 63, 1, 63, 1, 63, 1, 63, 3, 63, 1144, 8, 63, 1, 63, 1, 63, 3,
		63, 1148, 8, 63, 1, 63, 5, 63, 1151, 8, 63, 10, 63, 12, 63, 1154, 9, 63,
		1, 63, 3, 63, 1157, 8, 63, 1, 63, 3, 63, 1160, 8, 63, 1, 64, 1, 64, 1,
		64, 3, 64, 1165, 8, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 66, 5, 66, 1172,
		8, 66, 10, 66, 12, 66, 1175, 9, 66, 1, 66, 3, 66, 1178, 8, 66, 1, 66, 5,
		66, 1181, 8, 66, 10, 66, 12, 66, 1184, 9, 66, 1, 66, 3, 66, 1187, 8, 66,
		1, 67, 1, 67, 1, 67, 1, 67, 3, 67, 1193, 8, 67, 1, 67, 5, 67, 1196, 8,
		67, 10, 67, 12, 67, 1199, 9, 67, 1, 67, 3, 67, 1202, 8, 67, 1, 67, 5, 67,
		1205, 8, 67, 10, 67, 12, 67, 1208, 9, 67, 1, 67, 1, 67, 1, 68, 1, 68, 1,
		68, 5, 68, 1215, 8, 68, 10, 68, 12, 68, 1218, 9, 68, 1, 68, 1, 68, 5, 68,
		1222, 8, 68, 10, 68, 12, 68, 1225, 9, 68, 1, 68, 3, 68, 1228, 8, 68, 1,
		69, 1, 69, 1, 69, 3, 69, 1233, 8, 69, 1, 69, 1, 69, 1, 69, 3, 69, 1238,
		8, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 3, 69, 1245, 8, 69, 1, 69, 3,
		69, 1248, 8, 69, 1, 70, 1, 70, 1, 70, 5, 70, 1253, 8, 70, 10, 70, 12, 70,
		1256, 9, 70, 1, 70, 3, 70, 1259, 8, 70, 1, 71, 1, 71, 1, 71, 3, 71, 1264,
		8, 71, 1, 71, 1, 71, 1, 72, 1, 72, 1, 73, 5, 73, 1271, 8, 73, 10, 73, 12,
		73, 1274, 9, 73, 1, 73, 3, 73, 1277, 8, 73, 1, 73, 5, 73, 1280, 8, 73,
		10, 73, 12, 73, 1283, 9, 73, 1, 73, 1, 73, 1, 74, 1, 74, 3, 74, 1289, 8,
		74, 1, 74, 5, 74, 1292, 8, 74, 10, 74, 12, 74, 1295, 9, 74, 1, 74, 3, 74,
		1298, 8, 74, 1, 74, 5, 74, 1301, 8, 74, 10, 74, 12, 74, 1304, 9, 74, 1,
		74, 1, 74, 1, 75, 1, 75, 1, 75, 5, 75, 1311, 8, 75, 10, 75, 12, 75, 1314,
		9, 75, 1, 75, 1, 75, 5, 75, 1318, 8, 75, 10, 75, 12, 75, 1321, 9, 75, 1,
		75, 3, 75, 1324, 8, 75, 1, 76, 1, 76, 1, 76, 3, 76, 1329, 8, 76, 1, 76,
		1, 76, 1, 76, 3, 76, 1334, 8, 76, 1, 76, 1, 76, 3, 76, 1338, 8, 76, 1,
		76, 3, 76, 1341, 8, 76, 1, 77, 1, 77, 3, 77, 1345, 8, 77, 1, 77, 5, 77,
		1348, 8, 77, 10, 77, 12, 77, 1351, 9, 77, 1, 77, 1, 77, 1, 78, 1, 78, 1,
		78, 3, 78, 1358, 8, 78, 1, 78, 1, 78, 1, 78, 5, 78, 1363, 8, 78, 10, 78,
		12, 78, 1366, 9, 78, 1, 78, 3, 78, 1369, 8, 78, 1, 78, 3, 78, 1372, 8,
		78, 3, 78, 1374, 8, 78, 1, 79, 1, 79, 1, 79, 3, 79, 1379, 8, 79, 1, 79,
		5, 79, 1382, 8, 79, 10, 79, 12, 79, 1385, 9, 79, 1, 79, 1, 79, 1, 80, 1,
		80, 5, 80, 1391, 8, 80, 10, 80, 12, 80, 1394, 9, 80, 1, 80, 1, 80, 1, 80,
		3, 80, 1399, 8, 80, 1, 80, 1, 80, 3, 80, 1403, 8, 80, 1, 80, 3, 80, 1406,
		8, 80, 1, 81, 1, 81, 1, 81, 3, 81, 1411, 8, 81, 1, 81, 1, 81, 3, 81, 1415,
		8, 81, 1, 81, 1, 81, 3, 81, 1419, 8, 81, 1, 81, 1, 81, 1, 81, 1, 81, 3,
		81, 1425, 8, 81, 1, 81, 1, 81, 1, 81, 5, 81, 1430, 8, 81, 10, 81, 12, 81,
		1433, 9, 81, 1, 82, 1, 82, 1, 83, 1, 83, 1, 84, 1, 84, 3, 84, 1441, 8,
		84, 1, 84, 1, 84, 1, 85, 1, 85, 1, 85, 5, 85, 1448, 8, 85, 10, 85, 12,
		85, 1451, 9, 85, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 88, 1, 88, 1, 89,
		1, 89, 1, 89, 1, 89, 1, 89, 3, 89, 1465, 8, 89, 1, 89, 3, 89, 1468, 8,
		89, 3, 89, 1470, 8, 89, 1, 90, 1, 90, 1, 90, 3, 90, 1475, 8, 90, 1, 90,
		1, 90, 1, 91, 1, 91, 1, 92, 1, 92, 5, 92, 1483, 8, 92, 10, 92, 12, 92,
		1486, 9, 92, 1, 92, 3, 92, 1489, 8, 92, 1, 92, 5, 92, 1492, 8, 92, 10,
		92, 12, 92, 1495, 9, 92, 1, 92, 1, 92, 1, 93, 1, 93, 3, 93, 1501, 8, 93,
		3, 93, 1503, 8, 93, 1, 93, 1, 93, 1, 94, 1, 94, 1, 94, 5, 94, 1510, 8,
		94, 10, 94, 12, 94, 1513, 9, 94, 1, 94, 1, 94, 5, 94, 1517, 8, 94, 10,
		94, 12, 94, 1520, 9, 94, 1, 94, 3, 94, 1523, 8, 94, 1, 95, 1, 95, 3, 95,
		1527, 8, 95, 1, 95, 5, 95, 1530, 8, 95, 10, 95, 12, 95, 1533, 9, 95, 1,
		96, 1, 96, 3, 96, 1537, 8, 96, 1, 97, 1, 97, 1, 97, 5, 97, 1542, 8, 97,
		10, 97, 12, 97, 1545, 9, 97, 1, 97, 1, 97, 5, 97, 1549, 8, 97, 10, 97,
		12, 97, 1552, 9, 97, 1, 97, 3, 97, 1555, 8, 97, 1, 98, 1, 98, 1, 98, 1,
		98, 3, 98, 1561, 8, 98, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99,
		1, 99, 1, 99, 1, 99, 3, 99, 1573, 8, 99, 1, 100, 4, 100, 1576, 8, 100,
		11, 100, 12, 100, 1577, 1, 101, 1, 101, 1, 101, 1, 101, 1, 102, 1, 102,
		1, 102, 1, 102, 3, 102, 1588, 8, 102, 1, 103, 1, 103, 1, 103, 3, 103, 1593,
		8, 103, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 1599, 8, 103, 1, 103, 1,
		103, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 1607, 8, 103, 1, 104, 1, 104,
		1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 1616, 8, 104, 1, 105, 1,
		105, 1, 105, 1, 106, 1, 106, 1, 106, 1, 107, 1, 107, 1, 108, 1, 108, 1,
		109, 1, 109, 5, 109, 1630, 8, 109, 10, 109, 12, 109, 1633, 9, 109, 1, 109,
		3, 109, 1636, 8, 109, 1, 109, 5, 109, 1639, 8, 109, 10, 109, 12, 109, 1642,
		9, 109, 1, 109, 1, 109, 1, 110, 1, 110, 1, 110, 5, 110, 1649, 8, 110, 10,
		110, 12, 110, 1652, 9, 110, 1, 110, 1, 110, 5, 110, 1656, 8, 110, 10, 110,
		12, 110, 1659, 9, 110, 1, 110, 3, 110, 1662, 8, 110, 1, 111, 1, 111, 1,
		112, 1, 112, 5, 112, 1668, 8, 112, 10, 112, 12, 112, 1671, 9, 112, 1, 112,
		3, 112, 1674, 8, 112, 1, 112, 5, 112, 1677, 8, 112, 10, 112, 12, 112, 1680,
		9, 112, 1, 112, 1, 112, 1, 113, 1, 113, 1, 113, 5, 113, 1687, 8, 113, 10,
		113, 12, 113, 1690, 9, 113, 1, 113, 1, 113, 5, 113, 1694, 8, 113, 10, 113,
		12, 113, 1697, 9, 113, 1, 113, 3, 113, 1700, 8, 113, 1, 114, 1, 114, 3,
		114, 1704, 8, 114, 1, 114, 1, 114, 1, 114, 1, 115, 1, 115, 5, 115, 1711,
		8, 115, 10, 115, 12, 115, 1714, 9, 115, 1, 115, 3, 115, 1717, 8, 115, 1,
		115, 5, 115, 1720, 8, 115, 10, 115, 12, 115, 1723, 9, 115, 1, 115, 1, 115,
		1, 116, 1, 116, 1, 116, 5, 116, 1730, 8, 116, 10, 116, 12, 116, 1733, 9,
		116, 1, 116, 1, 116, 5, 116, 1737, 8, 116, 10, 116, 12, 116, 1740, 9, 116,
		1, 116, 3, 116, 1743, 8, 116, 1, 117, 1, 117, 1, 117, 3, 117, 1748, 8,
		117, 1, 118, 1, 118, 1, 118, 1, 119, 1, 119, 1, 119, 1, 120, 1, 120, 1,
		120, 1, 120, 1, 120, 1, 120, 1, 120, 5, 120, 1763, 8, 120, 10, 120, 12,
		120, 1766, 9, 120, 1, 120, 1, 120, 5, 120, 1770, 8, 120, 10, 120, 12, 120,
		1773, 9, 120, 1, 120, 3, 120, 1776, 8, 120, 1, 120, 5, 120, 1779, 8, 120,
		10, 120, 12, 120, 1782, 9, 120, 1, 120, 1, 120, 1, 120, 3, 120, 1787, 8,
		120, 1, 121, 1, 121, 1, 121, 5, 121, 1792, 8, 121, 10, 121, 12, 121, 1795,
		9, 121, 1, 121, 1, 121, 5, 121, 1799, 8, 121, 10, 121, 12, 121, 1802, 9,
		121, 1, 121, 3, 121, 1805, 8, 121, 1, 122, 1, 122, 3, 122, 1809, 8, 122,
		1, 123, 1, 123, 1, 123, 1, 124, 1, 124, 5, 124, 1816, 8, 124, 10, 124,
		12, 124, 1819, 9, 124, 1, 124, 1, 124, 5, 124, 1823, 8, 124, 10, 124, 12,
		124, 1826, 9, 124, 1, 124, 1, 124, 1, 125, 1, 125, 1, 125, 1, 125, 1, 125,
		1, 125, 4, 125, 1836, 8, 125, 11, 125, 12, 125, 1837, 1, 125, 1, 125, 3,
		125, 1842, 8, 125, 1, 126, 1, 126, 1, 126, 3, 126, 1847, 8, 126, 1, 126,
		1, 126, 3, 126, 1851, 8, 126, 1, 127, 1, 127, 1, 128, 1, 128, 5, 128, 1857,
		8, 128, 10, 128, 12, 128, 1860, 9, 128, 1, 128, 3, 128, 1863, 8, 128, 1,
		129, 1, 129, 1, 129, 3, 129, 1868, 8, 129, 1, 130, 1, 130, 1, 130, 1, 130,
		1, 130, 1, 130, 1, 130, 1, 130, 3, 130, 1878, 8, 130, 3, 130, 1880, 8,
		130, 1, 131, 1, 131, 1, 131, 1, 131, 1, 132, 3, 132, 1887, 8, 132, 1, 132,
		1, 132, 3, 132, 1891, 8, 132, 1, 133, 1, 133, 1, 133, 1, 133, 1, 133, 1,
		133, 3, 133, 1899, 8, 133, 1, 134, 1, 134, 1, 134, 5, 134, 1904, 8, 134,
		10, 134, 12, 134, 1907, 9, 134, 1, 135, 1, 135, 1, 135, 3, 135, 1912, 8,
		135, 1, 135, 1, 135, 1, 135, 1, 135, 1, 135, 3, 135, 1919, 8, 135, 1, 135,
		1, 135, 3, 135, 1923, 8, 135, 1, 136, 1, 136, 3, 136, 1927, 8, 136, 1,
		137, 4, 137, 1930, 8, 137, 11, 137, 12, 137, 1931, 1, 138, 1, 138, 1, 138,
		1, 138, 1, 139, 1, 139, 5, 139, 1940, 8, 139, 10, 139, 12, 139, 1943, 9,
		139, 1, 140, 1, 140, 1, 140, 1, 141, 1, 141, 1, 141, 3, 141, 1951, 8, 141,
		1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 1, 141, 5, 141, 1959, 8, 141, 10,
		141, 12, 141, 1962, 9, 141, 1, 142, 1, 142, 1, 142, 1, 142, 1, 142, 3,
		142, 1969, 8, 142, 1, 142, 1, 142, 1, 142, 3, 142, 1974, 8, 142, 1, 142,
		5, 142, 1977, 8, 142, 10, 142, 12, 142, 1980, 9, 142, 1, 142, 1, 142, 5,
		142, 1984, 8, 142, 10, 142, 12, 142, 1987, 9, 142, 1, 142, 1, 142, 3, 142,
		1991, 8, 142, 1, 142, 1, 142, 1, 142, 3, 142, 1996, 8, 142, 1, 142, 1,
		142, 3, 142, 2000, 8, 142, 1, 142, 1, 142, 1, 142, 3, 142, 2005, 8, 142,
		1, 142, 5, 142, 2008, 8, 142, 10, 142, 12, 142, 2011, 9, 142, 1, 142, 1,
		142, 5, 142, 2015, 8, 142, 10, 142, 12, 142, 2018, 9, 142, 1, 142, 1, 142,
		3, 142, 2022, 8, 142, 1, 142, 1, 142, 1, 142, 3, 142, 2027, 8, 142, 5,
		142, 2029, 8, 142, 10, 142, 12, 142, 2032, 9, 142, 1, 143, 1, 143, 1, 143,
		1, 143, 3, 143, 2038, 8, 143, 1, 144, 3, 144, 2041, 8, 144, 1, 144, 1,
		144, 3, 144, 2045, 8, 144, 1, 145, 1, 145, 1, 145, 3, 145, 2050, 8, 145,
		1, 145, 1, 145, 1, 145, 5, 145, 2055, 8, 145, 10, 145, 12, 145, 2058, 9,
		145, 1, 146, 1, 146, 3, 146, 2062, 8, 146, 1, 147, 1, 147, 1, 148, 1, 148,
		5, 148, 2068, 8, 148, 10, 148, 12, 148, 2071, 9, 148, 1, 148, 3, 148, 2074,
		8, 148, 1, 148, 5, 148, 2077, 8, 148, 10, 148, 12, 148, 2080, 9, 148, 1,
		148, 1, 148, 1, 149, 1, 149, 1, 149, 5, 149, 2087, 8, 149, 10, 149, 12,
		149, 2090, 9, 149, 1, 149, 1, 149, 5, 149, 2094, 8, 149, 10, 149, 12, 149,
		2097, 9, 149, 1, 149, 3, 149, 2100, 8, 149, 1, 150, 1, 150, 3, 150, 2104,
		8, 150, 3, 150, 2106, 8, 150, 1, 150, 1, 150, 3, 150, 2110, 8, 150, 1,
		151, 1, 151, 1, 151, 1, 151, 3, 151, 2116, 8, 151, 1, 152, 1, 152, 1, 152,
		3, 152, 2121, 8, 152, 1, 152, 1, 152, 1, 153, 1, 153, 1, 153, 3, 153, 2128,
		8, 153, 1, 153, 1, 153, 1, 153, 3, 153, 2133, 8, 153, 1, 153, 1, 153, 1,
		154, 1, 154, 1, 155, 1, 155, 5, 155, 2141, 8, 155, 10, 155, 12, 155, 2144,
		9, 155, 1, 155, 1, 155, 1, 156, 1, 156, 1, 156, 5, 156, 2151, 8, 156, 10,
		156, 12, 156, 2154, 9, 156, 1, 156, 1, 156, 5, 156, 2158, 8, 156, 10, 156,
		12, 156, 2161, 9, 156, 1, 156, 3, 156, 2164, 8, 156, 1, 157, 1, 157, 3,
		157, 2168, 8, 157, 1, 158, 1, 158, 3, 158, 2172, 8, 158, 1, 159, 1, 159,
		3, 159, 2176, 8, 159, 1, 160, 1, 160, 1, 160, 5, 160, 2181, 8, 160, 10,
		160, 12, 160, 2184, 9, 160, 1, 161, 1, 161, 1, 162, 1, 162, 1, 163, 1,
		163, 1, 164, 1, 164, 1, 164, 5, 164, 2195, 8, 164, 10, 164, 12, 164, 2198,
		9, 164, 1, 165, 1, 165, 1, 165, 5, 165, 2203, 8, 165, 10, 165, 12, 165,
		2206, 9, 165, 1, 166, 1, 166, 1, 167, 1, 167, 1, 168, 1, 168, 1, 169, 1,
		169, 1, 170, 1, 170, 1, 171, 1, 171, 1, 171, 1, 171, 1, 171, 3, 171, 2223,
		8, 171, 1, 172, 1, 172, 3, 172, 2227, 8, 172, 1, 173, 1, 173, 1, 174, 1,
		174, 3, 174, 2233, 8, 174, 1, 174, 1, 174, 5, 174, 2237, 8, 174, 10, 174,
		12, 174, 2240, 9, 174, 3, 174, 2242, 8, 174, 1, 175, 1, 175, 4, 175, 2246,
		8, 175, 11, 175, 12, 175, 2247, 1, 176, 1, 176, 3, 176, 2252, 8, 176, 1,
		177, 1, 177, 3, 177, 2256, 8, 177, 1, 178, 1, 178, 1, 179, 1, 179, 3, 179,
		2262, 8, 179, 1, 180, 1, 180, 1, 180, 1, 180, 3, 180, 2268, 8, 180, 1,
		181, 1, 181, 1, 182, 1, 182, 1, 183, 3, 183, 2275, 8, 183, 1, 183, 1, 183,
		3, 183, 2279, 8, 183, 1, 183, 3, 183, 2282, 8, 183, 1, 184, 1, 184, 1,
		185, 1, 185, 1, 186, 1, 186, 1, 187, 1, 187, 1, 188, 1, 188, 1, 188, 1,
		188, 3, 188, 2296, 8, 188, 1, 188, 3, 188, 2299, 8, 188, 1, 188, 3, 188,
		2302, 8, 188, 1, 189, 1, 189, 1, 189, 1, 189, 3, 189, 2308, 8, 189, 1,
		189, 3, 189, 2311, 8, 189, 1, 189, 3, 189, 2314, 8, 189, 1, 189, 0, 3,
		162, 282, 284, 190, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26,
		28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62,
		64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98,
		100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128,
		130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158,
		160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188,
		190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218,
		220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248,
		250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278,
		280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308,
		310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338,
		340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368,
		370, 372, 374, 376, 378, 0, 11, 1, 0, 73, 74, 2, 0, 74, 74, 76, 76, 9,
		0, 1, 5, 8, 8, 11, 11, 13, 15, 17, 19, 21, 22, 24, 24, 26, 26, 29, 29,
		1, 0, 1, 29, 1, 0, 58, 59, 2, 0, 40, 43, 45, 54, 2, 0, 9, 9, 25, 25, 1,
		0, 77, 81, 1, 0, 83, 84, 2, 0, 39, 39, 89, 89, 2, 0, 37, 37, 89, 89, 2498,
		0, 383, 1, 0, 0, 0, 2, 403, 1, 0, 0, 0, 4, 405, 1, 0, 0, 0, 6, 407, 1,
		0, 0, 0, 8, 427, 1, 0, 0, 0, 10, 429, 1, 0, 0, 0, 12, 447, 1, 0, 0, 0,
		14, 457, 1, 0, 0, 0, 16, 474, 1, 0, 0, 0, 18, 476, 1, 0, 0, 0, 20, 488,
		1, 0, 0, 0, 22, 490, 1, 0, 0, 0, 24, 524, 1, 0, 0, 0, 26, 526, 1, 0, 0,
		0, 28, 552, 1, 0, 0, 0, 30, 569, 1, 0, 0, 0, 32, 590, 1, 0, 0, 0, 34, 592,
		1, 0, 0, 0, 36, 594, 1, 0, 0, 0, 38, 596, 1, 0, 0, 0, 40, 600, 1, 0, 0,
		0, 42, 616, 1, 0, 0, 0, 44, 641, 1, 0, 0, 0, 46, 643, 1, 0, 0, 0, 48, 659,
		1, 0, 0, 0, 50, 674, 1, 0, 0, 0, 52, 681, 1, 0, 0, 0, 54, 705, 1, 0, 0,
		0, 56, 723, 1, 0, 0, 0, 58, 734, 1, 0, 0, 0, 60, 742, 1, 0, 0, 0, 62, 744,
		1, 0, 0, 0, 64, 752, 1, 0, 0, 0, 66, 760, 1, 0, 0, 0, 68, 762, 1, 0, 0,
		0, 70, 765, 1, 0, 0, 0, 72, 768, 1, 0, 0, 0, 74, 773, 1, 0, 0, 0, 76, 776,
		1, 0, 0, 0, 78, 795, 1, 0, 0, 0, 80, 816, 1, 0, 0, 0, 82, 820, 1, 0, 0,
		0, 84, 824, 1, 0, 0, 0, 86, 875, 1, 0, 0, 0, 88, 880, 1, 0, 0, 0, 90, 889,
		1, 0, 0, 0, 92, 893, 1, 0, 0, 0, 94, 908, 1, 0, 0, 0, 96, 910, 1, 0, 0,
		0, 98, 923, 1, 0, 0, 0, 100, 925, 1, 0, 0, 0, 102, 939, 1, 0, 0, 0, 104,
		956, 1, 0, 0, 0, 106, 958, 1, 0, 0, 0, 108, 971, 1, 0, 0, 0, 110, 991,
		1, 0, 0, 0, 112, 1030, 1, 0, 0, 0, 114, 1032, 1, 0, 0, 0, 116, 1070, 1,
		0, 0, 0, 118, 1072, 1, 0, 0, 0, 120, 1094, 1, 0, 0, 0, 122, 1115, 1, 0,
		0, 0, 124, 1117, 1, 0, 0, 0, 126, 1159, 1, 0, 0, 0, 128, 1161, 1, 0, 0,
		0, 130, 1168, 1, 0, 0, 0, 132, 1177, 1, 0, 0, 0, 134, 1188, 1, 0, 0, 0,
		136, 1211, 1, 0, 0, 0, 138, 1247, 1, 0, 0, 0, 140, 1249, 1, 0, 0, 0, 142,
		1260, 1, 0, 0, 0, 144, 1267, 1, 0, 0, 0, 146, 1276, 1, 0, 0, 0, 148, 1286,
		1, 0, 0, 0, 150, 1307, 1, 0, 0, 0, 152, 1340, 1, 0, 0, 0, 154, 1342, 1,
		0, 0, 0, 156, 1354, 1, 0, 0, 0, 158, 1375, 1, 0, 0, 0, 160, 1388, 1, 0,
		0, 0, 162, 1424, 1, 0, 0, 0, 164, 1434, 1, 0, 0, 0, 166, 1436, 1, 0, 0,
		0, 168, 1438, 1, 0, 0, 0, 170, 1444, 1, 0, 0, 0, 172, 1452, 1, 0, 0, 0,
		174, 1454, 1, 0, 0, 0, 176, 1457, 1, 0, 0, 0, 178, 1469, 1, 0, 0, 0, 180,
		1474, 1, 0, 0, 0, 182, 1478, 1, 0, 0, 0, 184, 1480, 1, 0, 0, 0, 186, 1502,
		1, 0, 0, 0, 188, 1506, 1, 0, 0, 0, 190, 1524, 1, 0, 0, 0, 192, 1534, 1,
		0, 0, 0, 194, 1538, 1, 0, 0, 0, 196, 1560, 1, 0, 0, 0, 198, 1572, 1, 0,
		0, 0, 200, 1575, 1, 0, 0, 0, 202, 1579, 1, 0, 0, 0, 204, 1587, 1, 0, 0,
		0, 206, 1606, 1, 0, 0, 0, 208, 1615, 1, 0, 0, 0, 210, 1617, 1, 0, 0, 0,
		212, 1620, 1, 0, 0, 0, 214, 1623, 1, 0, 0, 0, 216, 1625, 1, 0, 0, 0, 218,
		1627, 1, 0, 0, 0, 220, 1645, 1, 0, 0, 0, 222, 1663, 1, 0, 0, 0, 224, 1665,
		1, 0, 0, 0, 226, 1683, 1, 0, 0, 0, 228, 1703, 1, 0, 0, 0, 230, 1708, 1,
		0, 0, 0, 232, 1726, 1, 0, 0, 0, 234, 1744, 1, 0, 0, 0, 236, 1749, 1, 0,
		0, 0, 238, 1752, 1, 0, 0, 0, 240, 1786, 1, 0, 0, 0, 242, 1788, 1, 0, 0,
		0, 244, 1808, 1, 0, 0, 0, 246, 1810, 1, 0, 0, 0, 248, 1813, 1, 0, 0, 0,
		250, 1841, 1, 0, 0, 0, 252, 1850, 1, 0, 0, 0, 254, 1852, 1, 0, 0, 0, 256,
		1854, 1, 0, 0, 0, 258, 1867, 1, 0, 0, 0, 260, 1869, 1, 0, 0, 0, 262, 1881,
		1, 0, 0, 0, 264, 1890, 1, 0, 0, 0, 266, 1898, 1, 0, 0, 0, 268, 1900, 1,
		0, 0, 0, 270, 1922, 1, 0, 0, 0, 272, 1924, 1, 0, 0, 0, 274, 1929, 1, 0,
		0, 0, 276, 1933, 1, 0, 0, 0, 278, 1937, 1, 0, 0, 0, 280, 1944, 1, 0, 0,
		0, 282, 1950, 1, 0, 0, 0, 284, 1963, 1, 0, 0, 0, 286, 2037, 1, 0, 0, 0,
		288, 2040, 1, 0, 0, 0, 290, 2049, 1, 0, 0, 0, 292, 2059, 1, 0, 0, 0, 294,
		2063, 1, 0, 0, 0, 296, 2065, 1, 0, 0, 0, 298, 2083, 1, 0, 0, 0, 300, 2105,
		1, 0, 0, 0, 302, 2111, 1, 0, 0, 0, 304, 2117, 1, 0, 0, 0, 306, 2124, 1,
		0, 0, 0, 308, 2136, 1, 0, 0, 0, 310, 2138, 1, 0, 0, 0, 312, 2147, 1, 0,
		0, 0, 314, 2165, 1, 0, 0, 0, 316, 2171, 1, 0, 0, 0, 318, 2175, 1, 0, 0,
		0, 320, 2177, 1, 0, 0, 0, 322, 2185, 1, 0, 0, 0, 324, 2187, 1, 0, 0, 0,
		326, 2189, 1, 0, 0, 0, 328, 2191, 1, 0, 0, 0, 330, 2199, 1, 0, 0, 0, 332,
		2207, 1, 0, 0, 0, 334, 2209, 1, 0, 0, 0, 336, 2211, 1, 0, 0, 0, 338, 2213,
		1, 0, 0, 0, 340, 2215, 1, 0, 0, 0, 342, 2222, 1, 0, 0, 0, 344, 2226, 1,
		0, 0, 0, 346, 2228, 1, 0, 0, 0, 348, 2241, 1, 0, 0, 0, 350, 2245, 1, 0,
		0, 0, 352, 2251, 1, 0, 0, 0, 354, 2255, 1, 0, 0, 0, 356, 2257, 1, 0, 0,
		0, 358, 2261, 1, 0, 0, 0, 360, 2267, 1, 0, 0, 0, 362, 2269, 1, 0, 0, 0,
		364, 2271, 1, 0, 0, 0, 366, 2281, 1, 0, 0, 0, 368, 2283, 1, 0, 0, 0, 370,
		2285, 1, 0, 0, 0, 372, 2287, 1, 0, 0, 0, 374, 2289, 1, 0, 0, 0, 376, 2301,
		1, 0, 0, 0, 378, 2313, 1, 0, 0, 0, 380, 382, 5, 89, 0, 0, 381, 380, 1,
		0, 0, 0, 382, 385, 1, 0, 0, 0, 383, 381, 1, 0, 0, 0, 383, 384, 1, 0, 0,
		0, 384, 387, 1, 0, 0, 0, 385, 383, 1, 0, 0, 0, 386, 388, 3, 6, 3, 0, 387,
		386, 1, 0, 0, 0, 387, 388, 1, 0, 0, 0, 388, 392, 1, 0, 0, 0, 389, 391,
		5, 89, 0, 0, 390, 389, 1, 0, 0, 0, 391, 394, 1, 0, 0, 0, 392, 390, 1, 0,
		0, 0, 392, 393, 1, 0, 0, 0, 393, 395, 1, 0, 0, 0, 394, 392, 1, 0, 0, 0,
		395, 396, 5, 0, 0, 1, 396, 1, 1, 0, 0, 0, 397, 404, 3, 52, 26, 0, 398,
		404, 3, 192, 96, 0, 399, 404, 3, 8, 4, 0, 400, 404, 3, 20, 10, 0, 401,
		404, 3, 32, 16, 0, 402, 404, 3, 4, 2, 0, 403, 397, 1, 0, 0, 0, 403, 398,
		1, 0, 0, 0, 403, 399, 1, 0, 0, 0, 403, 400, 1, 0, 0, 0, 403, 401, 1, 0,
		0, 0, 403, 402, 1, 0, 0, 0, 404, 3, 1, 0, 0, 0, 405, 406, 3, 328, 164,
		0, 406, 5, 1, 0, 0, 0, 407, 419, 3, 2, 1, 0, 408, 412, 3, 372, 186, 0,
		409, 411, 5, 89, 0, 0, 410, 409, 1, 0, 0, 0, 411, 414, 1, 0, 0, 0, 412,
		410, 1, 0, 0, 0, 412, 413, 1, 0, 0, 0, 413, 415, 1, 0, 0, 0, 414, 412,
		1, 0, 0, 0, 415, 416, 3, 2, 1, 0, 416, 418, 1, 0, 0, 0, 417, 408, 1, 0,
		0, 0, 418, 421, 1, 0, 0, 0, 419, 417, 1, 0, 0, 0, 419, 420, 1, 0, 0, 0,
		420, 423, 1, 0, 0, 0, 421, 419, 1, 0, 0, 0, 422, 424, 5, 39, 0, 0, 423,
		422, 1, 0, 0, 0, 423, 424, 1, 0, 0, 0, 424, 7, 1, 0, 0, 0, 425, 428, 3,
		10, 5, 0, 426, 428, 3, 12, 6, 0, 427, 425, 1, 0, 0, 0, 427, 426, 1, 0,
		0, 0, 428, 9, 1, 0, 0, 0, 429, 430, 5, 10, 0, 0, 430, 434, 3, 162, 81,
		0, 431, 433, 5, 89, 0, 0, 432, 431, 1, 0, 0, 0, 433, 436, 1, 0, 0, 0, 434,
		432, 1, 0, 0, 0, 434, 435, 1, 0, 0, 0, 435, 437, 1, 0, 0, 0, 436, 434,
		1, 0, 0, 0, 437, 438, 5, 14, 0, 0, 438, 442, 3, 192, 96, 0, 439, 441, 5,
		89, 0, 0, 440, 439, 1, 0, 0, 0, 441, 444, 1, 0, 0, 0, 442, 440, 1, 0, 0,
		0, 442, 443, 1, 0, 0, 0, 443, 445, 1, 0, 0, 0, 444, 442, 1, 0, 0, 0, 445,
		446, 3, 54, 27, 0, 446, 11, 1, 0, 0, 0, 447, 448, 5, 28, 0, 0, 448, 452,
		3, 14, 7, 0, 449, 451, 5, 89, 0, 0, 450, 449, 1, 0, 0, 0, 451, 454, 1,
		0, 0, 0, 452, 450, 1, 0, 0, 0, 452, 453, 1, 0, 0, 0, 453, 455, 1, 0, 0,
		0, 454, 452, 1, 0, 0, 0, 455, 456, 3, 54, 27, 0, 456, 13, 1, 0, 0, 0, 457,
		469, 3, 16, 8, 0, 458, 462, 3, 374, 187, 0, 459, 461, 5, 89, 0, 0, 460,
		459, 1, 0, 0, 0, 461, 464, 1, 0, 0, 0, 462, 460, 1, 0, 0, 0, 462, 463,
		1, 0, 0, 0, 463, 465, 1, 0, 0, 0, 464, 462, 1, 0, 0, 0, 465, 466, 3, 16,
		8, 0, 466, 468, 1, 0, 0, 0, 467, 458, 1, 0, 0, 0, 468, 471, 1, 0, 0, 0,
		469, 467, 1, 0, 0, 0, 469, 470, 1, 0, 0, 0, 470, 15, 1, 0, 0, 0, 471, 469,
		1, 0, 0, 0, 472, 475, 3, 192, 96, 0, 473, 475, 3, 18, 9, 0, 474, 472, 1,
		0, 0, 0, 474, 473, 1, 0, 0, 0, 475, 17, 1, 0, 0, 0, 476, 477, 5, 27, 0,
		0, 477, 481, 3, 162, 81, 0, 478, 480, 5, 89, 0, 0, 479, 478, 1, 0, 0, 0,
		480, 483, 1, 0, 0, 0, 481, 479, 1, 0, 0, 0, 481, 482, 1, 0, 0, 0, 482,
		484, 1, 0, 0, 0, 483, 481, 1, 0, 0, 0, 484, 485, 3, 92, 46, 0, 485, 19,
		1, 0, 0, 0, 486, 489, 3, 22, 11, 0, 487, 489, 3, 26, 13, 0, 488, 486, 1,
		0, 0, 0, 488, 487, 1, 0, 0, 0, 489, 21, 1, 0, 0, 0, 490, 491, 5, 12, 0,
		0, 491, 495, 3, 14, 7, 0, 492, 494, 5, 89, 0, 0, 493, 492, 1, 0, 0, 0,
		494, 497, 1, 0, 0, 0, 495, 493, 1, 0, 0, 0, 495, 496, 1, 0, 0, 0, 496,
		498, 1, 0, 0, 0, 497, 495, 1, 0, 0, 0, 498, 502, 3, 54, 27, 0, 499, 501,
		5, 89, 0, 0, 500, 499, 1, 0, 0, 0, 501, 504, 1, 0, 0, 0, 502, 500, 1, 0,
		0, 0, 502, 503, 1, 0, 0, 0, 503, 506, 1, 0, 0, 0, 504, 502, 1, 0, 0, 0,
		505, 507, 3, 24, 12, 0, 506, 505, 1, 0, 0, 0, 506, 507, 1, 0, 0, 0, 507,
		23, 1, 0, 0, 0, 508, 512, 5, 7, 0, 0, 509, 511, 5, 89, 0, 0, 510, 509,
		1, 0, 0, 0, 511, 514, 1, 0, 0, 0, 512, 510, 1, 0, 0, 0, 512, 513, 1, 0,
		0, 0, 513, 515, 1, 0, 0, 0, 514, 512, 1, 0, 0, 0, 515, 525, 3, 54, 27,
		0, 516, 520, 5, 7, 0, 0, 517, 519, 5, 89, 0, 0, 518, 517, 1, 0, 0, 0, 519,
		522, 1, 0, 0, 0, 520, 518, 1, 0, 0, 0, 520, 521, 1, 0, 0, 0, 521, 523,
		1, 0, 0, 0, 522, 520, 1, 0, 0, 0, 523, 525, 3, 22, 11, 0, 524, 508, 1,
		0, 0, 0, 524, 516, 1, 0, 0, 0, 525, 25, 1, 0, 0, 0, 526, 527, 5, 17, 0,
		0, 527, 531, 3, 192, 96, 0, 528, 530, 5, 89, 0, 0, 529, 528, 1, 0, 0, 0,
		530, 533, 1, 0, 0, 0, 531, 529, 1, 0, 0, 0, 531, 532, 1, 0, 0, 0, 532,
		534, 1, 0, 0, 0, 533, 531, 1, 0, 0, 0, 534, 542, 5, 31, 0, 0, 535, 537,
		5, 89, 0, 0, 536, 535, 1, 0, 0, 0, 537, 540, 1, 0, 0, 0, 538, 536, 1, 0,
		0, 0, 538, 539, 1, 0, 0, 0, 539, 541, 1, 0, 0, 0, 540, 538, 1, 0, 0, 0,
		541, 543, 3, 28, 14, 0, 542, 538, 1, 0, 0, 0, 542, 543, 1, 0, 0, 0, 543,
		547, 1, 0, 0, 0, 544, 546, 5, 89, 0, 0, 545, 544, 1, 0, 0, 0, 546, 549,
		1, 0, 0, 0, 547, 545, 1, 0, 0, 0, 547, 548, 1, 0, 0, 0, 548, 550, 1, 0,
		0, 0, 549, 547, 1, 0, 0, 0, 550, 551, 5, 34, 0, 0, 551, 27, 1, 0, 0, 0,
		552, 564, 3, 30, 15, 0, 553, 557, 3, 372, 186, 0, 554, 556, 5, 89, 0, 0,
		555, 554, 1, 0, 0, 0, 556, 559, 1, 0, 0, 0, 557, 555, 1, 0, 0, 0, 557,
		558, 1, 0, 0, 0, 558, 560, 1, 0, 0, 0, 559, 557, 1, 0, 0, 0, 560, 561,
		3, 30, 15, 0, 561, 563, 1, 0, 0, 0, 562, 553, 1, 0, 0, 0, 563, 566, 1,
		0, 0, 0, 564, 562, 1, 0, 0, 0, 564, 565, 1, 0, 0, 0, 565, 567, 1, 0, 0,
		0, 566, 564, 1, 0, 0, 0, 567, 568, 3, 372, 186, 0, 568, 29, 1, 0, 0, 0,
		569, 573, 3, 162, 81, 0, 570, 572, 5, 89, 0, 0, 571, 570, 1, 0, 0, 0, 572,
		575, 1, 0, 0, 0, 573, 571, 1, 0, 0, 0, 573, 574, 1, 0, 0, 0, 574, 576,
		1, 0, 0, 0, 575, 573, 1, 0, 0, 0, 576, 580, 5, 61, 0, 0, 577, 579, 5, 89,
		0, 0, 578, 577, 1, 0, 0, 0, 579, 582, 1, 0, 0, 0, 580, 578, 1, 0, 0, 0,
		580, 581, 1, 0, 0, 0, 581, 585, 1, 0, 0, 0, 582, 580, 1, 0, 0, 0, 583,
		586, 3, 54, 27, 0, 584, 586, 3, 192, 96, 0, 585, 583, 1, 0, 0, 0, 585,
		584, 1, 0, 0, 0, 586, 31, 1, 0, 0, 0, 587, 591, 3, 34, 17, 0, 588, 591,
		3, 36, 18, 0, 589, 591, 3, 38, 19, 0, 590, 587, 1, 0, 0, 0, 590, 588, 1,
		0, 0, 0, 590, 589, 1, 0, 0, 0, 591, 33, 1, 0, 0, 0, 592, 593, 5, 4, 0,
		0, 593, 35, 1, 0, 0, 0, 594, 595, 5, 6, 0, 0, 595, 37, 1, 0, 0, 0, 596,
		598, 5, 23, 0, 0, 597, 599, 3, 192, 96, 0, 598, 597, 1, 0, 0, 0, 598, 599,
		1, 0, 0, 0, 599, 39, 1, 0, 0, 0, 600, 604, 5, 40, 0, 0, 601, 603, 5, 89,
		0, 0, 602, 601, 1, 0, 0, 0, 603, 606, 1, 0, 0, 0, 604, 602, 1, 0, 0, 0,
		604, 605, 1, 0, 0, 0, 605, 607, 1, 0, 0, 0, 606, 604, 1, 0, 0, 0, 607,
		611, 3, 42, 21, 0, 608, 610, 5, 89, 0, 0, 609, 608, 1, 0, 0, 0, 610, 613,
		1, 0, 0, 0, 611, 609, 1, 0, 0, 0, 611, 612, 1, 0, 0, 0, 612, 614, 1, 0,
		0, 0, 613, 611, 1, 0, 0, 0, 614, 615, 5, 41, 0, 0, 615, 41, 1, 0, 0, 0,
		616, 628, 3, 44, 22, 0, 617, 621, 3, 378, 189, 0, 618, 620, 5, 89, 0, 0,
		619, 618, 1, 0, 0, 0, 620, 623, 1, 0, 0, 0, 621, 619, 1, 0, 0, 0, 621,
		622, 1, 0, 0, 0, 622, 624, 1, 0, 0, 0, 623, 621, 1, 0, 0, 0, 624, 625,
		3, 44, 22, 0, 625, 627, 1, 0, 0, 0, 626, 617, 1, 0, 0, 0, 627, 630, 1,
		0, 0, 0, 628, 626, 1, 0, 0, 0, 628, 629, 1, 0, 0, 0, 629, 632, 1, 0, 0,
		0, 630, 628, 1, 0, 0, 0, 631, 633, 3, 378, 189, 0, 632, 631, 1, 0, 0, 0,
		632, 633, 1, 0, 0, 0, 633, 43, 1, 0, 0, 0, 634, 642, 3, 294, 147, 0, 635,
		636, 3, 294, 147, 0, 636, 637, 5, 65, 0, 0, 637, 642, 1, 0, 0, 0, 638,
		639, 3, 294, 147, 0, 639, 640, 3, 288, 144, 0, 640, 642, 1, 0, 0, 0, 641,
		634, 1, 0, 0, 0, 641, 635, 1, 0, 0, 0, 641, 638, 1, 0, 0, 0, 642, 45, 1,
		0, 0, 0, 643, 647, 5, 40, 0, 0, 644, 646, 5, 89, 0, 0, 645, 644, 1, 0,
		0, 0, 646, 649, 1, 0, 0, 0, 647, 645, 1, 0, 0, 0, 647, 648, 1, 0, 0, 0,
		648, 650, 1, 0, 0, 0, 649, 647, 1, 0, 0, 0, 650, 654, 3, 48, 24, 0, 651,
		653, 5, 89, 0, 0, 652, 651, 1, 0, 0, 0, 653, 656, 1, 0, 0, 0, 654, 652,
		1, 0, 0, 0, 654, 655, 1, 0, 0, 0, 655, 657, 1, 0, 0, 0, 656, 654, 1, 0,
		0, 0, 657, 658, 5, 41, 0, 0, 658, 47, 1, 0, 0, 0, 659, 671, 3, 50, 25,
		0, 660, 664, 3, 374, 187, 0, 661, 663, 5, 89, 0, 0, 662, 661, 1, 0, 0,
		0, 663, 666, 1, 0, 0, 0, 664, 662, 1, 0, 0, 0, 664, 665, 1, 0, 0, 0, 665,
		667, 1, 0, 0, 0, 666, 664, 1, 0, 0, 0, 667, 668, 3, 50, 25, 0, 668, 670,
		1, 0, 0, 0, 669, 660, 1, 0, 0, 0, 670, 673, 1, 0, 0, 0, 671, 669, 1, 0,
		0, 0, 671, 672, 1, 0, 0, 0, 672, 49, 1, 0, 0, 0, 673, 671, 1, 0, 0, 0,
		674, 676, 3, 282, 141, 0, 675, 677, 3, 190, 95, 0, 676, 675, 1, 0, 0, 0,
		676, 677, 1, 0, 0, 0, 677, 51, 1, 0, 0, 0, 678, 679, 3, 328, 164, 0, 679,
		680, 5, 89, 0, 0, 680, 682, 1, 0, 0, 0, 681, 678, 1, 0, 0, 0, 681, 682,
		1, 0, 0, 0, 682, 690, 1, 0, 0, 0, 683, 687, 3, 190, 95, 0, 684, 686, 5,
		89, 0, 0, 685, 684, 1, 0, 0, 0, 686, 689, 1, 0, 0, 0, 687, 685, 1, 0, 0,
		0, 687, 688, 1, 0, 0, 0, 688, 691, 1, 0, 0, 0, 689, 687, 1, 0, 0, 0, 690,
		683, 1, 0, 0, 0, 690, 691, 1, 0, 0, 0, 691, 703, 1, 0, 0, 0, 692, 704,
		3, 56, 28, 0, 693, 704, 3, 62, 31, 0, 694, 704, 3, 84, 42, 0, 695, 704,
		3, 94, 47, 0, 696, 704, 3, 96, 48, 0, 697, 704, 3, 102, 51, 0, 698, 704,
		3, 118, 59, 0, 699, 704, 3, 128, 64, 0, 700, 704, 3, 142, 71, 0, 701, 704,
		3, 156, 78, 0, 702, 704, 3, 158, 79, 0, 703, 692, 1, 0, 0, 0, 703, 693,
		1, 0, 0, 0, 703, 694, 1, 0, 0, 0, 703, 695, 1, 0, 0, 0, 703, 696, 1, 0,
		0, 0, 703, 697, 1, 0, 0, 0, 703, 698, 1, 0, 0, 0, 703, 699, 1, 0, 0, 0,
		703, 700, 1, 0, 0, 0, 703, 701, 1, 0, 0, 0, 703, 702, 1, 0, 0, 0, 704,
		53, 1, 0, 0, 0, 705, 713, 5, 31, 0, 0, 706, 708, 5, 89, 0, 0, 707, 706,
		1, 0, 0, 0, 708, 711, 1, 0, 0, 0, 709, 707, 1, 0, 0, 0, 709, 710, 1, 0,
		0, 0, 710, 712, 1, 0, 0, 0, 711, 709, 1, 0, 0, 0, 712, 714, 3, 6, 3, 0,
		713, 709, 1, 0, 0, 0, 713, 714, 1, 0, 0, 0, 714, 718, 1, 0, 0, 0, 715,
		717, 5, 89, 0, 0, 716, 715, 1, 0, 0, 0, 717, 720, 1, 0, 0, 0, 718, 716,
		1, 0, 0, 0, 718, 719, 1, 0, 0, 0, 719, 721, 1, 0, 0, 0, 720, 718, 1, 0,
		0, 0, 721, 722, 5, 34, 0, 0, 722, 55, 1, 0, 0, 0, 723, 724, 5, 21, 0, 0,
		724, 732, 3, 58, 29, 0, 725, 727, 5, 89, 0, 0, 726, 725, 1, 0, 0, 0, 727,
		730, 1, 0, 0, 0, 728, 726, 1, 0, 0, 0, 728, 729, 1, 0, 0, 0, 729, 731,
		1, 0, 0, 0, 730, 728, 1, 0, 0, 0, 731, 733, 3, 230, 115, 0, 732, 728, 1,
		0, 0, 0, 732, 733, 1, 0, 0, 0, 733, 57, 1, 0, 0, 0, 734, 739, 3, 60, 30,
		0, 735, 736, 5, 30, 0, 0, 736, 738, 3, 60, 30, 0, 737, 735, 1, 0, 0, 0,
		738, 741, 1, 0, 0, 0, 739, 737, 1, 0, 0, 0, 739, 740, 1, 0, 0, 0, 740,
		59, 1, 0, 0, 0, 741, 739, 1, 0, 0, 0, 742, 743, 5, 74, 0, 0, 743, 61, 1,
		0, 0, 0, 744, 745, 5, 13, 0, 0, 745, 750, 3, 64, 32, 0, 746, 751, 3, 68,
		34, 0, 747, 751, 3, 70, 35, 0, 748, 751, 3, 72, 36, 0, 749, 751, 3, 76,
		38, 0, 750, 746, 1, 0, 0, 0, 750, 747, 1, 0, 0, 0, 750, 748, 1, 0, 0, 0,
		750, 749, 1, 0, 0, 0, 750, 751, 1, 0, 0, 0, 751, 63, 1, 0, 0, 0, 752, 757,
		3, 66, 33, 0, 753, 754, 5, 30, 0, 0, 754, 756, 3, 66, 33, 0, 755, 753,
		1, 0, 0, 0, 756, 759, 1, 0, 0, 0, 757, 755, 1, 0, 0, 0, 757, 758, 1, 0,
		0, 0, 758, 65, 1, 0, 0, 0, 759, 757, 1, 0, 0, 0, 760, 761, 3, 316, 158,
		0, 761, 67, 1, 0, 0, 0, 762, 763, 5, 30, 0, 0, 763, 764, 5, 51, 0, 0, 764,
		69, 1, 0, 0, 0, 765, 766, 5, 2, 0, 0, 766, 767, 3, 316, 158, 0, 767, 71,
		1, 0, 0, 0, 768, 769, 5, 30, 0, 0, 769, 771, 3, 294, 147, 0, 770, 772,
		3, 74, 37, 0, 771, 770, 1, 0, 0, 0, 771, 772, 1, 0, 0, 0, 772, 73, 1, 0,
		0, 0, 773, 774, 5, 2, 0, 0, 774, 775, 3, 294, 147, 0, 775, 75, 1, 0, 0,
		0, 776, 777, 5, 30, 0, 0, 777, 781, 5, 31, 0, 0, 778, 780, 5, 89, 0, 0,
		779, 778, 1, 0, 0, 0, 780, 783, 1, 0, 0, 0, 781, 779, 1, 0, 0, 0, 781,
		782, 1, 0, 0, 0, 782, 784, 1, 0, 0, 0, 783, 781, 1, 0, 0, 0, 784, 788,
		3, 78, 39, 0, 785, 787, 5, 89, 0, 0, 786, 785, 1, 0, 0, 0, 787, 790, 1,
		0, 0, 0, 788, 786, 1, 0, 0, 0, 788, 789, 1, 0, 0, 0, 789, 791, 1, 0, 0,
		0, 790, 788, 1, 0, 0, 0, 791, 792, 5, 34, 0, 0, 792, 77, 1, 0, 0, 0, 793,
		796, 3, 80, 40, 0, 794, 796, 3, 82, 41, 0, 795, 793, 1, 0, 0, 0, 795, 794,
		1, 0, 0, 0, 796, 810, 1, 0, 0, 0, 797, 801, 3, 374, 187, 0, 798, 800, 5,
		89, 0, 0, 799, 798, 1, 0, 0, 0, 800, 803, 1, 0, 0, 0, 801, 799, 1, 0, 0,
		0, 801, 802, 1, 0, 0, 0, 802, 806, 1, 0, 0, 0, 803, 801, 1, 0, 0, 0, 804,
		807, 3, 80, 40, 0, 805, 807, 3, 82, 41, 0, 806, 804, 1, 0, 0, 0, 806, 805,
		1, 0, 0, 0, 807, 809, 1, 0, 0, 0, 808, 797, 1, 0, 0, 0, 809, 812, 1, 0,
		0, 0, 810, 808, 1, 0, 0, 0, 810, 811, 1, 0, 0, 0, 811, 814, 1, 0, 0, 0,
		812, 810, 1, 0, 0, 0, 813, 815, 3, 374, 187, 0, 814, 813, 1, 0, 0, 0, 814,
		815, 1, 0, 0, 0, 815, 79, 1, 0, 0, 0, 816, 818, 3, 316, 158, 0, 817, 819,
		3, 70, 35, 0, 818, 817, 1, 0, 0, 0, 818, 819, 1, 0, 0, 0, 819, 81, 1, 0,
		0, 0, 820, 822, 3, 294, 147, 0, 821, 823, 3, 74, 37, 0, 822, 821, 1, 0,
		0, 0, 822, 823, 1, 0, 0, 0, 823, 83, 1, 0, 0, 0, 824, 825, 5, 5, 0, 0,
		825, 826, 3, 86, 43, 0, 826, 85, 1, 0, 0, 0, 827, 839, 3, 90, 45, 0, 828,
		832, 3, 374, 187, 0, 829, 831, 5, 89, 0, 0, 830, 829, 1, 0, 0, 0, 831,
		834, 1, 0, 0, 0, 832, 830, 1, 0, 0, 0, 832, 833, 1, 0, 0, 0, 833, 835,
		1, 0, 0, 0, 834, 832, 1, 0, 0, 0, 835, 836, 3, 90, 45, 0, 836, 838, 1,
		0, 0, 0, 837, 828, 1, 0, 0, 0, 838, 841, 1, 0, 0, 0, 839, 837, 1, 0, 0,
		0, 839, 840, 1, 0, 0, 0, 840, 876, 1, 0, 0, 0, 841, 839, 1, 0, 0, 0, 842,
		846, 5, 31, 0, 0, 843, 845, 5, 89, 0, 0, 844, 843, 1, 0, 0, 0, 845, 848,
		1, 0, 0, 0, 846, 844, 1, 0, 0, 0, 846, 847, 1, 0, 0, 0, 847, 849, 1, 0,
		0, 0, 848, 846, 1, 0, 0, 0, 849, 861, 3, 88, 44, 0, 850, 854, 3, 374, 187,
		0, 851, 853, 5, 89, 0, 0, 852, 851, 1, 0, 0, 0, 853, 856, 1, 0, 0, 0, 854,
		852, 1, 0, 0, 0, 854, 855, 1, 0, 0, 0, 855, 857, 1, 0, 0, 0, 856, 854,
		1, 0, 0, 0, 857, 858, 3, 88, 44, 0, 858, 860, 1, 0, 0, 0, 859, 850, 1,
		0, 0, 0, 860, 863, 1, 0, 0, 0, 861, 859, 1, 0, 0, 0, 861, 862, 1, 0, 0,
		0, 862, 865, 1, 0, 0, 0, 863, 861, 1, 0, 0, 0, 864, 866, 3, 374, 187, 0,
		865, 864, 1, 0, 0, 0, 865, 866, 1, 0, 0, 0, 866, 870, 1, 0, 0, 0, 867,
		869, 5, 89, 0, 0, 868, 867, 1, 0, 0, 0, 869, 872, 1, 0, 0, 0, 870, 868,
		1, 0, 0, 0, 870, 871, 1, 0, 0, 0, 871, 873, 1, 0, 0, 0, 872, 870, 1, 0,
		0, 0, 873, 874, 5, 34, 0, 0, 874, 876, 1, 0, 0, 0, 875, 827, 1, 0, 0, 0,
		875, 842, 1, 0, 0, 0, 876, 87, 1, 0, 0, 0, 877, 878, 3, 328, 164, 0, 878,
		879, 5, 89, 0, 0, 879, 881, 1, 0, 0, 0, 880, 877, 1, 0, 0, 0, 880, 881,
		1, 0, 0, 0, 881, 885, 1, 0, 0, 0, 882, 883, 3, 190, 95, 0, 883, 884, 5,
		89, 0, 0, 884, 886, 1, 0, 0, 0, 885, 882, 1, 0, 0, 0, 885, 886, 1, 0, 0,
		0, 886, 887, 1, 0, 0, 0, 887, 888, 3, 90, 45, 0, 888, 89, 1, 0, 0, 0, 889,
		891, 3, 162, 81, 0, 890, 892, 3, 92, 46, 0, 891, 890, 1, 0, 0, 0, 891,
		892, 1, 0, 0, 0, 892, 91, 1, 0, 0, 0, 893, 897, 3, 332, 166, 0, 894, 896,
		5, 89, 0, 0, 895, 894, 1, 0, 0, 0, 896, 899, 1, 0, 0, 0, 897, 895, 1, 0,
		0, 0, 897, 898, 1, 0, 0, 0, 898, 900, 1, 0, 0, 0, 899, 897, 1, 0, 0, 0,
		900, 901, 3, 192, 96, 0, 901, 93, 1, 0, 0, 0, 902, 903, 5, 27, 0, 0, 903,
		909, 3, 86, 43, 0, 904, 905, 3, 166, 83, 0, 905, 906, 5, 60, 0, 0, 906,
		907, 3, 192, 96, 0, 907, 909, 1, 0, 0, 0, 908, 902, 1, 0, 0, 0, 908, 904,
		1, 0, 0, 0, 909, 95, 1, 0, 0, 0, 910, 911, 5, 26, 0, 0, 911, 913, 3, 98,
		49, 0, 912, 914, 3, 40, 20, 0, 913, 912, 1, 0, 0, 0, 913, 914, 1, 0, 0,
		0, 914, 918, 1, 0, 0, 0, 915, 917, 5, 89, 0, 0, 916, 915, 1, 0, 0, 0, 917,
		920, 1, 0, 0, 0, 918, 916, 1, 0, 0, 0, 918, 919, 1, 0, 0, 0, 919, 921,
		1, 0, 0, 0, 920, 918, 1, 0, 0, 0, 921, 922, 3, 100, 50, 0, 922, 97, 1,
		0, 0, 0, 923, 924, 3, 294, 147, 0, 924, 99, 1, 0, 0, 0, 925, 929, 3, 332,
		166, 0, 926, 928, 5, 89, 0, 0, 927, 926, 1, 0, 0, 0, 928, 931, 1, 0, 0,
		0, 929, 927, 1, 0, 0, 0, 929, 930, 1, 0, 0, 0, 930, 932, 1, 0, 0, 0, 931,
		929, 1, 0, 0, 0, 932, 934, 3, 282, 141, 0, 933, 935, 3, 190, 95, 0, 934,
		933, 1, 0, 0, 0, 934, 935, 1, 0, 0, 0, 935, 937, 1, 0, 0, 0, 936, 938,
		3, 330, 165, 0, 937, 936, 1, 0, 0, 0, 937, 938, 1, 0, 0, 0, 938, 101, 1,
		0, 0, 0, 939, 940, 5, 11, 0, 0, 940, 942, 3, 104, 52, 0, 941, 943, 3, 40,
		20, 0, 942, 941, 1, 0, 0, 0, 942, 943, 1, 0, 0, 0, 943, 944, 1, 0, 0, 0,
		944, 952, 3, 106, 53, 0, 945, 947, 5, 89, 0, 0, 946, 945, 1, 0, 0, 0, 947,
		950, 1, 0, 0, 0, 948, 946, 1, 0, 0, 0, 948, 949, 1, 0, 0, 0, 949, 951,
		1, 0, 0, 0, 950, 948, 1, 0, 0, 0, 951, 953, 3, 110, 55, 0, 952, 948, 1,
		0, 0, 0, 952, 953, 1, 0, 0, 0, 953, 103, 1, 0, 0, 0, 954, 957, 3, 316,
		158, 0, 955, 957, 3, 348, 174, 0, 956, 954, 1, 0, 0, 0, 956, 955, 1, 0,
		0, 0, 957, 105, 1, 0, 0, 0, 958, 960, 3, 112, 56, 0, 959, 961, 3, 330,
		165, 0, 960, 959, 1, 0, 0, 0, 960, 961, 1, 0, 0, 0, 961, 969, 1, 0, 0,
		0, 962, 964, 5, 89, 0, 0, 963, 962, 1, 0, 0, 0, 964, 967, 1, 0, 0, 0, 965,
		963, 1, 0, 0, 0, 965, 966, 1, 0, 0, 0, 966, 968, 1, 0, 0, 0, 967, 965,
		1, 0, 0, 0, 968, 970, 3, 108, 54, 0, 969, 965, 1, 0, 0, 0, 969, 970, 1,
		0, 0, 0, 970, 107, 1, 0, 0, 0, 971, 976, 3, 336, 168, 0, 972, 974, 3, 318,
		159, 0, 973, 975, 5, 38, 0, 0, 974, 973, 1, 0, 0, 0, 974, 975, 1, 0, 0,
		0, 975, 977, 1, 0, 0, 0, 976, 972, 1, 0, 0, 0, 976, 977, 1, 0, 0, 0, 977,
		978, 1, 0, 0, 0, 978, 980, 3, 282, 141, 0, 979, 981, 3, 190, 95, 0, 980,
		979, 1, 0, 0, 0, 980, 981, 1, 0, 0, 0, 981, 989, 1, 0, 0, 0, 982, 984,
		5, 89, 0, 0, 983, 982, 1, 0, 0, 0, 984, 987, 1, 0, 0, 0, 985, 983, 1, 0,
		0, 0, 985, 986, 1, 0, 0, 0, 986, 988, 1, 0, 0, 0, 987, 985, 1, 0, 0, 0,
		988, 990, 3, 330, 165, 0, 989, 985, 1, 0, 0, 0, 989, 990, 1, 0, 0, 0, 990,
		109, 1, 0, 0, 0, 991, 993, 5, 31, 0, 0, 992, 994, 3, 330, 165, 0, 993,
		992, 1, 0, 0, 0, 993, 994, 1, 0, 0, 0, 994, 1002, 1, 0, 0, 0, 995, 997,
		5, 89, 0, 0, 996, 995, 1, 0, 0, 0, 997, 1000, 1, 0, 0, 0, 998, 996, 1,
		0, 0, 0, 998, 999, 1, 0, 0, 0, 999, 1001, 1, 0, 0, 0, 1000, 998, 1, 0,
		0, 0, 1001, 1003, 3, 6, 3, 0, 1002, 998, 1, 0, 0, 0, 1002, 1003, 1, 0,
		0, 0, 1003, 1007, 1, 0, 0, 0, 1004, 1006, 5, 89, 0, 0, 1005, 1004, 1, 0,
		0, 0, 1006, 1009, 1, 0, 0, 0, 1007, 1005, 1, 0, 0, 0, 1007, 1008, 1, 0,
		0, 0, 1008, 1010, 1, 0, 0, 0, 1009, 1007, 1, 0, 0, 0, 1010, 1011, 5, 34,
		0, 0, 1011, 111, 1, 0, 0, 0, 1012, 1013, 5, 32, 0, 0, 1013, 1031, 5, 35,
		0, 0, 1014, 1018, 5, 32, 0, 0, 1015, 1017, 5, 89, 0, 0, 1016, 1015, 1,
		0, 0, 0, 1017, 1020, 1, 0, 0, 0, 1018, 1016, 1, 0, 0, 0, 1018, 1019, 1,
		0, 0, 0, 1019, 1021, 1, 0, 0, 0, 1020, 1018, 1, 0, 0, 0, 1021, 1025, 3,
		114, 57, 0, 1022, 1024, 5, 89, 0, 0, 1023, 1022, 1, 0, 0, 0, 1024, 1027,
		1, 0, 0, 0, 1025, 1023, 1, 0, 0, 0, 1025, 1026, 1, 0, 0, 0, 1026, 1028,
		1, 0, 0, 0, 1027, 1025, 1, 0, 0, 0, 1028, 1029, 5, 35, 0, 0, 1029, 1031,
		1, 0, 0, 0, 1030, 1012, 1, 0, 0, 0, 1030, 1014, 1, 0, 0, 0, 1031, 113,
		1, 0, 0, 0, 1032, 1044, 3, 116, 58, 0, 1033, 1037, 3, 378, 189, 0, 1034,
		1036, 5, 89, 0, 0, 1035, 1034, 1, 0, 0, 0, 1036, 1039, 1, 0, 0, 0, 1037,
		1035, 1, 0, 0, 0, 1037, 1038, 1, 0, 0, 0, 1038, 1040, 1, 0, 0, 0, 1039,
		1037, 1, 0, 0, 0, 1040, 1041, 3, 116, 58, 0, 1041, 1043, 1, 0, 0, 0, 1042,
		1033, 1, 0, 0, 0, 1043, 1046, 1, 0, 0, 0, 1044, 1042, 1, 0, 0, 0, 1044,
		1045, 1, 0, 0, 0, 1045, 1048, 1, 0, 0, 0, 1046, 1044, 1, 0, 0, 0, 1047,
		1049, 3, 378, 189, 0, 1048, 1047, 1, 0, 0, 0, 1048, 1049, 1, 0, 0, 0, 1049,
		115, 1, 0, 0, 0, 1050, 1051, 3, 318, 159, 0, 1051, 1059, 3, 288, 144, 0,
		1052, 1054, 5, 89, 0, 0, 1053, 1052, 1, 0, 0, 0, 1054, 1057, 1, 0, 0, 0,
		1055, 1053, 1, 0, 0, 0, 1055, 1056, 1, 0, 0, 0, 1056, 1058, 1, 0, 0, 0,
		1057, 1055, 1, 0, 0, 0, 1058, 1060, 3, 92, 46, 0, 1059, 1055, 1, 0, 0,
		0, 1059, 1060, 1, 0, 0, 0, 1060, 1071, 1, 0, 0, 0, 1061, 1063, 3, 318,
		159, 0, 1062, 1064, 5, 38, 0, 0, 1063, 1062, 1, 0, 0, 0, 1063, 1064, 1,
		0, 0, 0, 1064, 1065, 1, 0, 0, 0, 1065, 1066, 3, 282, 141, 0, 1066, 1068,
		5, 65, 0, 0, 1067, 1069, 3, 190, 95, 0, 1068, 1067, 1, 0, 0, 0, 1068, 1069,
		1, 0, 0, 0, 1069, 1071, 1, 0, 0, 0, 1070, 1050, 1, 0, 0, 0, 1070, 1061,
		1, 0, 0, 0, 1071, 117, 1, 0, 0, 0, 1072, 1073, 5, 8, 0, 0, 1073, 1075,
		3, 122, 61, 0, 1074, 1076, 3, 40, 20, 0, 1075, 1074, 1, 0, 0, 0, 1075,
		1076, 1, 0, 0, 0, 1076, 1084, 1, 0, 0, 0, 1077, 1079, 5, 89, 0, 0, 1078,
		1077, 1, 0, 0, 0, 1079, 1082, 1, 0, 0, 0, 1080, 1078, 1, 0, 0, 0, 1080,
		1081, 1, 0, 0, 0, 1081, 1083, 1, 0, 0, 0, 1082, 1080, 1, 0, 0, 0, 1083,
		1085, 3, 310, 155, 0, 1084, 1080, 1, 0, 0, 0, 1084, 1085, 1, 0, 0, 0, 1085,
		1089, 1, 0, 0, 0, 1086, 1088, 5, 89, 0, 0, 1087, 1086, 1, 0, 0, 0, 1088,
		1091, 1, 0, 0, 0, 1089, 1087, 1, 0, 0, 0, 1089, 1090, 1, 0, 0, 0, 1090,
		1092, 1, 0, 0, 0, 1091, 1089, 1, 0, 0, 0, 1092, 1093, 3, 120, 60, 0, 1093,
		119, 1, 0, 0, 0, 1094, 1096, 5, 31, 0, 0, 1095, 1097, 3, 330, 165, 0, 1096,
		1095, 1, 0, 0, 0, 1096, 1097, 1, 0, 0, 0, 1097, 1105, 1, 0, 0, 0, 1098,
		1100, 5, 89, 0, 0, 1099, 1098, 1, 0, 0, 0, 1100, 1103, 1, 0, 0, 0, 1101,
		1099, 1, 0, 0, 0, 1101, 1102, 1, 0, 0, 0, 1102, 1104, 1, 0, 0, 0, 1103,
		1101, 1, 0, 0, 0, 1104, 1106, 3, 124, 62, 0, 1105, 1101, 1, 0, 0, 0, 1105,
		1106, 1, 0, 0, 0, 1106, 1110, 1, 0, 0, 0, 1107, 1109, 5, 89, 0, 0, 1108,
		1107, 1, 0, 0, 0, 1109, 1112, 1, 0, 0, 0, 1110, 1108, 1, 0, 0, 0, 1110,
		1111, 1, 0, 0, 0, 1111, 1113, 1, 0, 0, 0, 1112, 1110, 1, 0, 0, 0, 1113,
		1114, 5, 34, 0, 0, 1114, 121, 1, 0, 0, 0, 1115, 1116, 3, 294, 147, 0, 1116,
		123, 1, 0, 0, 0, 1117, 1129, 3, 126, 63, 0, 1118, 1122, 3, 378, 189, 0,
		1119, 1121, 5, 89, 0, 0, 1120, 1119, 1, 0, 0, 0, 1121, 1124, 1, 0, 0, 0,
		1122, 1120, 1, 0, 0, 0, 1122, 1123, 1, 0, 0, 0, 1123, 1125, 1, 0, 0, 0,
		1124, 1122, 1, 0, 0, 0, 1125, 1126, 3, 126, 63, 0, 1126, 1128, 1, 0, 0,
		0, 1127, 1118, 1, 0, 0, 0, 1128, 1131, 1, 0, 0, 0, 1129, 1127, 1, 0, 0,
		0, 1129, 1130, 1, 0, 0, 0, 1130, 1133, 1, 0, 0, 0, 1131, 1129, 1, 0, 0,
		0, 1132, 1134, 3, 378, 189, 0, 1133, 1132, 1, 0, 0, 0, 1133, 1134, 1, 0,
		0, 0, 1134, 125, 1, 0, 0, 0, 1135, 1136, 3, 328, 164, 0, 1136, 1137, 5,
		89, 0, 0, 1137, 1139, 1, 0, 0, 0, 1138, 1135, 1, 0, 0, 0, 1138, 1139, 1,
		0, 0, 0, 1139, 1143, 1, 0, 0, 0, 1140, 1141, 3, 190, 95, 0, 1141, 1142,
		5, 89, 0, 0, 1142, 1144, 1, 0, 0, 0, 1143, 1140, 1, 0, 0, 0, 1143, 1144,
		1, 0, 0, 0, 1144, 1145, 1, 0, 0, 0, 1145, 1147, 3, 316, 158, 0, 1146, 1148,
		3, 190, 95, 0, 1147, 1146, 1, 0, 0, 0, 1147, 1148, 1, 0, 0, 0, 1148, 1156,
		1, 0, 0, 0, 1149, 1151, 5, 89, 0, 0, 1150, 1149, 1, 0, 0, 0, 1151, 1154,
		1, 0, 0, 0, 1152, 1150, 1, 0, 0, 0, 1152, 1153, 1, 0, 0, 0, 1153, 1155,
		1, 0, 0, 0, 1154, 1152, 1, 0, 0, 0, 1155, 1157, 3, 92, 46, 0, 1156, 1152,
		1, 0, 0, 0, 1156, 1157, 1, 0, 0, 0, 1157, 1160, 1, 0, 0, 0, 1158, 1160,
		3, 4, 2, 0, 1159, 1138, 1, 0, 0, 0, 1159, 1158, 1, 0, 0, 0, 1160, 127,
		1, 0, 0, 0, 1161, 1162, 5, 26, 0, 0, 1162, 1164, 3, 130, 65, 0, 1163, 1165,
		3, 40, 20, 0, 1164, 1163, 1, 0, 0, 0, 1164, 1165, 1, 0, 0, 0, 1165, 1166,
		1, 0, 0, 0, 1166, 1167, 3, 132, 66, 0, 1167, 129, 1, 0, 0, 0, 1168, 1169,
		3, 294, 147, 0, 1169, 131, 1, 0, 0, 0, 1170, 1172, 5, 89, 0, 0, 1171, 1170,
		1, 0, 0, 0, 1172, 1175, 1, 0, 0, 0, 1173, 1171, 1, 0, 0, 0, 1173, 1174,
		1, 0, 0, 0, 1174, 1176, 1, 0, 0, 0, 1175, 1173, 1, 0, 0, 0, 1176, 1178,
		3, 310, 155, 0, 1177, 1173, 1, 0, 0, 0, 1177, 1178, 1, 0, 0, 0, 1178, 1186,
		1, 0, 0, 0, 1179, 1181, 5, 89, 0, 0, 1180, 1179, 1, 0, 0, 0, 1181, 1184,
		1, 0, 0, 0, 1182, 1180, 1, 0, 0, 0, 1182, 1183, 1, 0, 0, 0, 1183, 1185,
		1, 0, 0, 0, 1184, 1182, 1, 0, 0, 0, 1185, 1187, 3, 134, 67, 0, 1186, 1182,
		1, 0, 0, 0, 1186, 1187, 1, 0, 0, 0, 1187, 133, 1, 0, 0, 0, 1188, 1192,
		5, 31, 0, 0, 1189, 1190, 3, 330, 165, 0, 1190, 1191, 5, 89, 0, 0, 1191,
		1193, 1, 0, 0, 0, 1192, 1189, 1, 0, 0, 0, 1192, 1193, 1, 0, 0, 0, 1193,
		1201, 1, 0, 0, 0, 1194, 1196, 5, 89, 0, 0, 1195, 1194, 1, 0, 0, 0, 1196,
		1199, 1, 0, 0, 0, 1197, 1195, 1, 0, 0, 0, 1197, 1198, 1, 0, 0, 0, 1198,
		1200, 1, 0, 0, 0, 1199, 1197, 1, 0, 0, 0, 1200, 1202, 3, 136, 68, 0, 1201,
		1197, 1, 0, 0, 0, 1201, 1202, 1, 0, 0, 0, 1202, 1206, 1, 0, 0, 0, 1203,
		1205, 5, 89, 0, 0, 1204, 1203, 1, 0, 0, 0, 1205, 1208, 1, 0, 0, 0, 1206,
		1204, 1, 0, 0, 0, 1206, 1207, 1, 0, 0, 0, 1207, 1209, 1, 0, 0, 0, 1208,
		1206, 1, 0, 0, 0, 1209, 1210, 5, 34, 0, 0, 1210, 135, 1, 0, 0, 0, 1211,
		1223, 3, 138, 69, 0, 1212, 1216, 3, 376, 188, 0, 1213, 1215, 5, 89, 0,
		0, 1214, 1213, 1, 0, 0, 0, 1215, 1218, 1, 0, 0, 0, 1216, 1214, 1, 0, 0,
		0, 1216, 1217, 1, 0, 0, 0, 1217, 1219, 1, 0, 0, 0, 1218, 1216, 1, 0, 0,
		0, 1219, 1220, 3, 138, 69, 0, 1220, 1222, 1, 0, 0, 0, 1221, 1212, 1, 0,
		0, 0, 1222, 1225, 1, 0, 0, 0, 1223, 1221, 1, 0, 0, 0, 1223, 1224, 1, 0,
		0, 0, 1224, 1227, 1, 0, 0, 0, 1225, 1223, 1, 0, 0, 0, 1226, 1228, 3, 376,
		188, 0, 1227, 1226, 1, 0, 0, 0, 1227, 1228, 1, 0, 0, 0, 1228, 137, 1, 0,
		0, 0, 1229, 1230, 3, 328, 164, 0, 1230, 1231, 5, 89, 0, 0, 1231, 1233,
		1, 0, 0, 0, 1232, 1229, 1, 0, 0, 0, 1232, 1233, 1, 0, 0, 0, 1233, 1237,
		1, 0, 0, 0, 1234, 1235, 3, 190, 95, 0, 1235, 1236, 5, 89, 0, 0, 1236, 1238,
		1, 0, 0, 0, 1237, 1234, 1, 0, 0, 0, 1237, 1238, 1, 0, 0, 0, 1238, 1244,
		1, 0, 0, 0, 1239, 1245, 3, 128, 64, 0, 1240, 1245, 3, 118, 59, 0, 1241,
		1245, 3, 84, 42, 0, 1242, 1245, 3, 96, 48, 0, 1243, 1245, 3, 140, 70, 0,
		1244, 1239, 1, 0, 0, 0, 1244, 1240, 1, 0, 0, 0, 1244, 1241, 1, 0, 0, 0,
		1244, 1242, 1, 0, 0, 0, 1244, 1243, 1, 0, 0, 0, 1245, 1248, 1, 0, 0, 0,
		1246, 1248, 3, 4, 2, 0, 1247, 1232, 1, 0, 0, 0, 1247, 1246, 1, 0, 0, 0,
		1248, 139, 1, 0, 0, 0, 1249, 1250, 3, 316, 158, 0, 1250, 1258, 3, 288,
		144, 0, 1251, 1253, 5, 89, 0, 0, 1252, 1251, 1, 0, 0, 0, 1253, 1256, 1,
		0, 0, 0, 1254, 1252, 1, 0, 0, 0, 1254, 1255, 1, 0, 0, 0, 1255, 1257, 1,
		0, 0, 0, 1256, 1254, 1, 0, 0, 0, 1257, 1259, 3, 92, 46, 0, 1258, 1254,
		1, 0, 0, 0, 1258, 1259, 1, 0, 0, 0, 1259, 141, 1, 0, 0, 0, 1260, 1261,
		5, 15, 0, 0, 1261, 1263, 3, 144, 72, 0, 1262, 1264, 3, 40, 20, 0, 1263,
		1262, 1, 0, 0, 0, 1263, 1264, 1, 0, 0, 0, 1264, 1265, 1, 0, 0, 0, 1265,
		1266, 3, 146, 73, 0, 1266, 143, 1, 0, 0, 0, 1267, 1268, 3, 294, 147, 0,
		1268, 145, 1, 0, 0, 0, 1269, 1271, 5, 89, 0, 0, 1270, 1269, 1, 0, 0, 0,
		1271, 1274, 1, 0, 0, 0, 1272, 1270, 1, 0, 0, 0, 1272, 1273, 1, 0, 0, 0,
		1273, 1275, 1, 0, 0, 0, 1274, 1272, 1, 0, 0, 0, 1275, 1277, 3, 310, 155,
		0, 1276, 1272, 1, 0, 0, 0, 1276, 1277, 1, 0, 0, 0, 1277, 1281, 1, 0, 0,
		0, 1278, 1280, 5, 89, 0, 0, 1279, 1278, 1, 0, 0, 0, 1280, 1283, 1, 0, 0,
		0, 1281, 1279, 1, 0, 0, 0, 1281, 1282, 1, 0, 0, 0, 1282, 1284, 1, 0, 0,
		0, 1283, 1281, 1, 0, 0, 0, 1284, 1285, 3, 148, 74, 0, 1285, 147, 1, 0,
		0, 0, 1286, 1288, 5, 31, 0, 0, 1287, 1289, 3, 330, 165, 0, 1288, 1287,
		1, 0, 0, 0, 1288, 1289, 1, 0, 0, 0, 1289, 1297, 1, 0, 0, 0, 1290, 1292,
		5, 89, 0, 0, 1291, 1290, 1, 0, 0, 0, 1292, 1295, 1, 0, 0, 0, 1293, 1291,
		1, 0, 0, 0, 1293, 1294, 1, 0, 0, 0, 1294, 1296, 1, 0, 0, 0, 1295, 1293,
		1, 0, 0, 0, 1296, 1298, 3, 150, 75, 0, 1297, 1293, 1, 0, 0, 0, 1297, 1298,
		1, 0, 0, 0, 1298, 1302, 1, 0, 0, 0, 1299, 1301, 5, 89, 0, 0, 1300, 1299,
		1, 0, 0, 0, 1301, 1304, 1, 0, 0, 0, 1302, 1300, 1, 0, 0, 0, 1302, 1303,
		1, 0, 0, 0, 1303, 1305, 1, 0, 0, 0, 1304, 1302, 1, 0, 0, 0, 1305, 1306,
		5, 34, 0, 0, 1306, 149, 1, 0, 0, 0, 1307, 1319, 3, 152, 76, 0, 1308, 1312,
		3, 376, 188, 0, 1309, 1311, 5, 89, 0, 0, 1310, 1309, 1, 0, 0, 0, 1311,
		1314, 1, 0, 0, 0, 1312, 1310, 1, 0, 0, 0, 1312, 1313, 1, 0, 0, 0, 1313,
		1315, 1, 0, 0, 0, 1314, 1312, 1, 0, 0, 0, 1315, 1316, 3, 152, 76, 0, 1316,
		1318, 1, 0, 0, 0, 1317, 1308, 1, 0, 0, 0, 1318, 1321, 1, 0, 0, 0, 1319,
		1317, 1, 0, 0, 0, 1319, 1320, 1, 0, 0, 0, 1320, 1323, 1, 0, 0, 0, 1321,
		1319, 1, 0, 0, 0, 1322, 1324, 3, 376, 188, 0, 1323, 1322, 1, 0, 0, 0, 1323,
		1324, 1, 0, 0, 0, 1324, 151, 1, 0, 0, 0, 1325, 1326, 3, 328, 164, 0, 1326,
		1327, 5, 89, 0, 0, 1327, 1329, 1, 0, 0, 0, 1328, 1325, 1, 0, 0, 0, 1328,
		1329, 1, 0, 0, 0, 1329, 1333, 1, 0, 0, 0, 1330, 1331, 3, 190, 95, 0, 1331,
		1332, 5, 89, 0, 0, 1332, 1334, 1, 0, 0, 0, 1333, 1330, 1, 0, 0, 0, 1333,
		1334, 1, 0, 0, 0, 1334, 1337, 1, 0, 0, 0, 1335, 1338, 3, 96, 48, 0, 1336,
		1338, 3, 154, 77, 0, 1337, 1335, 1, 0, 0, 0, 1337, 1336, 1, 0, 0, 0, 1338,
		1341, 1, 0, 0, 0, 1339, 1341, 3, 4, 2, 0, 1340, 1328, 1, 0, 0, 0, 1340,
		1339, 1, 0, 0, 0, 1341, 153, 1, 0, 0, 0, 1342, 1344, 3, 104, 52, 0, 1343,
		1345, 3, 40, 20, 0, 1344, 1343, 1, 0, 0, 0, 1344, 1345, 1, 0, 0, 0, 1345,
		1349, 1, 0, 0, 0, 1346, 1348, 5, 89, 0, 0, 1347, 1346, 1, 0, 0, 0, 1348,
		1351, 1, 0, 0, 0, 1349, 1347, 1, 0, 0, 0, 1349, 1350, 1, 0, 0, 0, 1350,
		1352, 1, 0, 0, 0, 1351, 1349, 1, 0, 0, 0, 1352, 1353, 3, 106, 53, 0, 1353,
		155, 1, 0, 0, 0, 1354, 1355, 5, 3, 0, 0, 1355, 1357, 3, 182, 91, 0, 1356,
		1358, 3, 40, 20, 0, 1357, 1356, 1, 0, 0, 0, 1357, 1358, 1, 0, 0, 0, 1358,
		1373, 1, 0, 0, 0, 1359, 1374, 3, 134, 67, 0, 1360, 1368, 3, 288, 144, 0,
		1361, 1363, 5, 89, 0, 0, 1362, 1361, 1, 0, 0, 0, 1363, 1366, 1, 0, 0, 0,
		1364, 1362, 1, 0, 0, 0, 1364, 1365, 1, 0, 0, 0, 1365, 1367, 1, 0, 0, 0,
		1366, 1364, 1, 0, 0, 0, 1367, 1369, 3, 92, 46, 0, 1368, 1364, 1, 0, 0,
		0, 1368, 1369, 1, 0, 0, 0, 1369, 1371, 1, 0, 0, 0, 1370, 1372, 3, 330,
		165, 0, 1371, 1370, 1, 0, 0, 0, 1371, 1372, 1, 0, 0, 0, 1372, 1374, 1,
		0, 0, 0, 1373, 1359, 1, 0, 0, 0, 1373, 1360, 1, 0, 0, 0, 1374, 157, 1,
		0, 0, 0, 1375, 1376, 5, 3, 0, 0, 1376, 1378, 3, 182, 91, 0, 1377, 1379,
		3, 40, 20, 0, 1378, 1377, 1, 0, 0, 0, 1378, 1379, 1, 0, 0, 0, 1379, 1383,
		1, 0, 0, 0, 1380, 1382, 5, 89, 0, 0, 1381, 1380, 1, 0, 0, 0, 1382, 1385,
		1, 0, 0, 0, 1383, 1381, 1, 0, 0, 0, 1383, 1384, 1, 0, 0, 0, 1384, 1386,
		1, 0, 0, 0, 1385, 1383, 1, 0, 0, 0, 1386, 1387, 3, 160, 80, 0, 1387, 159,
		1, 0, 0, 0, 1388, 1392, 3, 332, 166, 0, 1389, 1391, 5, 89, 0, 0, 1390,
		1389, 1, 0, 0, 0, 1391, 1394, 1, 0, 0, 0, 1392, 1390, 1, 0, 0, 0, 1392,
		1393, 1, 0, 0, 0, 1393, 1398, 1, 0, 0, 0, 1394, 1392, 1, 0, 0, 0, 1395,
		1396, 3, 58, 29, 0, 1396, 1397, 5, 30, 0, 0, 1397, 1399, 1, 0, 0, 0, 1398,
		1395, 1, 0, 0, 0, 1398, 1399, 1, 0, 0, 0, 1399, 1400, 1, 0, 0, 0, 1400,
		1402, 3, 182, 91, 0, 1401, 1403, 3, 46, 23, 0, 1402, 1401, 1, 0, 0, 0,
		1402, 1403, 1, 0, 0, 0, 1403, 1405, 1, 0, 0, 0, 1404, 1406, 3, 330, 165,
		0, 1405, 1404, 1, 0, 0, 0, 1405, 1406, 1, 0, 0, 0, 1406, 161, 1, 0, 0,
		0, 1407, 1408, 6, 81, -1, 0, 1408, 1410, 3, 164, 82, 0, 1409, 1411, 3,
		288, 144, 0, 1410, 1409, 1, 0, 0, 0, 1410, 1411, 1, 0, 0, 0, 1411, 1425,
		1, 0, 0, 0, 1412, 1414, 3, 166, 83, 0, 1413, 1415, 3, 288, 144, 0, 1414,
		1413, 1, 0, 0, 0, 1414, 1415, 1, 0, 0, 0, 1415, 1425, 1, 0, 0, 0, 1416,
		1418, 3, 168, 84, 0, 1417, 1419, 3, 288, 144, 0, 1418, 1417, 1, 0, 0, 0,
		1418, 1419, 1, 0, 0, 0, 1419, 1425, 1, 0, 0, 0, 1420, 1425, 3, 174, 87,
		0, 1421, 1422, 5, 16, 0, 0, 1422, 1425, 3, 282, 141, 0, 1423, 1425, 3,
		176, 88, 0, 1424, 1407, 1, 0, 0, 0, 1424, 1412, 1, 0, 0, 0, 1424, 1416,
		1, 0, 0, 0, 1424, 1420, 1, 0, 0, 0, 1424, 1421, 1, 0, 0, 0, 1424, 1423,
		1, 0, 0, 0, 1425, 1431, 1, 0, 0, 0, 1426, 1427, 10, 2, 0, 0, 1427, 1428,
		5, 2, 0, 0, 1428, 1430, 3, 282, 141, 0, 1429, 1426, 1, 0, 0, 0, 1430, 1433,
		1, 0, 0, 0, 1431, 1429, 1, 0, 0, 0, 1431, 1432, 1, 0, 0, 0, 1432, 163,
		1, 0, 0, 0, 1433, 1431, 1, 0, 0, 0, 1434, 1435, 5, 57, 0, 0, 1435, 165,
		1, 0, 0, 0, 1436, 1437, 3, 316, 158, 0, 1437, 167, 1, 0, 0, 0, 1438, 1440,
		5, 32, 0, 0, 1439, 1441, 3, 170, 85, 0, 1440, 1439, 1, 0, 0, 0, 1440, 1441,
		1, 0, 0, 0, 1441, 1442, 1, 0, 0, 0, 1442, 1443, 5, 35, 0, 0, 1443, 169,
		1, 0, 0, 0, 1444, 1449, 3, 172, 86, 0, 1445, 1446, 5, 37, 0, 0, 1446, 1448,
		3, 172, 86, 0, 1447, 1445, 1, 0, 0, 0, 1448, 1451, 1, 0, 0, 0, 1449, 1447,
		1, 0, 0, 0, 1449, 1450, 1, 0, 0, 0, 1450, 171, 1, 0, 0, 0, 1451, 1449,
		1, 0, 0, 0, 1452, 1453, 3, 162, 81, 0, 1453, 173, 1, 0, 0, 0, 1454, 1455,
		3, 166, 83, 0, 1455, 1456, 5, 43, 0, 0, 1456, 175, 1, 0, 0, 0, 1457, 1458,
		3, 192, 96, 0, 1458, 177, 1, 0, 0, 0, 1459, 1460, 5, 44, 0, 0, 1460, 1470,
		5, 79, 0, 0, 1461, 1462, 5, 44, 0, 0, 1462, 1464, 3, 180, 90, 0, 1463,
		1465, 3, 46, 23, 0, 1464, 1463, 1, 0, 0, 0, 1464, 1465, 1, 0, 0, 0, 1465,
		1467, 1, 0, 0, 0, 1466, 1468, 3, 184, 92, 0, 1467, 1466, 1, 0, 0, 0, 1467,
		1468, 1, 0, 0, 0, 1468, 1470, 1, 0, 0, 0, 1469, 1459, 1, 0, 0, 0, 1469,
		1461, 1, 0, 0, 0, 1470, 179, 1, 0, 0, 0, 1471, 1472, 3, 58, 29, 0, 1472,
		1473, 5, 30, 0, 0, 1473, 1475, 1, 0, 0, 0, 1474, 1471, 1, 0, 0, 0, 1474,
		1475, 1, 0, 0, 0, 1475, 1476, 1, 0, 0, 0, 1476, 1477, 3, 182, 91, 0, 1477,
		181, 1, 0, 0, 0, 1478, 1479, 3, 318, 159, 0, 1479, 183, 1, 0, 0, 0, 1480,
		1488, 5, 32, 0, 0, 1481, 1483, 5, 89, 0, 0, 1482, 1481, 1, 0, 0, 0, 1483,
		1486, 1, 0, 0, 0, 1484, 1482, 1, 0, 0, 0, 1484, 1485, 1, 0, 0, 0, 1485,
		1487, 1, 0, 0, 0, 1486, 1484, 1, 0, 0, 0, 1487, 1489, 3, 188, 94, 0, 1488,
		1484, 1, 0, 0, 0, 1488, 1489, 1, 0, 0, 0, 1489, 1493, 1, 0, 0, 0, 1490,
		1492, 5, 89, 0, 0, 1491, 1490, 1, 0, 0, 0, 1492, 1495, 1, 0, 0, 0, 1493,
		1491, 1, 0, 0, 0, 1493, 1494, 1, 0, 0, 0, 1494, 1496, 1, 0, 0, 0, 1495,
		1493, 1, 0, 0, 0, 1496, 1497, 5, 35, 0, 0, 1497, 185, 1, 0, 0, 0, 1498,
		1500, 3, 318, 159, 0, 1499, 1501, 5, 38, 0, 0, 1500, 1499, 1, 0, 0, 0,
		1500, 1501, 1, 0, 0, 0, 1501, 1503, 1, 0, 0, 0, 1502, 1498, 1, 0, 0, 0,
		1502, 1503, 1, 0, 0, 0, 1503, 1504, 1, 0, 0, 0, 1504, 1505, 3, 192, 96,
		0, 1505, 187, 1, 0, 0, 0, 1506, 1518, 3, 186, 93, 0, 1507, 1511, 3, 374,
		187, 0, 1508, 1510, 5, 89, 0, 0, 1509, 1508, 1, 0, 0, 0, 1510, 1513, 1,
		0, 0, 0, 1511, 1509, 1, 0, 0, 0, 1511, 1512, 1, 0, 0, 0, 1512, 1514, 1,
		0, 0, 0, 1513, 1511, 1, 0, 0, 0, 1514, 1515, 3, 186, 93, 0, 1515, 1517,
		1, 0, 0, 0, 1516, 1507, 1, 0, 0, 0, 1517, 1520, 1, 0, 0, 0, 1518, 1516,
		1, 0, 0, 0, 1518, 1519, 1, 0, 0, 0, 1519, 1522, 1, 0, 0, 0, 1520, 1518,
		1, 0, 0, 0, 1521, 1523, 3, 374, 187, 0, 1522, 1521, 1, 0, 0, 0, 1522, 1523,
		1, 0, 0, 0, 1523, 189, 1, 0, 0, 0, 1524, 1531, 3, 178, 89, 0, 1525, 1527,
		5, 89, 0, 0, 1526, 1525, 1, 0, 0, 0, 1526, 1527, 1, 0, 0, 0, 1527, 1528,
		1, 0, 0, 0, 1528, 1530, 3, 178, 89, 0, 1529, 1526, 1, 0, 0, 0, 1530, 1533,
		1, 0, 0, 0, 1531, 1529, 1, 0, 0, 0, 1531, 1532, 1, 0, 0, 0, 1532, 191,
		1, 0, 0, 0, 1533, 1531, 1, 0, 0, 0, 1534, 1536, 3, 196, 98, 0, 1535, 1537,
		3, 200, 100, 0, 1536, 1535, 1, 0, 0, 0, 1536, 1537, 1, 0, 0, 0, 1537, 193,
		1, 0, 0, 0, 1538, 1550, 3, 192, 96, 0, 1539, 1543, 3, 374, 187, 0, 1540,
		1542, 5, 89, 0, 0, 1541, 1540, 1, 0, 0, 0, 1542, 1545, 1, 0, 0, 0, 1543,
		1541, 1, 0, 0, 0, 1543, 1544, 1, 0, 0, 0, 1544, 1546, 1, 0, 0, 0, 1545,
		1543, 1, 0, 0, 0, 1546, 1547, 3, 192, 96, 0, 1547, 1549, 1, 0, 0, 0, 1548,
		1539, 1, 0, 0, 0, 1549, 1552, 1, 0, 0, 0, 1550, 1548, 1, 0, 0, 0, 1550,
		1551, 1, 0, 0, 0, 1551, 1554, 1, 0, 0, 0, 1552, 1550, 1, 0, 0, 0, 1553,
		1555, 3, 374, 187, 0, 1554, 1553, 1, 0, 0, 0, 1554, 1555, 1, 0, 0, 0, 1555,
		195, 1, 0, 0, 0, 1556, 1557, 3, 344, 172, 0, 1557, 1558, 3, 256, 128, 0,
		1558, 1561, 1, 0, 0, 0, 1559, 1561, 3, 256, 128, 0, 1560, 1556, 1, 0, 0,
		0, 1560, 1559, 1, 0, 0, 0, 1561, 197, 1, 0, 0, 0, 1562, 1563, 3, 342, 171,
		0, 1563, 1564, 3, 196, 98, 0, 1564, 1573, 1, 0, 0, 0, 1565, 1566, 3, 332,
		166, 0, 1566, 1567, 3, 196, 98, 0, 1567, 1573, 1, 0, 0, 0, 1568, 1569,
		3, 202, 101, 0, 1569, 1570, 3, 196, 98, 0, 1570, 1573, 1, 0, 0, 0, 1571,
		1573, 3, 204, 102, 0, 1572, 1562, 1, 0, 0, 0, 1572, 1565, 1, 0, 0, 0, 1572,
		1568, 1, 0, 0, 0, 1572, 1571, 1, 0, 0, 0, 1573, 199, 1, 0, 0, 0, 1574,
		1576, 3, 198, 99, 0, 1575, 1574, 1, 0, 0, 0, 1576, 1577, 1, 0, 0, 0, 1577,
		1575, 1, 0, 0, 0, 1577, 1578, 1, 0, 0, 0, 1578, 201, 1, 0, 0, 0, 1579,
		1580, 5, 43, 0, 0, 1580, 1581, 3, 192, 96, 0, 1581, 1582, 5, 38, 0, 0,
		1582, 203, 1, 0, 0, 0, 1583, 1584, 5, 16, 0, 0, 1584, 1588, 3, 282, 141,
		0, 1585, 1586, 5, 2, 0, 0, 1586, 1588, 3, 282, 141, 0, 1587, 1583, 1, 0,
		0, 0, 1587, 1585, 1, 0, 0, 0, 1588, 205, 1, 0, 0, 0, 1589, 1607, 3, 208,
		104, 0, 1590, 1592, 3, 316, 158, 0, 1591, 1593, 3, 46, 23, 0, 1592, 1591,
		1, 0, 0, 0, 1592, 1593, 1, 0, 0, 0, 1593, 1607, 1, 0, 0, 0, 1594, 1595,
		3, 290, 145, 0, 1595, 1596, 5, 30, 0, 0, 1596, 1598, 3, 316, 158, 0, 1597,
		1599, 3, 46, 23, 0, 1598, 1597, 1, 0, 0, 0, 1598, 1599, 1, 0, 0, 0, 1599,
		1607, 1, 0, 0, 0, 1600, 1607, 3, 240, 120, 0, 1601, 1607, 3, 248, 124,
		0, 1602, 1607, 3, 250, 125, 0, 1603, 1607, 3, 246, 123, 0, 1604, 1607,
		3, 254, 127, 0, 1605, 1607, 3, 238, 119, 0, 1606, 1589, 1, 0, 0, 0, 1606,
		1590, 1, 0, 0, 0, 1606, 1594, 1, 0, 0, 0, 1606, 1600, 1, 0, 0, 0, 1606,
		1601, 1, 0, 0, 0, 1606, 1602, 1, 0, 0, 0, 1606, 1603, 1, 0, 0, 0, 1606,
		1604, 1, 0, 0, 0, 1606, 1605, 1, 0, 0, 0, 1607, 207, 1, 0, 0, 0, 1608,
		1616, 3, 210, 105, 0, 1609, 1616, 3, 212, 106, 0, 1610, 1616, 3, 236, 118,
		0, 1611, 1616, 3, 360, 180, 0, 1612, 1616, 3, 218, 109, 0, 1613, 1616,
		3, 224, 112, 0, 1614, 1616, 3, 230, 115, 0, 1615, 1608, 1, 0, 0, 0, 1615,
		1609, 1, 0, 0, 0, 1615, 1610, 1, 0, 0, 0, 1615, 1611, 1, 0, 0, 0, 1615,
		1612, 1, 0, 0, 0, 1615, 1613, 1, 0, 0, 0, 1615, 1614, 1, 0, 0, 0, 1616,
		209, 1, 0, 0, 0, 1617, 1618, 3, 366, 183, 0, 1618, 1619, 3, 214, 107, 0,
		1619, 211, 1, 0, 0, 0, 1620, 1621, 3, 216, 108, 0, 1621, 1622, 3, 370,
		185, 0, 1622, 213, 1, 0, 0, 0, 1623, 1624, 7, 0, 0, 0, 1624, 215, 1, 0,
		0, 0, 1625, 1626, 5, 74, 0, 0, 1626, 217, 1, 0, 0, 0, 1627, 1635, 5, 33,
		0, 0, 1628, 1630, 5, 89, 0, 0, 1629, 1628, 1, 0, 0, 0, 1630, 1633, 1, 0,
		0, 0, 1631, 1629, 1, 0, 0, 0, 1631, 1632, 1, 0, 0, 0, 1632, 1634, 1, 0,
		0, 0, 1633, 1631, 1, 0, 0, 0, 1634, 1636, 3, 220, 110, 0, 1635, 1631, 1,
		0, 0, 0, 1635, 1636, 1, 0, 0, 0, 1636, 1640, 1, 0, 0, 0, 1637, 1639, 5,
		89, 0, 0, 1638, 1637, 1, 0, 0, 0, 1639, 1642, 1, 0, 0, 0, 1640, 1638, 1,
		0, 0, 0, 1640, 1641, 1, 0, 0, 0, 1641, 1643, 1, 0, 0, 0, 1642, 1640, 1,
		0, 0, 0, 1643, 1644, 5, 36, 0, 0, 1644, 219, 1, 0, 0, 0, 1645, 1657, 3,
		222, 111, 0, 1646, 1650, 3, 374, 187, 0, 1647, 1649, 5, 89, 0, 0, 1648,
		1647, 1, 0, 0, 0, 1649, 1652, 1, 0, 0, 0, 1650, 1648, 1, 0, 0, 0, 1650,
		1651, 1, 0, 0, 0, 1651, 1653, 1, 0, 0, 0, 1652, 1650, 1, 0, 0, 0, 1653,
		1654, 3, 222, 111, 0, 1654, 1656, 1, 0, 0, 0, 1655, 1646, 1, 0, 0, 0, 1656,
		1659, 1, 0, 0, 0, 1657, 1655, 1, 0, 0, 0, 1657, 1658, 1, 0, 0, 0, 1658,
		1661, 1, 0, 0, 0, 1659, 1657, 1, 0, 0, 0, 1660, 1662, 3, 374, 187, 0, 1661,
		1660, 1, 0, 0, 0, 1661, 1662, 1, 0, 0, 0, 1662, 221, 1, 0, 0, 0, 1663,
		1664, 3, 192, 96, 0, 1664, 223, 1, 0, 0, 0, 1665, 1673, 5, 31, 0, 0, 1666,
		1668, 5, 89, 0, 0, 1667, 1666, 1, 0, 0, 0, 1668, 1671, 1, 0, 0, 0, 1669,
		1667, 1, 0, 0, 0, 1669, 1670, 1, 0, 0, 0, 1670, 1672, 1, 0, 0, 0, 1671,
		1669, 1, 0, 0, 0, 1672, 1674, 3, 226, 113, 0, 1673, 1669, 1, 0, 0, 0, 1673,
		1674, 1, 0, 0, 0, 1674, 1678, 1, 0, 0, 0, 1675, 1677, 5, 89, 0, 0, 1676,
		1675, 1, 0, 0, 0, 1677, 1680, 1, 0, 0, 0, 1678, 1676, 1, 0, 0, 0, 1678,
		1679, 1, 0, 0, 0, 1679, 1681, 1, 0, 0, 0, 1680, 1678, 1, 0, 0, 0, 1681,
		1682, 5, 34, 0, 0, 1682, 225, 1, 0, 0, 0, 1683, 1695, 3, 228, 114, 0, 1684,
		1688, 3, 374, 187, 0, 1685, 1687, 5, 89, 0, 0, 1686, 1685, 1, 0, 0, 0,
		1687, 1690, 1, 0, 0, 0, 1688, 1686, 1, 0, 0, 0, 1688, 1689, 1, 0, 0, 0,
		1689, 1691, 1, 0, 0, 0, 1690, 1688, 1, 0, 0, 0, 1691, 1692, 3, 228, 114,
		0, 1692, 1694, 1, 0, 0, 0, 1693, 1684, 1, 0, 0, 0, 1694, 1697, 1, 0, 0,
		0, 1695, 1693, 1, 0, 0, 0, 1695, 1696, 1, 0, 0, 0, 1696, 1699, 1, 0, 0,
		0, 1697, 1695, 1, 0, 0, 0, 1698, 1700, 3, 374, 187, 0, 1699, 1698, 1, 0,
		0, 0, 1699, 1700, 1, 0, 0, 0, 1700, 227, 1, 0, 0, 0, 1701, 1704, 3, 370,
		185, 0, 1702, 1704, 3, 368, 184, 0, 1703, 1701, 1, 0, 0, 0, 1703, 1702,
		1, 0, 0, 0, 1704, 1705, 1, 0, 0, 0, 1705, 1706, 5, 38, 0, 0, 1706, 1707,
		3, 192, 96, 0, 1707, 229, 1, 0, 0, 0, 1708, 1716, 5, 31, 0, 0, 1709, 1711,
		5, 89, 0, 0, 1710, 1709, 1, 0, 0, 0, 1711, 1714, 1, 0, 0, 0, 1712, 1710,
		1, 0, 0, 0, 1712, 1713, 1, 0, 0, 0, 1713, 1715, 1, 0, 0, 0, 1714, 1712,
		1, 0, 0, 0, 1715, 1717, 3, 232, 116, 0, 1716, 1712, 1, 0, 0, 0, 1716, 1717,
		1, 0, 0, 0, 1717, 1721, 1, 0, 0, 0, 1718, 1720, 5, 89, 0, 0, 1719, 1718,
		1, 0, 0, 0, 1720, 1723, 1, 0, 0, 0, 1721, 1719, 1, 0, 0, 0, 1721, 1722,
		1, 0, 0, 0, 1722, 1724, 1, 0, 0, 0, 1723, 1721, 1, 0, 0, 0, 1724, 1725,
		5, 34, 0, 0, 1725, 231, 1, 0, 0, 0, 1726, 1738, 3, 234, 117, 0, 1727, 1731,
		3, 374, 187, 0, 1728, 1730, 5, 89, 0, 0, 1729, 1728, 1, 0, 0, 0, 1730,
		1733, 1, 0, 0, 0, 1731, 1729, 1, 0, 0, 0, 1731, 1732, 1, 0, 0, 0, 1732,
		1734, 1, 0, 0, 0, 1733, 1731, 1, 0, 0, 0, 1734, 1735, 3, 234, 117, 0, 1735,
		1737, 1, 0, 0, 0, 1736, 1727, 1, 0, 0, 0, 1737, 1740, 1, 0, 0, 0, 1738,
		1736, 1, 0, 0, 0, 1738, 1739, 1, 0, 0, 0, 1739, 1742, 1, 0, 0, 0, 1740,
		1738, 1, 0, 0, 0, 1741, 1743, 3, 374, 187, 0, 1742, 1741, 1, 0, 0, 0, 1742,
		1743, 1, 0, 0, 0, 1743, 233, 1, 0, 0, 0, 1744, 1747, 3, 320, 160, 0, 1745,
		1746, 5, 38, 0, 0, 1746, 1748, 3, 192, 96, 0, 1747, 1745, 1, 0, 0, 0, 1747,
		1748, 1, 0, 0, 0, 1748, 235, 1, 0, 0, 0, 1749, 1750, 3, 290, 145, 0, 1750,
		1751, 3, 230, 115, 0, 1751, 237, 1, 0, 0, 0, 1752, 1753, 3, 290, 145, 0,
		1753, 1754, 3, 264, 132, 0, 1754, 239, 1, 0, 0, 0, 1755, 1756, 5, 31, 0,
		0, 1756, 1757, 3, 6, 3, 0, 1757, 1758, 5, 34, 0, 0, 1758, 1787, 1, 0, 0,
		0, 1759, 1760, 5, 31, 0, 0, 1760, 1764, 3, 242, 121, 0, 1761, 1763, 5,
		89, 0, 0, 1762, 1761, 1, 0, 0, 0, 1763, 1766, 1, 0, 0, 0, 1764, 1762, 1,
		0, 0, 0, 1764, 1765, 1, 0, 0, 0, 1765, 1767, 1, 0, 0, 0, 1766, 1764, 1,
		0, 0, 0, 1767, 1775, 5, 62, 0, 0, 1768, 1770, 5, 89, 0, 0, 1769, 1768,
		1, 0, 0, 0, 1770, 1773, 1, 0, 0, 0, 1771, 1769, 1, 0, 0, 0, 1771, 1772,
		1, 0, 0, 0, 1772, 1774, 1, 0, 0, 0, 1773, 1771, 1, 0, 0, 0, 1774, 1776,
		3, 282, 141, 0, 1775, 1771, 1, 0, 0, 0, 1775, 1776, 1, 0, 0, 0, 1776, 1780,
		1, 0, 0, 0, 1777, 1779, 5, 89, 0, 0, 1778, 1777, 1, 0, 0, 0, 1779, 1782,
		1, 0, 0, 0, 1780, 1778, 1, 0, 0, 0, 1780, 1781, 1, 0, 0, 0, 1781, 1783,
		1, 0, 0, 0, 1782, 1780, 1, 0, 0, 0, 1783, 1784, 3, 6, 3, 0, 1784, 1785,
		5, 34, 0, 0, 1785, 1787, 1, 0, 0, 0, 1786, 1755, 1, 0, 0, 0, 1786, 1759,
		1, 0, 0, 0, 1787, 241, 1, 0, 0, 0, 1788, 1800, 3, 244, 122, 0, 1789, 1793,
		3, 374, 187, 0, 1790, 1792, 5, 89, 0, 0, 1791, 1790, 1, 0, 0, 0, 1792,
		1795, 1, 0, 0, 0, 1793, 1791, 1, 0, 0, 0, 1793, 1794, 1, 0, 0, 0, 1794,
		1796, 1, 0, 0, 0, 1795, 1793, 1, 0, 0, 0, 1796, 1797, 3, 244, 122, 0, 1797,
		1799, 1, 0, 0, 0, 1798, 1789, 1, 0, 0, 0, 1799, 1802, 1, 0, 0, 0, 1800,
		1798, 1, 0, 0, 0, 1800, 1801, 1, 0, 0, 0, 1801, 1804, 1, 0, 0, 0, 1802,
		1800, 1, 0, 0, 0, 1803, 1805, 3, 374, 187, 0, 1804, 1803, 1, 0, 0, 0, 1804,
		1805, 1, 0, 0, 0, 1805, 243, 1, 0, 0, 0, 1806, 1809, 3, 116, 58, 0, 1807,
		1809, 3, 318, 159, 0, 1808, 1806, 1, 0, 0, 0, 1808, 1807, 1, 0, 0, 0, 1809,
		245, 1, 0, 0, 0, 1810, 1811, 5, 30, 0, 0, 1811, 1812, 3, 318, 159, 0, 1812,
		247, 1, 0, 0, 0, 1813, 1817, 5, 32, 0, 0, 1814, 1816, 5, 89, 0, 0, 1815,
		1814, 1, 0, 0, 0, 1816, 1819, 1, 0, 0, 0, 1817, 1815, 1, 0, 0, 0, 1817,
		1818, 1, 0, 0, 0, 1818, 1820, 1, 0, 0, 0, 1819, 1817, 1, 0, 0, 0, 1820,
		1824, 3, 192, 96, 0, 1821, 1823, 5, 89, 0, 0, 1822, 1821, 1, 0, 0, 0, 1823,
		1826, 1, 0, 0, 0, 1824, 1822, 1, 0, 0, 0, 1824, 1825, 1, 0, 0, 0, 1825,
		1827, 1, 0, 0, 0, 1826, 1824, 1, 0, 0, 0, 1827, 1828, 5, 35, 0, 0, 1828,
		249, 1, 0, 0, 0, 1829, 1830, 5, 32, 0, 0, 1830, 1842, 5, 35, 0, 0, 1831,
		1832, 5, 32, 0, 0, 1832, 1835, 3, 252, 126, 0, 1833, 1834, 5, 37, 0, 0,
		1834, 1836, 3, 252, 126, 0, 1835, 1833, 1, 0, 0, 0, 1836, 1837, 1, 0, 0,
		0, 1837, 1835, 1, 0, 0, 0, 1837, 1838, 1, 0, 0, 0, 1838, 1839, 1, 0, 0,
		0, 1839, 1840, 5, 35, 0, 0, 1840, 1842, 1, 0, 0, 0, 1841, 1829, 1, 0, 0,
		0, 1841, 1831, 1, 0, 0, 0, 1842, 251, 1, 0, 0, 0, 1843, 1851, 3, 192, 96,
		0, 1844, 1846, 3, 318, 159, 0, 1845, 1847, 5, 38, 0, 0, 1846, 1845, 1,
		0, 0, 0, 1846, 1847, 1, 0, 0, 0, 1847, 1848, 1, 0, 0, 0, 1848, 1849, 3,
		192, 96, 0, 1849, 1851, 1, 0, 0, 0, 1850, 1843, 1, 0, 0, 0, 1850, 1844,
		1, 0, 0, 0, 1851, 253, 1, 0, 0, 0, 1852, 1853, 5, 57, 0, 0, 1853, 255,
		1, 0, 0, 0, 1854, 1858, 3, 206, 103, 0, 1855, 1857, 3, 258, 129, 0, 1856,
		1855, 1, 0, 0, 0, 1857, 1860, 1, 0, 0, 0, 1858, 1856, 1, 0, 0, 0, 1858,
		1859, 1, 0, 0, 0, 1859, 1862, 1, 0, 0, 0, 1860, 1858, 1, 0, 0, 0, 1861,
		1863, 3, 346, 173, 0, 1862, 1861, 1, 0, 0, 0, 1862, 1863, 1, 0, 0, 0, 1863,
		257, 1, 0, 0, 0, 1864, 1868, 3, 264, 132, 0, 1865, 1868, 3, 260, 130, 0,
		1866, 1868, 3, 262, 131, 0, 1867, 1864, 1, 0, 0, 0, 1867, 1865, 1, 0, 0,
		0, 1867, 1866, 1, 0, 0, 0, 1868, 259, 1, 0, 0, 0, 1869, 1879, 5, 30, 0,
		0, 1870, 1880, 5, 80, 0, 0, 1871, 1877, 3, 322, 161, 0, 1872, 1878, 3,
		46, 23, 0, 1873, 1874, 5, 32, 0, 0, 1874, 1875, 3, 278, 139, 0, 1875, 1876,
		5, 35, 0, 0, 1876, 1878, 1, 0, 0, 0, 1877, 1872, 1, 0, 0, 0, 1877, 1873,
		1, 0, 0, 0, 1877, 1878, 1, 0, 0, 0, 1878, 1880, 1, 0, 0, 0, 1879, 1870,
		1, 0, 0, 0, 1879, 1871, 1, 0, 0, 0, 1880, 261, 1, 0, 0, 0, 1881, 1882,
		5, 33, 0, 0, 1882, 1883, 3, 268, 134, 0, 1883, 1884, 5, 36, 0, 0, 1884,
		263, 1, 0, 0, 0, 1885, 1887, 3, 266, 133, 0, 1886, 1885, 1, 0, 0, 0, 1886,
		1887, 1, 0, 0, 0, 1887, 1888, 1, 0, 0, 0, 1888, 1891, 3, 272, 136, 0, 1889,
		1891, 3, 266, 133, 0, 1890, 1886, 1, 0, 0, 0, 1890, 1889, 1, 0, 0, 0, 1891,
		265, 1, 0, 0, 0, 1892, 1893, 5, 32, 0, 0, 1893, 1899, 5, 35, 0, 0, 1894,
		1895, 5, 32, 0, 0, 1895, 1896, 3, 268, 134, 0, 1896, 1897, 5, 35, 0, 0,
		1897, 1899, 1, 0, 0, 0, 1898, 1892, 1, 0, 0, 0, 1898, 1894, 1, 0, 0, 0,
		1899, 267, 1, 0, 0, 0, 1900, 1905, 3, 270, 135, 0, 1901, 1902, 5, 37, 0,
		0, 1902, 1904, 3, 270, 135, 0, 1903, 1901, 1, 0, 0, 0, 1904, 1907, 1, 0,
		0, 0, 1905, 1903, 1, 0, 0, 0, 1905, 1906, 1, 0, 0, 0, 1906, 269, 1, 0,
		0, 0, 1907, 1905, 1, 0, 0, 0, 1908, 1923, 3, 192, 96, 0, 1909, 1911, 3,
		318, 159, 0, 1910, 1912, 5, 38, 0, 0, 1911, 1910, 1, 0, 0, 0, 1911, 1912,
		1, 0, 0, 0, 1912, 1913, 1, 0, 0, 0, 1913, 1914, 3, 192, 96, 0, 1914, 1923,
		1, 0, 0, 0, 1915, 1923, 3, 348, 174, 0, 1916, 1918, 3, 318, 159, 0, 1917,
		1919, 5, 38, 0, 0, 1918, 1917, 1, 0, 0, 0, 1918, 1919, 1, 0, 0, 0, 1919,
		1920, 1, 0, 0, 0, 1920, 1921, 3, 348, 174, 0, 1921, 1923, 1, 0, 0, 0, 1922,
		1908, 1, 0, 0, 0, 1922, 1909, 1, 0, 0, 0, 1922, 1915, 1, 0, 0, 0, 1922,
		1916, 1, 0, 0, 0, 1923, 271, 1, 0, 0, 0, 1924, 1926, 3, 240, 120, 0, 1925,
		1927, 3, 274, 137, 0, 1926, 1925, 1, 0, 0, 0, 1926, 1927, 1, 0, 0, 0, 1927,
		273, 1, 0, 0, 0, 1928, 1930, 3, 276, 138, 0, 1929, 1928, 1, 0, 0, 0, 1930,
		1931, 1, 0, 0, 0, 1931, 1929, 1, 0, 0, 0, 1931, 1932, 1, 0, 0, 0, 1932,
		275, 1, 0, 0, 0, 1933, 1934, 3, 322, 161, 0, 1934, 1935, 5, 38, 0, 0, 1935,
		1936, 3, 240, 120, 0, 1936, 277, 1, 0, 0, 0, 1937, 1941, 3, 280, 140, 0,
		1938, 1940, 3, 280, 140, 0, 1939, 1938, 1, 0, 0, 0, 1940, 1943, 1, 0, 0,
		0, 1941, 1939, 1, 0, 0, 0, 1941, 1942, 1, 0, 0, 0, 1942, 279, 1, 0, 0,
		0, 1943, 1941, 1, 0, 0, 0, 1944, 1945, 3, 318, 159, 0, 1945, 1946, 5, 38,
		0, 0, 1946, 281, 1, 0, 0, 0, 1947, 1948, 6, 141, -1, 0, 1948, 1951, 3,
		284, 142, 0, 1949, 1951, 3, 302, 151, 0, 1950, 1947, 1, 0, 0, 0, 1950,
		1949, 1, 0, 0, 0, 1951, 1960, 1, 0, 0, 0, 1952, 1953, 10, 3, 0, 0, 1953,
		1959, 5, 42, 0, 0, 1954, 1955, 10, 2, 0, 0, 1955, 1959, 5, 43, 0, 0, 1956,
		1957, 10, 1, 0, 0, 1957, 1959, 5, 65, 0, 0, 1958, 1952, 1, 0, 0, 0, 1958,
		1954, 1, 0, 0, 0, 1958, 1956, 1, 0, 0, 0, 1959, 1962, 1, 0, 0, 0, 1960,
		1958, 1, 0, 0, 0, 1960, 1961, 1, 0, 0, 0, 1961, 283, 1, 0, 0, 0, 1962,
		1960, 1, 0, 0, 0, 1963, 1964, 6, 142, -1, 0, 1964, 1965, 3, 286, 143, 0,
		1965, 2030, 1, 0, 0, 0, 1966, 1968, 10, 3, 0, 0, 1967, 1969, 3, 190, 95,
		0, 1968, 1967, 1, 0, 0, 0, 1968, 1969, 1, 0, 0, 0, 1969, 1973, 1, 0, 0,
		0, 1970, 1971, 3, 330, 165, 0, 1971, 1972, 5, 89, 0, 0, 1972, 1974, 1,
		0, 0, 0, 1973, 1970, 1, 0, 0, 0, 1973, 1974, 1, 0, 0, 0, 1974, 1978, 1,
		0, 0, 0, 1975, 1977, 5, 89, 0, 0, 1976, 1975, 1, 0, 0, 0, 1977, 1980, 1,
		0, 0, 0, 1978, 1976, 1, 0, 0, 0, 1978, 1979, 1, 0, 0, 0, 1979, 1981, 1,
		0, 0, 0, 1980, 1978, 1, 0, 0, 0, 1981, 1985, 5, 48, 0, 0, 1982, 1984, 5,
		89, 0, 0, 1983, 1982, 1, 0, 0, 0, 1984, 1987, 1, 0, 0, 0, 1985, 1983, 1,
		0, 0, 0, 1985, 1986, 1, 0, 0, 0, 1986, 1988, 1, 0, 0, 0, 1987, 1985, 1,
		0, 0, 0, 1988, 1990, 3, 284, 142, 0, 1989, 1991, 3, 190, 95, 0, 1990, 1989,
		1, 0, 0, 0, 1990, 1991, 1, 0, 0, 0, 1991, 1995, 1, 0, 0, 0, 1992, 1993,
		3, 330, 165, 0, 1993, 1994, 5, 89, 0, 0, 1994, 1996, 1, 0, 0, 0, 1995,
		1992, 1, 0, 0, 0, 1995, 1996, 1, 0, 0, 0, 1996, 2029, 1, 0, 0, 0, 1997,
		1999, 10, 2, 0, 0, 1998, 2000, 3, 190, 95, 0, 1999, 1998, 1, 0, 0, 0, 1999,
		2000, 1, 0, 0, 0, 2000, 2004, 1, 0, 0, 0, 2001, 2002, 3, 330, 165, 0, 2002,
		2003, 5, 89, 0, 0, 2003, 2005, 1, 0, 0, 0, 2004, 2001, 1, 0, 0, 0, 2004,
		2005, 1, 0, 0, 0, 2005, 2009, 1, 0, 0, 0, 2006, 2008, 5, 89, 0, 0, 2007,
		2006, 1, 0, 0, 0, 2008, 2011, 1, 0, 0, 0, 2009, 2007, 1, 0, 0, 0, 2009,
		2010, 1, 0, 0, 0, 2010, 2012, 1, 0, 0, 0, 2011, 2009, 1, 0, 0, 0, 2012,
		2016, 5, 45, 0, 0, 2013, 2015, 5, 89, 0, 0, 2014, 2013, 1, 0, 0, 0, 2015,
		2018, 1, 0, 0, 0, 2016, 2014, 1, 0, 0, 0, 2016, 2017, 1, 0, 0, 0, 2017,
		2019, 1, 0, 0, 0, 2018, 2016, 1, 0, 0, 0, 2019, 2021, 3, 284, 142, 0, 2020,
		2022, 3, 190, 95, 0, 2021, 2020, 1, 0, 0, 0, 2021, 2022, 1, 0, 0, 0, 2022,
		2026, 1, 0, 0, 0, 2023, 2024, 3, 330, 165, 0, 2024, 2025, 5, 89, 0, 0,
		2025, 2027, 1, 0, 0, 0, 2026, 2023, 1, 0, 0, 0, 2026, 2027, 1, 0, 0, 0,
		2027, 2029, 1, 0, 0, 0, 2028, 1966, 1, 0, 0, 0, 2028, 1997, 1, 0, 0, 0,
		2029, 2032, 1, 0, 0, 0, 2030, 2028, 1, 0, 0, 0, 2030, 2031, 1, 0, 0, 0,
		2031, 285, 1, 0, 0, 0, 2032, 2030, 1, 0, 0, 0, 2033, 2038, 3, 304, 152,
		0, 2034, 2038, 3, 306, 153, 0, 2035, 2038, 3, 296, 148, 0, 2036, 2038,
		3, 290, 145, 0, 2037, 2033, 1, 0, 0, 0, 2037, 2034, 1, 0, 0, 0, 2037, 2035,
		1, 0, 0, 0, 2037, 2036, 1, 0, 0, 0, 2038, 287, 1, 0, 0, 0, 2039, 2041,
		5, 38, 0, 0, 2040, 2039, 1, 0, 0, 0, 2040, 2041, 1, 0, 0, 0, 2041, 2042,
		1, 0, 0, 0, 2042, 2044, 3, 282, 141, 0, 2043, 2045, 3, 190, 95, 0, 2044,
		2043, 1, 0, 0, 0, 2044, 2045, 1, 0, 0, 0, 2045, 289, 1, 0, 0, 0, 2046,
		2047, 3, 58, 29, 0, 2047, 2048, 5, 30, 0, 0, 2048, 2050, 1, 0, 0, 0, 2049,
		2046, 1, 0, 0, 0, 2049, 2050, 1, 0, 0, 0, 2050, 2051, 1, 0, 0, 0, 2051,
		2056, 3, 292, 146, 0, 2052, 2053, 5, 30, 0, 0, 2053, 2055, 3, 292, 146,
		0, 2054, 2052, 1, 0, 0, 0, 2055, 2058, 1, 0, 0, 0, 2056, 2054, 1, 0, 0,
		0, 2056, 2057, 1, 0, 0, 0, 2057, 291, 1, 0, 0, 0, 2058, 2056, 1, 0, 0,
		0, 2059, 2061, 3, 294, 147, 0, 2060, 2062, 3, 46, 23, 0, 2061, 2060, 1,
		0, 0, 0, 2061, 2062, 1, 0, 0, 0, 2062, 293, 1, 0, 0, 0, 2063, 2064, 5,
		73, 0, 0, 2064, 295, 1, 0, 0, 0, 2065, 2073, 5, 32, 0, 0, 2066, 2068, 5,
		89, 0, 0, 2067, 2066, 1, 0, 0, 0, 2068, 2071, 1, 0, 0, 0, 2069, 2067, 1,
		0, 0, 0, 2069, 2070, 1, 0, 0, 0, 2070, 2072, 1, 0, 0, 0, 2071, 2069, 1,
		0, 0, 0, 2072, 2074, 3, 298, 149, 0, 2073, 2069, 1, 0, 0, 0, 2073, 2074,
		1, 0, 0, 0, 2074, 2078, 1, 0, 0, 0, 2075, 2077, 5, 89, 0, 0, 2076, 2075,
		1, 0, 0, 0, 2077, 2080, 1, 0, 0, 0, 2078, 2076, 1, 0, 0, 0, 2078, 2079,
		1, 0, 0, 0, 2079, 2081, 1, 0, 0, 0, 2080, 2078, 1, 0, 0, 0, 2081, 2082,
		5, 35, 0, 0, 2082, 297, 1, 0, 0, 0, 2083, 2095, 3, 300, 150, 0, 2084, 2088,
		3, 378, 189, 0, 2085, 2087, 5, 89, 0, 0, 2086, 2085, 1, 0, 0, 0, 2087,
		2090, 1, 0, 0, 0, 2088, 2086, 1, 0, 0, 0, 2088, 2089, 1, 0, 0, 0, 2089,
		2091, 1, 0, 0, 0, 2090, 2088, 1, 0, 0, 0, 2091, 2092, 3, 300, 150, 0, 2092,
		2094, 1, 0, 0, 0, 2093, 2084, 1, 0, 0, 0, 2094, 2097, 1, 0, 0, 0, 2095,
		2093, 1, 0, 0, 0, 2095, 2096, 1, 0, 0, 0, 2096, 2099, 1, 0, 0, 0, 2097,
		2095, 1, 0, 0, 0, 2098, 2100, 3, 378, 189, 0, 2099, 2098, 1, 0, 0, 0, 2099,
		2100, 1, 0, 0, 0, 2100, 299, 1, 0, 0, 0, 2101, 2103, 3, 316, 158, 0, 2102,
		2104, 5, 38, 0, 0, 2103, 2102, 1, 0, 0, 0, 2103, 2104, 1, 0, 0, 0, 2104,
		2106, 1, 0, 0, 0, 2105, 2101, 1, 0, 0, 0, 2105, 2106, 1, 0, 0, 0, 2106,
		2107, 1, 0, 0, 0, 2107, 2109, 3, 282, 141, 0, 2108, 2110, 3, 190, 95, 0,
		2109, 2108, 1, 0, 0, 0, 2109, 2110, 1, 0, 0, 0, 2110, 301, 1, 0, 0, 0,
		2111, 2112, 3, 112, 56, 0, 2112, 2113, 3, 336, 168, 0, 2113, 2115, 3, 282,
		141, 0, 2114, 2116, 3, 190, 95, 0, 2115, 2114, 1, 0, 0, 0, 2115, 2116,
		1, 0, 0, 0, 2116, 303, 1, 0, 0, 0, 2117, 2118, 5, 33, 0, 0, 2118, 2120,
		3, 282, 141, 0, 2119, 2121, 3, 190, 95, 0, 2120, 2119, 1, 0, 0, 0, 2120,
		2121, 1, 0, 0, 0, 2121, 2122, 1, 0, 0, 0, 2122, 2123, 5, 36, 0, 0, 2123,
		305, 1, 0, 0, 0, 2124, 2125, 5, 31, 0, 0, 2125, 2127, 3, 282, 141, 0, 2126,
		2128, 3, 308, 154, 0, 2127, 2126, 1, 0, 0, 0, 2127, 2128, 1, 0, 0, 0, 2128,
		2129, 1, 0, 0, 0, 2129, 2130, 5, 38, 0, 0, 2130, 2132, 3, 282, 141, 0,
		2131, 2133, 3, 190, 95, 0, 2132, 2131, 1, 0, 0, 0, 2132, 2133, 1, 0, 0,
		0, 2133, 2134, 1, 0, 0, 0, 2134, 2135, 5, 34, 0, 0, 2135, 307, 1, 0, 0,
		0, 2136, 2137, 3, 190, 95, 0, 2137, 309, 1, 0, 0, 0, 2138, 2142, 5, 38,
		0, 0, 2139, 2141, 5, 89, 0, 0, 2140, 2139, 1, 0, 0, 0, 2141, 2144, 1, 0,
		0, 0, 2142, 2140, 1, 0, 0, 0, 2142, 2143, 1, 0, 0, 0, 2143, 2145, 1, 0,
		0, 0, 2144, 2142, 1, 0, 0, 0, 2145, 2146, 3, 312, 156, 0, 2146, 311, 1,
		0, 0, 0, 2147, 2159, 3, 314, 157, 0, 2148, 2152, 3, 378, 189, 0, 2149,
		2151, 5, 89, 0, 0, 2150, 2149, 1, 0, 0, 0, 2151, 2154, 1, 0, 0, 0, 2152,
		2150, 1, 0, 0, 0, 2152, 2153, 1, 0, 0, 0, 2153, 2155, 1, 0, 0, 0, 2154,
		2152, 1, 0, 0, 0, 2155, 2156, 3, 314, 157, 0, 2156, 2158, 1, 0, 0, 0, 2157,
		2148, 1, 0, 0, 0, 2158, 2161, 1, 0, 0, 0, 2159, 2157, 1, 0, 0, 0, 2159,
		2160, 1, 0, 0, 0, 2160, 2163, 1, 0, 0, 0, 2161, 2159, 1, 0, 0, 0, 2162,
		2164, 3, 378, 189, 0, 2163, 2162, 1, 0, 0, 0, 2163, 2164, 1, 0, 0, 0, 2164,
		313, 1, 0, 0, 0, 2165, 2167, 3, 284, 142, 0, 2166, 2168, 3, 190, 95, 0,
		2167, 2166, 1, 0, 0, 0, 2167, 2168, 1, 0, 0, 0, 2168, 315, 1, 0, 0, 0,
		2169, 2172, 5, 74, 0, 0, 2170, 2172, 3, 324, 162, 0, 2171, 2169, 1, 0,
		0, 0, 2171, 2170, 1, 0, 0, 0, 2172, 317, 1, 0, 0, 0, 2173, 2176, 5, 74,
		0, 0, 2174, 2176, 3, 326, 163, 0, 2175, 2173, 1, 0, 0, 0, 2175, 2174, 1,
		0, 0, 0, 2176, 319, 1, 0, 0, 0, 2177, 2182, 3, 316, 158, 0, 2178, 2179,
		5, 30, 0, 0, 2179, 2181, 3, 316, 158, 0, 2180, 2178, 1, 0, 0, 0, 2181,
		2184, 1, 0, 0, 0, 2182, 2180, 1, 0, 0, 0, 2182, 2183, 1, 0, 0, 0, 2183,
		321, 1, 0, 0, 0, 2184, 2182, 1, 0, 0, 0, 2185, 2186, 7, 1, 0, 0, 2186,
		323, 1, 0, 0, 0, 2187, 2188, 7, 2, 0, 0, 2188, 325, 1, 0, 0, 0, 2189, 2190,
		7, 3, 0, 0, 2190, 327, 1, 0, 0, 0, 2191, 2196, 5, 90, 0, 0, 2192, 2193,
		5, 89, 0, 0, 2193, 2195, 5, 90, 0, 0, 2194, 2192, 1, 0, 0, 0, 2195, 2198,
		1, 0, 0, 0, 2196, 2194, 1, 0, 0, 0, 2196, 2197, 1, 0, 0, 0, 2197, 329,
		1, 0, 0, 0, 2198, 2196, 1, 0, 0, 0, 2199, 2204, 5, 91, 0, 0, 2200, 2201,
		5, 89, 0, 0, 2201, 2203, 5, 91, 0, 0, 2202, 2200, 1, 0, 0, 0, 2203, 2206,
		1, 0, 0, 0, 2204, 2202, 1, 0, 0, 0, 2204, 2205, 1, 0, 0, 0, 2205, 331,
		1, 0, 0, 0, 2206, 2204, 1, 0, 0, 0, 2207, 2208, 5, 47, 0, 0, 2208, 333,
		1, 0, 0, 0, 2209, 2210, 5, 46, 0, 0, 2210, 335, 1, 0, 0, 0, 2211, 2212,
		5, 62, 0, 0, 2212, 337, 1, 0, 0, 0, 2213, 2214, 5, 63, 0, 0, 2214, 339,
		1, 0, 0, 0, 2215, 2216, 5, 64, 0, 0, 2216, 341, 1, 0, 0, 0, 2217, 2223,
		3, 338, 169, 0, 2218, 2223, 3, 340, 170, 0, 2219, 2223, 3, 348, 174, 0,
		2220, 2223, 5, 1, 0, 0, 2221, 2223, 5, 20, 0, 0, 2222, 2217, 1, 0, 0, 0,
		2222, 2218, 1, 0, 0, 0, 2222, 2219, 1, 0, 0, 0, 2222, 2220, 1, 0, 0, 0,
		2222, 2221, 1, 0, 0, 0, 2223, 343, 1, 0, 0, 0, 2224, 2227, 3, 348, 174,
		0, 2225, 2227, 5, 18, 0, 0, 2226, 2224, 1, 0, 0, 0, 2226, 2225, 1, 0, 0,
		0, 2227, 345, 1, 0, 0, 0, 2228, 2229, 7, 4, 0, 0, 2229, 347, 1, 0, 0, 0,
		2230, 2232, 3, 354, 177, 0, 2231, 2233, 3, 350, 175, 0, 2232, 2231, 1,
		0, 0, 0, 2232, 2233, 1, 0, 0, 0, 2233, 2242, 1, 0, 0, 0, 2234, 2238, 3,
		356, 178, 0, 2235, 2237, 3, 358, 179, 0, 2236, 2235, 1, 0, 0, 0, 2237,
		2240, 1, 0, 0, 0, 2238, 2236, 1, 0, 0, 0, 2238, 2239, 1, 0, 0, 0, 2239,
		2242, 1, 0, 0, 0, 2240, 2238, 1, 0, 0, 0, 2241, 2230, 1, 0, 0, 0, 2241,
		2234, 1, 0, 0, 0, 2242, 349, 1, 0, 0, 0, 2243, 2244, 4, 175, 6, 0, 2244,
		2246, 3, 352, 176, 0, 2245, 2243, 1, 0, 0, 0, 2246, 2247, 1, 0, 0, 0, 2247,
		2245, 1, 0, 0, 0, 2247, 2248, 1, 0, 0, 0, 2248, 351, 1, 0, 0, 0, 2249,
		2252, 3, 354, 177, 0, 2250, 2252, 5, 93, 0, 0, 2251, 2249, 1, 0, 0, 0,
		2251, 2250, 1, 0, 0, 0, 2252, 353, 1, 0, 0, 0, 2253, 2256, 7, 5, 0, 0,
		2254, 2256, 5, 75, 0, 0, 2255, 2253, 1, 0, 0, 0, 2255, 2254, 1, 0, 0, 0,
		2256, 355, 1, 0, 0, 0, 2257, 2258, 5, 30, 0, 0, 2258, 357, 1, 0, 0, 0,
		2259, 2262, 5, 30, 0, 0, 2260, 2262, 3, 352, 176, 0, 2261, 2259, 1, 0,
		0, 0, 2261, 2260, 1, 0, 0, 0, 2262, 359, 1, 0, 0, 0, 2263, 2268, 3, 366,
		183, 0, 2264, 2268, 3, 370, 185, 0, 2265, 2268, 3, 362, 181, 0, 2266, 2268,
		3, 364, 182, 0, 2267, 2263, 1, 0, 0, 0, 2267, 2264, 1, 0, 0, 0, 2267, 2265,
		1, 0, 0, 0, 2267, 2266, 1, 0, 0, 0, 2268, 361, 1, 0, 0, 0, 2269, 2270,
		7, 6, 0, 0, 2270, 363, 1, 0, 0, 0, 2271, 2272, 5, 19, 0, 0, 2272, 365,
		1, 0, 0, 0, 2273, 2275, 3, 334, 167, 0, 2274, 2273, 1, 0, 0, 0, 2274, 2275,
		1, 0, 0, 0, 2275, 2276, 1, 0, 0, 0, 2276, 2282, 3, 368, 184, 0, 2277, 2279,
		3, 334, 167, 0, 2278, 2277, 1, 0, 0, 0, 2278, 2279, 1, 0, 0, 0, 2279, 2280,
		1, 0, 0, 0, 2280, 2282, 5, 82, 0, 0, 2281, 2274, 1, 0, 0, 0, 2281, 2278,
		1, 0, 0, 0, 2282, 367, 1, 0, 0, 0, 2283, 2284, 7, 7, 0, 0, 2284, 369, 1,
		0, 0, 0, 2285, 2286, 7, 8, 0, 0, 2286, 371, 1, 0, 0, 0, 2287, 2288, 7,
		9, 0, 0, 2288, 373, 1, 0, 0, 0, 2289, 2290, 7, 10, 0, 0, 2290, 375, 1,
		0, 0, 0, 2291, 2295, 5, 39, 0, 0, 2292, 2293, 3, 330, 165, 0, 2293, 2294,
		5, 89, 0, 0, 2294, 2296, 1, 0, 0, 0, 2295, 2292, 1, 0, 0, 0, 2295, 2296,
		1, 0, 0, 0, 2296, 2302, 1, 0, 0, 0, 2297, 2299, 3, 330, 165, 0, 2298, 2297,
		1, 0, 0, 0, 2298, 2299, 1, 0, 0, 0, 2299, 2300, 1, 0, 0, 0, 2300, 2302,
		5, 89, 0, 0, 2301, 2291, 1, 0, 0, 0, 2301, 2298, 1, 0, 0, 0, 2302, 377,
		1, 0, 0, 0, 2303, 2307, 5, 37, 0, 0, 2304, 2305, 3, 330, 165, 0, 2305,
		2306, 5, 89, 0, 0, 2306, 2308, 1, 0, 0, 0, 2307, 2304, 1, 0, 0, 0, 2307,
		2308, 1, 0, 0, 0, 2308, 2314, 1, 0, 0, 0, 2309, 2311, 3, 330, 165, 0, 2310,
		2309, 1, 0, 0, 0, 2310, 2311, 1, 0, 0, 0, 2311, 2312, 1, 0, 0, 0, 2312,
		2314, 5, 89, 0, 0, 2313, 2303, 1, 0, 0, 0, 2313, 2310, 1, 0, 0, 0, 2314,
		379, 1, 0, 0, 0, 322, 383, 387, 392, 403, 412, 419, 423, 427, 434, 442,
		452, 462, 469, 474, 481, 488, 495, 502, 506, 512, 520, 524, 531, 538, 542,
		547, 557, 564, 573, 580, 585, 590, 598, 604, 611, 621, 628, 632, 641, 647,
		654, 664, 671, 676, 681, 687, 690, 703, 709, 713, 718, 728, 732, 739, 750,
		757, 771, 781, 788, 795, 801, 806, 810, 814, 818, 822, 832, 839, 846, 854,
		861, 865, 870, 875, 880, 885, 891, 897, 908, 913, 918, 929, 934, 937, 942,
		948, 952, 956, 960, 965, 969, 974, 976, 980, 985, 989, 993, 998, 1002,
		1007, 1018, 1025, 1030, 1037, 1044, 1048, 1055, 1059, 1063, 1068, 1070,
		1075, 1080, 1084, 1089, 1096, 1101, 1105, 1110, 1122, 1129, 1133, 1138,
		1143, 1147, 1152, 1156, 1159, 1164, 1173, 1177, 1182, 1186, 1192, 1197,
		1201, 1206, 1216, 1223, 1227, 1232, 1237, 1244, 1247, 1254, 1258, 1263,
		1272, 1276, 1281, 1288, 1293, 1297, 1302, 1312, 1319, 1323, 1328, 1333,
		1337, 1340, 1344, 1349, 1357, 1364, 1368, 1371, 1373, 1378, 1383, 1392,
		1398, 1402, 1405, 1410, 1414, 1418, 1424, 1431, 1440, 1449, 1464, 1467,
		1469, 1474, 1484, 1488, 1493, 1500, 1502, 1511, 1518, 1522, 1526, 1531,
		1536, 1543, 1550, 1554, 1560, 1572, 1577, 1587, 1592, 1598, 1606, 1615,
		1631, 1635, 1640, 1650, 1657, 1661, 1669, 1673, 1678, 1688, 1695, 1699,
		1703, 1712, 1716, 1721, 1731, 1738, 1742, 1747, 1764, 1771, 1775, 1780,
		1786, 1793, 1800, 1804, 1808, 1817, 1824, 1837, 1841, 1846, 1850, 1858,
		1862, 1867, 1877, 1879, 1886, 1890, 1898, 1905, 1911, 1918, 1922, 1926,
		1931, 1941, 1950, 1958, 1960, 1968, 1973, 1978, 1985, 1990, 1995, 1999,
		2004, 2009, 2016, 2021, 2026, 2028, 2030, 2037, 2040, 2044, 2049, 2056,
		2061, 2069, 2073, 2078, 2088, 2095, 2099, 2103, 2105, 2109, 2115, 2120,
		2127, 2132, 2142, 2152, 2159, 2163, 2167, 2171, 2175, 2182, 2196, 2204,
		2222, 2226, 2232, 2238, 2241, 2247, 2251, 2255, 2261, 2267, 2274, 2278,
		2281, 2295, 2298, 2301, 2307, 2310, 2313,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// MojoParserInit initializes any static state used to implement MojoParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewMojoParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func MojoParserInit() {
	staticData := &mojoparserParserStaticData
	staticData.once.Do(mojoparserParserInit)
}

// NewMojoParser produces a new parser instance for the optional input antlr.TokenStream.
func NewMojoParser(input antlr.TokenStream) *MojoParser {
	MojoParserInit()
	this := new(MojoParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &mojoparserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	this.RuleNames = staticData.ruleNames
	this.LiteralNames = staticData.literalNames
	this.SymbolicNames = staticData.symbolicNames
	this.GrammarFileName = "java-escape"

	return this
}

// MojoParser tokens.
const (
	MojoParserEOF                               = antlr.TokenEOF
	MojoParserKEYWORD_AND                       = 1
	MojoParserKEYWORD_AS                        = 2
	MojoParserKEYWORD_ATTRIBUTE                 = 3
	MojoParserKEYWORD_BREAK                     = 4
	MojoParserKEYWORD_CONST                     = 5
	MojoParserKEYWORD_CONTINUE                  = 6
	MojoParserKEYWORD_ELSE                      = 7
	MojoParserKEYWORD_ENUM                      = 8
	MojoParserKEYWORD_FALSE                     = 9
	MojoParserKEYWORD_FOR                       = 10
	MojoParserKEYWORD_FUNC                      = 11
	MojoParserKEYWORD_IF                        = 12
	MojoParserKEYWORD_IMPORT                    = 13
	MojoParserKEYWORD_IN                        = 14
	MojoParserKEYWORD_INTERFACE                 = 15
	MojoParserKEYWORD_IS                        = 16
	MojoParserKEYWORD_MATCH                     = 17
	MojoParserKEYWORD_NOT                       = 18
	MojoParserKEYWORD_NULL                      = 19
	MojoParserKEYWORD_OR                        = 20
	MojoParserKEYWORD_PACKAGE                   = 21
	MojoParserKEYWORD_REPEATE                   = 22
	MojoParserKEYWORD_RETURN                    = 23
	MojoParserKEYWORD_STRUCT                    = 24
	MojoParserKEYWORD_TRUE                      = 25
	MojoParserKEYWORD_TYPE                      = 26
	MojoParserKEYWORD_VAR                       = 27
	MojoParserKEYWORD_WHILE                     = 28
	MojoParserKEYWORD_XOR                       = 29
	MojoParserDOT                               = 30
	MojoParserLCURLY                            = 31
	MojoParserLPAREN                            = 32
	MojoParserLBRACK                            = 33
	MojoParserRCURLY                            = 34
	MojoParserRPAREN                            = 35
	MojoParserRBRACK                            = 36
	MojoParserCOMMA                             = 37
	MojoParserCOLON                             = 38
	MojoParserSEMI                              = 39
	MojoParserLT                                = 40
	MojoParserGT                                = 41
	MojoParserBANG                              = 42
	MojoParserQUESTION                          = 43
	MojoParserAT                                = 44
	MojoParserAND                               = 45
	MojoParserMINUS                             = 46
	MojoParserEQUAL                             = 47
	MojoParserPIPE                              = 48
	MojoParserSLASH                             = 49
	MojoParserPLUS                              = 50
	MojoParserSTAR                              = 51
	MojoParserPERCENT                           = 52
	MojoParserCARET                             = 53
	MojoParserTILDE                             = 54
	MojoParserDOLLER                            = 55
	MojoParserBACKTICK                          = 56
	MojoParserUNDERSCORE                        = 57
	MojoParserPLUS_PLUS                         = 58
	MojoParserMINUS_MINUS                       = 59
	MojoParserCOLON_EQUAL                       = 60
	MojoParserRIGHT_RIGHT_ARROWS                = 61
	MojoParserRIGHT_ARROW                       = 62
	MojoParserDOT_DOT                           = 63
	MojoParserDOT_DOT_LT                        = 64
	MojoParserELLIPSIS                          = 65
	MojoParserGRAPH_RIGHT_PATH                  = 66
	MojoParserGRAPH_LEFT_PATH                   = 67
	MojoParserGRAPH_PATH                        = 68
	MojoParserGRAPH_CONSTRAINT_PATH_LEFT        = 69
	MojoParserGRAPH_CONSTRAINT_PATH_LEFT_ARROW  = 70
	MojoParserGRAPH_CONSTRAINT_PATH_RIGHT       = 71
	MojoParserGRAPH_CONSTRAINT_PATH_RIGHT_ARROW = 72
	MojoParserTYPE_IDENTIFIER                   = 73
	MojoParserVALUE_IDENTIFIER                  = 74
	MojoParserOPERATOR_HEAD_OTHER               = 75
	MojoParserIMPLICIT_PARAMETER_NAME           = 76
	MojoParserBINARY_LITERAL                    = 77
	MojoParserOCTAL_LITERAL                     = 78
	MojoParserDECIMAL_LITERAL                   = 79
	MojoParserPURE_DECIMAL_DIGITS               = 80
	MojoParserHEXADECIMAL_LITERAL               = 81
	MojoParserFLOAT_LITERAL                     = 82
	MojoParserSTATIC_STRING_LITERAL             = 83
	MojoParserINTERPOLATED_STRING_LITERAL       = 84
	MojoParserWS                                = 85
	MojoParserBLOCK_COMMENT                     = 86
	MojoParserLINE_COMMENT                      = 87
	MojoParserLINE_COMMENT_DISTINCT_DOCUMENT    = 88
	MojoParserEOL                               = 89
	MojoParserLINE_DOCUMENT                     = 90
	MojoParserFOLLOWING_LINE_DOCUMENT           = 91
	MojoParserINNER_LINE_DOCUMENT               = 92
	MojoParserOPERATOR_FOLLOWING_CHARACTER      = 93
)

// MojoParser rules.
const (
	MojoParserRULE_mojoFile                          = 0
	MojoParserRULE_statement                         = 1
	MojoParserRULE_freeFloatingDocument              = 2
	MojoParserRULE_statements                        = 3
	MojoParserRULE_loopStatement                     = 4
	MojoParserRULE_forInStatement                    = 5
	MojoParserRULE_whileStatement                    = 6
	MojoParserRULE_conditions                        = 7
	MojoParserRULE_condition                         = 8
	MojoParserRULE_optionalBindingCondition          = 9
	MojoParserRULE_branchStatement                   = 10
	MojoParserRULE_ifStatement                       = 11
	MojoParserRULE_elseClause                        = 12
	MojoParserRULE_matchStatement                    = 13
	MojoParserRULE_matchCases                        = 14
	MojoParserRULE_matchCase                         = 15
	MojoParserRULE_controlTransferStatement          = 16
	MojoParserRULE_breakStatement                    = 17
	MojoParserRULE_continueStatement                 = 18
	MojoParserRULE_returnStatement                   = 19
	MojoParserRULE_genericParameterClause            = 20
	MojoParserRULE_genericParameters                 = 21
	MojoParserRULE_genericParameter                  = 22
	MojoParserRULE_genericArgumentClause             = 23
	MojoParserRULE_genericArguments                  = 24
	MojoParserRULE_genericArgument                   = 25
	MojoParserRULE_declaration                       = 26
	MojoParserRULE_codeBlock                         = 27
	MojoParserRULE_packageDeclaration                = 28
	MojoParserRULE_packageIdentifier                 = 29
	MojoParserRULE_packageName                       = 30
	MojoParserRULE_importDeclaration                 = 31
	MojoParserRULE_importPath                        = 32
	MojoParserRULE_importPathIdentifier              = 33
	MojoParserRULE_importAllClause                   = 34
	MojoParserRULE_importValueAsClause               = 35
	MojoParserRULE_importTypeClause                  = 36
	MojoParserRULE_importTypeAsClause                = 37
	MojoParserRULE_importGroupClause                 = 38
	MojoParserRULE_importGroup                       = 39
	MojoParserRULE_importValue                       = 40
	MojoParserRULE_importType                        = 41
	MojoParserRULE_constantDeclaration               = 42
	MojoParserRULE_patternInitializers               = 43
	MojoParserRULE_documentedPatternInitializer      = 44
	MojoParserRULE_patternInitializer                = 45
	MojoParserRULE_initializer                       = 46
	MojoParserRULE_variableDeclaration               = 47
	MojoParserRULE_typeAliasDeclaration              = 48
	MojoParserRULE_typeAliasName                     = 49
	MojoParserRULE_typeAliasAssignment               = 50
	MojoParserRULE_functionDeclaration               = 51
	MojoParserRULE_functionName                      = 52
	MojoParserRULE_functionSignature                 = 53
	MojoParserRULE_functionResult                    = 54
	MojoParserRULE_functionBody                      = 55
	MojoParserRULE_functionParameterClause           = 56
	MojoParserRULE_functionParameters                = 57
	MojoParserRULE_functionParameter                 = 58
	MojoParserRULE_enumDeclaration                   = 59
	MojoParserRULE_enumBody                          = 60
	MojoParserRULE_enumName                          = 61
	MojoParserRULE_enumMembers                       = 62
	MojoParserRULE_enumMember                        = 63
	MojoParserRULE_structDeclaration                 = 64
	MojoParserRULE_structName                        = 65
	MojoParserRULE_structType                        = 66
	MojoParserRULE_structBody                        = 67
	MojoParserRULE_structMembers                     = 68
	MojoParserRULE_structMember                      = 69
	MojoParserRULE_structMemberDeclaration           = 70
	MojoParserRULE_interfaceDeclaration              = 71
	MojoParserRULE_interfaceName                     = 72
	MojoParserRULE_interfaceType                     = 73
	MojoParserRULE_interfaceBody                     = 74
	MojoParserRULE_interfaceMembers                  = 75
	MojoParserRULE_interfaceMember                   = 76
	MojoParserRULE_interfaceMethodDeclaration        = 77
	MojoParserRULE_attributeDeclaration              = 78
	MojoParserRULE_attributeAliasDeclaration         = 79
	MojoParserRULE_attributeAliasAssignment          = 80
	MojoParserRULE_pattern                           = 81
	MojoParserRULE_wildcardPattern                   = 82
	MojoParserRULE_identifierPattern                 = 83
	MojoParserRULE_tuplePattern                      = 84
	MojoParserRULE_tuplePatternElementList           = 85
	MojoParserRULE_tuplePatternElement               = 86
	MojoParserRULE_optionalPattern                   = 87
	MojoParserRULE_expressionPattern                 = 88
	MojoParserRULE_attribute                         = 89
	MojoParserRULE_attributeIdentifier               = 90
	MojoParserRULE_attributeName                     = 91
	MojoParserRULE_attributeArgumentClause           = 92
	MojoParserRULE_attributeArgument                 = 93
	MojoParserRULE_attributeArguments                = 94
	MojoParserRULE_attributes                        = 95
	MojoParserRULE_expression                        = 96
	MojoParserRULE_expressions                       = 97
	MojoParserRULE_prefixExpression                  = 98
	MojoParserRULE_binaryExpression                  = 99
	MojoParserRULE_binaryExpressions                 = 100
	MojoParserRULE_conditionalOperator               = 101
	MojoParserRULE_typeCastingOperator               = 102
	MojoParserRULE_primaryExpression                 = 103
	MojoParserRULE_literalExpression                 = 104
	MojoParserRULE_numericOperatorLiteral            = 105
	MojoParserRULE_stringOperatorLiteral             = 106
	MojoParserRULE_postfixLiteralOperator            = 107
	MojoParserRULE_prefixLiteralOperator             = 108
	MojoParserRULE_arrayLiteral                      = 109
	MojoParserRULE_arrayLiteralItems                 = 110
	MojoParserRULE_arrayLiteralItem                  = 111
	MojoParserRULE_mapLiteral                        = 112
	MojoParserRULE_mapLiteralItems                   = 113
	MojoParserRULE_mapLiteralItem                    = 114
	MojoParserRULE_objectLiteral                     = 115
	MojoParserRULE_objectLiteralItems                = 116
	MojoParserRULE_objectLiteralItem                 = 117
	MojoParserRULE_structLiteral                     = 118
	MojoParserRULE_structConstructionExpression      = 119
	MojoParserRULE_closureExpression                 = 120
	MojoParserRULE_closureParameters                 = 121
	MojoParserRULE_closureParameter                  = 122
	MojoParserRULE_implicitMemberExpression          = 123
	MojoParserRULE_parenthesizedExpression           = 124
	MojoParserRULE_tupleExpression                   = 125
	MojoParserRULE_tupleElement                      = 126
	MojoParserRULE_wildcardExpression                = 127
	MojoParserRULE_postfixExpression                 = 128
	MojoParserRULE_suffixExpression                  = 129
	MojoParserRULE_explicitMemberSuffix              = 130
	MojoParserRULE_subscriptSuffix                   = 131
	MojoParserRULE_functionCallSuffix                = 132
	MojoParserRULE_functionCallArgumentClause        = 133
	MojoParserRULE_functionCallArguments             = 134
	MojoParserRULE_functionCallArgument              = 135
	MojoParserRULE_trailingClosures                  = 136
	MojoParserRULE_labeledTrailingClosures           = 137
	MojoParserRULE_labeledTrailingClosure            = 138
	MojoParserRULE_argumentNames                     = 139
	MojoParserRULE_argumentName                      = 140
	MojoParserRULE_type_                             = 141
	MojoParserRULE_basicType                         = 142
	MojoParserRULE_primeType                         = 143
	MojoParserRULE_typeAnnotation                    = 144
	MojoParserRULE_typeIdentifier                    = 145
	MojoParserRULE_typeIdentifierClause              = 146
	MojoParserRULE_typeName                          = 147
	MojoParserRULE_tupleType                         = 148
	MojoParserRULE_tupleTypeElements                 = 149
	MojoParserRULE_tupleTypeElement                  = 150
	MojoParserRULE_functionType                      = 151
	MojoParserRULE_arrayType                         = 152
	MojoParserRULE_mapType                           = 153
	MojoParserRULE_keyAttributes                     = 154
	MojoParserRULE_typeInheritanceClause             = 155
	MojoParserRULE_typeInheritances                  = 156
	MojoParserRULE_typeInheritance                   = 157
	MojoParserRULE_declarationIdentifier             = 158
	MojoParserRULE_labelIdentifier                   = 159
	MojoParserRULE_pathIdentifier                    = 160
	MojoParserRULE_identifier                        = 161
	MojoParserRULE_keywordAsIdentifierInDeclarations = 162
	MojoParserRULE_keywordAsIdentifierInLabels       = 163
	MojoParserRULE_document                          = 164
	MojoParserRULE_followingDocument                 = 165
	MojoParserRULE_assignmentOperator                = 166
	MojoParserRULE_negatePrefixOperator              = 167
	MojoParserRULE_arrowOperator                     = 168
	MojoParserRULE_rangeOperator                     = 169
	MojoParserRULE_halfOpenRangeOperator             = 170
	MojoParserRULE_binaryOperator                    = 171
	MojoParserRULE_prefixOperator                    = 172
	MojoParserRULE_postfixOperator                   = 173
	MojoParserRULE_operator                          = 174
	MojoParserRULE_operator_characters               = 175
	MojoParserRULE_operator_character                = 176
	MojoParserRULE_operator_head                     = 177
	MojoParserRULE_dot_operator_head                 = 178
	MojoParserRULE_dot_operator_character            = 179
	MojoParserRULE_literal                           = 180
	MojoParserRULE_boolLiteral                       = 181
	MojoParserRULE_nullLiteral                       = 182
	MojoParserRULE_numericLiteral                    = 183
	MojoParserRULE_integerLiteral                    = 184
	MojoParserRULE_stringLiteral                     = 185
	MojoParserRULE_eos                               = 186
	MojoParserRULE_eov                               = 187
	MojoParserRULE_eosWithDocument                   = 188
	MojoParserRULE_eovWithDocument                   = 189
)

// IMojoFileContext is an interface to support dynamic dispatch.
type IMojoFileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMojoFileContext differentiates from other interfaces.
	IsMojoFileContext()
}

type MojoFileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMojoFileContext() *MojoFileContext {
	var p = new(MojoFileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_mojoFile
	return p
}

func (*MojoFileContext) IsMojoFileContext() {}

func NewMojoFileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MojoFileContext {
	var p = new(MojoFileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_mojoFile

	return p
}

func (s *MojoFileContext) GetParser() antlr.Parser { return s.parser }

func (s *MojoFileContext) EOF() antlr.TerminalNode {
	return s.GetToken(MojoParserEOF, 0)
}

func (s *MojoFileContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MojoFileContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MojoFileContext) Statements() IStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *MojoFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MojoFileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MojoFileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMojoFile(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MojoFile() (localctx IMojoFileContext) {
	this := p
	_ = this

	localctx = NewMojoFileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, MojoParserRULE_mojoFile)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(383)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(380)
				p.Match(MojoParserEOL)
			}

		}
		p.SetState(385)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())
	}
	p.SetState(387)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&180142902761947006) != 0 || (int64((_la-73)) & ^0x3f) == 0 && ((int64(1)<<(_la-73))&135159) != 0 {
		{
			p.SetState(386)
			p.Statements()
		}

	}
	p.SetState(392)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(389)
			p.Match(MojoParserEOL)
		}

		p.SetState(394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(395)
		p.Match(MojoParserEOF)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Declaration() IDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *StatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StatementContext) LoopStatement() ILoopStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILoopStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *StatementContext) BranchStatement() IBranchStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBranchStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBranchStatementContext)
}

func (s *StatementContext) ControlTransferStatement() IControlTransferStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IControlTransferStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IControlTransferStatementContext)
}

func (s *StatementContext) FreeFloatingDocument() IFreeFloatingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFreeFloatingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFreeFloatingDocumentContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Statement() (localctx IStatementContext) {
	this := p
	_ = this

	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, MojoParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(403)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(397)
			p.Declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(398)
			p.Expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(399)
			p.LoopStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(400)
			p.BranchStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(401)
			p.ControlTransferStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(402)
			p.FreeFloatingDocument()
		}

	}

	return localctx
}

// IFreeFloatingDocumentContext is an interface to support dynamic dispatch.
type IFreeFloatingDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFreeFloatingDocumentContext differentiates from other interfaces.
	IsFreeFloatingDocumentContext()
}

type FreeFloatingDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFreeFloatingDocumentContext() *FreeFloatingDocumentContext {
	var p = new(FreeFloatingDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_freeFloatingDocument
	return p
}

func (*FreeFloatingDocumentContext) IsFreeFloatingDocumentContext() {}

func NewFreeFloatingDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FreeFloatingDocumentContext {
	var p = new(FreeFloatingDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_freeFloatingDocument

	return p
}

func (s *FreeFloatingDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *FreeFloatingDocumentContext) Document() IDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *FreeFloatingDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FreeFloatingDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FreeFloatingDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFreeFloatingDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FreeFloatingDocument() (localctx IFreeFloatingDocumentContext) {
	this := p
	_ = this

	localctx = NewFreeFloatingDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, MojoParserRULE_freeFloatingDocument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(405)
		p.Document()
	}

	return localctx
}

// IStatementsContext is an interface to support dynamic dispatch.
type IStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementsContext differentiates from other interfaces.
	IsStatementsContext()
}

type StatementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementsContext() *StatementsContext {
	var p = new(StatementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_statements
	return p
}

func (*StatementsContext) IsStatementsContext() {}

func NewStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementsContext {
	var p = new(StatementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_statements

	return p
}

func (s *StatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementsContext) AllStatement() []IStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementContext); ok {
			len++
		}
	}

	tst := make([]IStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementContext); ok {
			tst[i] = t.(IStatementContext)
			i++
		}
	}

	return tst
}

func (s *StatementsContext) Statement(i int) IStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementsContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *StatementsContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *StatementsContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MojoParserSEMI, 0)
}

func (s *StatementsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StatementsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStatements(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Statements() (localctx IStatementsContext) {
	this := p
	_ = this

	localctx = NewStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, MojoParserRULE_statements)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(407)
		p.Statement()
	}
	p.SetState(419)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(408)
				p.Eos()
			}
			p.SetState(412)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(409)
					p.Match(MojoParserEOL)
				}

				p.SetState(414)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(415)
				p.Statement()
			}

		}
		p.SetState(421)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())
	}
	p.SetState(423)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserSEMI {
		{
			p.SetState(422)
			p.Match(MojoParserSEMI)
		}

	}

	return localctx
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_loopStatement
	return p
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) ForInStatement() IForInStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForInStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForInStatementContext)
}

func (s *LoopStatementContext) WhileStatement() IWhileStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhileStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLoopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LoopStatement() (localctx ILoopStatementContext) {
	this := p
	_ = this

	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, MojoParserRULE_loopStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(427)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_FOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(425)
			p.ForInStatement()
		}

	case MojoParserKEYWORD_WHILE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(426)
			p.WhileStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IForInStatementContext is an interface to support dynamic dispatch.
type IForInStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForInStatementContext differentiates from other interfaces.
	IsForInStatementContext()
}

type ForInStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForInStatementContext() *ForInStatementContext {
	var p = new(ForInStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_forInStatement
	return p
}

func (*ForInStatementContext) IsForInStatementContext() {}

func NewForInStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForInStatementContext {
	var p = new(ForInStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_forInStatement

	return p
}

func (s *ForInStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForInStatementContext) KEYWORD_FOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FOR, 0)
}

func (s *ForInStatementContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *ForInStatementContext) KEYWORD_IN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IN, 0)
}

func (s *ForInStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForInStatementContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *ForInStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ForInStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ForInStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForInStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitForInStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ForInStatement() (localctx IForInStatementContext) {
	this := p
	_ = this

	localctx = NewForInStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, MojoParserRULE_forInStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(429)
		p.Match(MojoParserKEYWORD_FOR)
	}
	{
		p.SetState(430)
		p.pattern(0)
	}
	p.SetState(434)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(431)
			p.Match(MojoParserEOL)
		}

		p.SetState(436)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(437)
		p.Match(MojoParserKEYWORD_IN)
	}
	{
		p.SetState(438)
		p.Expression()
	}
	p.SetState(442)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(439)
			p.Match(MojoParserEOL)
		}

		p.SetState(444)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(445)
		p.CodeBlock()
	}

	return localctx
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) KEYWORD_WHILE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_WHILE, 0)
}

func (s *WhileStatementContext) Conditions() IConditionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *WhileStatementContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *WhileStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *WhileStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) WhileStatement() (localctx IWhileStatementContext) {
	this := p
	_ = this

	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, MojoParserRULE_whileStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(447)
		p.Match(MojoParserKEYWORD_WHILE)
	}
	{
		p.SetState(448)
		p.Conditions()
	}
	p.SetState(452)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(449)
			p.Match(MojoParserEOL)
		}

		p.SetState(454)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(455)
		p.CodeBlock()
	}

	return localctx
}

// IConditionsContext is an interface to support dynamic dispatch.
type IConditionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionsContext differentiates from other interfaces.
	IsConditionsContext()
}

type ConditionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionsContext() *ConditionsContext {
	var p = new(ConditionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_conditions
	return p
}

func (*ConditionsContext) IsConditionsContext() {}

func NewConditionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionsContext {
	var p = new(ConditionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_conditions

	return p
}

func (s *ConditionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionsContext) AllCondition() []IConditionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IConditionContext); ok {
			len++
		}
	}

	tst := make([]IConditionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IConditionContext); ok {
			tst[i] = t.(IConditionContext)
			i++
		}
	}

	return tst
}

func (s *ConditionsContext) Condition(i int) IConditionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *ConditionsContext) AllEov() []IEovContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovContext); ok {
			len++
		}
	}

	tst := make([]IEovContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovContext); ok {
			tst[i] = t.(IEovContext)
			i++
		}
	}

	return tst
}

func (s *ConditionsContext) Eov(i int) IEovContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ConditionsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ConditionsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ConditionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitConditions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Conditions() (localctx IConditionsContext) {
	this := p
	_ = this

	localctx = NewConditionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, MojoParserRULE_conditions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(457)
		p.Condition()
	}
	p.SetState(469)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(458)
				p.Eov()
			}
			p.SetState(462)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(459)
					p.Match(MojoParserEOL)
				}

				p.SetState(464)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(465)
				p.Condition()
			}

		}
		p.SetState(471)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}

	return localctx
}

// IConditionContext is an interface to support dynamic dispatch.
type IConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionContext differentiates from other interfaces.
	IsConditionContext()
}

type ConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionContext() *ConditionContext {
	var p = new(ConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_condition
	return p
}

func (*ConditionContext) IsConditionContext() {}

func NewConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionContext {
	var p = new(ConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_condition

	return p
}

func (s *ConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionContext) OptionalBindingCondition() IOptionalBindingConditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptionalBindingConditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptionalBindingConditionContext)
}

func (s *ConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitCondition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Condition() (localctx IConditionContext) {
	this := p
	_ = this

	localctx = NewConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, MojoParserRULE_condition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(474)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FALSE, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TRUE, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_XOR, MojoParserDOT, MojoParserLCURLY, MojoParserLPAREN, MojoParserLBRACK, MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserUNDERSCORE, MojoParserTYPE_IDENTIFIER, MojoParserVALUE_IDENTIFIER, MojoParserOPERATOR_HEAD_OTHER, MojoParserBINARY_LITERAL, MojoParserOCTAL_LITERAL, MojoParserDECIMAL_LITERAL, MojoParserPURE_DECIMAL_DIGITS, MojoParserHEXADECIMAL_LITERAL, MojoParserFLOAT_LITERAL, MojoParserSTATIC_STRING_LITERAL, MojoParserINTERPOLATED_STRING_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(472)
			p.Expression()
		}

	case MojoParserKEYWORD_VAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(473)
			p.OptionalBindingCondition()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOptionalBindingConditionContext is an interface to support dynamic dispatch.
type IOptionalBindingConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionalBindingConditionContext differentiates from other interfaces.
	IsOptionalBindingConditionContext()
}

type OptionalBindingConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionalBindingConditionContext() *OptionalBindingConditionContext {
	var p = new(OptionalBindingConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_optionalBindingCondition
	return p
}

func (*OptionalBindingConditionContext) IsOptionalBindingConditionContext() {}

func NewOptionalBindingConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionalBindingConditionContext {
	var p = new(OptionalBindingConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_optionalBindingCondition

	return p
}

func (s *OptionalBindingConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionalBindingConditionContext) KEYWORD_VAR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_VAR, 0)
}

func (s *OptionalBindingConditionContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *OptionalBindingConditionContext) Initializer() IInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *OptionalBindingConditionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *OptionalBindingConditionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *OptionalBindingConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionalBindingConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionalBindingConditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOptionalBindingCondition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) OptionalBindingCondition() (localctx IOptionalBindingConditionContext) {
	this := p
	_ = this

	localctx = NewOptionalBindingConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, MojoParserRULE_optionalBindingCondition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(476)
		p.Match(MojoParserKEYWORD_VAR)
	}
	{
		p.SetState(477)
		p.pattern(0)
	}
	p.SetState(481)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(478)
			p.Match(MojoParserEOL)
		}

		p.SetState(483)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(484)
		p.Initializer()
	}

	return localctx
}

// IBranchStatementContext is an interface to support dynamic dispatch.
type IBranchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBranchStatementContext differentiates from other interfaces.
	IsBranchStatementContext()
}

type BranchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBranchStatementContext() *BranchStatementContext {
	var p = new(BranchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_branchStatement
	return p
}

func (*BranchStatementContext) IsBranchStatementContext() {}

func NewBranchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BranchStatementContext {
	var p = new(BranchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_branchStatement

	return p
}

func (s *BranchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BranchStatementContext) IfStatement() IIfStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *BranchStatementContext) MatchStatement() IMatchStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchStatementContext)
}

func (s *BranchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BranchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BranchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBranchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BranchStatement() (localctx IBranchStatementContext) {
	this := p
	_ = this

	localctx = NewBranchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, MojoParserRULE_branchStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(488)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_IF:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(486)
			p.IfStatement()
		}

	case MojoParserKEYWORD_MATCH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(487)
			p.MatchStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) KEYWORD_IF() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IF, 0)
}

func (s *IfStatementContext) Conditions() IConditionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *IfStatementContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *IfStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *IfStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *IfStatementContext) ElseClause() IElseClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IElseClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IElseClauseContext)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) IfStatement() (localctx IIfStatementContext) {
	this := p
	_ = this

	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, MojoParserRULE_ifStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(490)
		p.Match(MojoParserKEYWORD_IF)
	}
	{
		p.SetState(491)
		p.Conditions()
	}
	p.SetState(495)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(492)
			p.Match(MojoParserEOL)
		}

		p.SetState(497)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(498)
		p.CodeBlock()
	}
	p.SetState(502)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(499)
				p.Match(MojoParserEOL)
			}

		}
		p.SetState(504)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())
	}
	p.SetState(506)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_ELSE {
		{
			p.SetState(505)
			p.ElseClause()
		}

	}

	return localctx
}

// IElseClauseContext is an interface to support dynamic dispatch.
type IElseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElseClauseContext differentiates from other interfaces.
	IsElseClauseContext()
}

type ElseClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseClauseContext() *ElseClauseContext {
	var p = new(ElseClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_elseClause
	return p
}

func (*ElseClauseContext) IsElseClauseContext() {}

func NewElseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElseClauseContext {
	var p = new(ElseClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_elseClause

	return p
}

func (s *ElseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ElseClauseContext) KEYWORD_ELSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ELSE, 0)
}

func (s *ElseClauseContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *ElseClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ElseClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ElseClauseContext) IfStatement() IIfStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *ElseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElseClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitElseClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ElseClause() (localctx IElseClauseContext) {
	this := p
	_ = this

	localctx = NewElseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, MojoParserRULE_elseClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(524)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(508)
			p.Match(MojoParserKEYWORD_ELSE)
		}
		p.SetState(512)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(509)
				p.Match(MojoParserEOL)
			}

			p.SetState(514)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(515)
			p.CodeBlock()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(516)
			p.Match(MojoParserKEYWORD_ELSE)
		}
		p.SetState(520)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(517)
				p.Match(MojoParserEOL)
			}

			p.SetState(522)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(523)
			p.IfStatement()
		}

	}

	return localctx
}

// IMatchStatementContext is an interface to support dynamic dispatch.
type IMatchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchStatementContext differentiates from other interfaces.
	IsMatchStatementContext()
}

type MatchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchStatementContext() *MatchStatementContext {
	var p = new(MatchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_matchStatement
	return p
}

func (*MatchStatementContext) IsMatchStatementContext() {}

func NewMatchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchStatementContext {
	var p = new(MatchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_matchStatement

	return p
}

func (s *MatchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchStatementContext) KEYWORD_MATCH() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_MATCH, 0)
}

func (s *MatchStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MatchStatementContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *MatchStatementContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *MatchStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MatchStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MatchStatementContext) MatchCases() IMatchCasesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchCasesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchCasesContext)
}

func (s *MatchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMatchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MatchStatement() (localctx IMatchStatementContext) {
	this := p
	_ = this

	localctx = NewMatchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, MojoParserRULE_matchStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(526)
		p.Match(MojoParserKEYWORD_MATCH)
	}
	{
		p.SetState(527)
		p.Expression()
	}
	p.SetState(531)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(528)
			p.Match(MojoParserEOL)
		}

		p.SetState(533)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(534)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(542)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
		p.SetState(538)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(535)
				p.Match(MojoParserEOL)
			}

			p.SetState(540)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(541)
			p.MatchCases()
		}

	}
	p.SetState(547)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(544)
			p.Match(MojoParserEOL)
		}

		p.SetState(549)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(550)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IMatchCasesContext is an interface to support dynamic dispatch.
type IMatchCasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchCasesContext differentiates from other interfaces.
	IsMatchCasesContext()
}

type MatchCasesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchCasesContext() *MatchCasesContext {
	var p = new(MatchCasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_matchCases
	return p
}

func (*MatchCasesContext) IsMatchCasesContext() {}

func NewMatchCasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchCasesContext {
	var p = new(MatchCasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_matchCases

	return p
}

func (s *MatchCasesContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchCasesContext) AllMatchCase() []IMatchCaseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMatchCaseContext); ok {
			len++
		}
	}

	tst := make([]IMatchCaseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMatchCaseContext); ok {
			tst[i] = t.(IMatchCaseContext)
			i++
		}
	}

	return tst
}

func (s *MatchCasesContext) MatchCase(i int) IMatchCaseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMatchCaseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMatchCaseContext)
}

func (s *MatchCasesContext) AllEos() []IEosContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosContext); ok {
			len++
		}
	}

	tst := make([]IEosContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosContext); ok {
			tst[i] = t.(IEosContext)
			i++
		}
	}

	return tst
}

func (s *MatchCasesContext) Eos(i int) IEosContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *MatchCasesContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MatchCasesContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MatchCasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchCasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchCasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMatchCases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MatchCases() (localctx IMatchCasesContext) {
	this := p
	_ = this

	localctx = NewMatchCasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, MojoParserRULE_matchCases)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(552)
		p.MatchCase()
	}
	p.SetState(564)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(553)
				p.Eos()
			}
			p.SetState(557)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(554)
					p.Match(MojoParserEOL)
				}

				p.SetState(559)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(560)
				p.MatchCase()
			}

		}
		p.SetState(566)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext())
	}
	{
		p.SetState(567)
		p.Eos()
	}

	return localctx
}

// IMatchCaseContext is an interface to support dynamic dispatch.
type IMatchCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchCaseContext differentiates from other interfaces.
	IsMatchCaseContext()
}

type MatchCaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchCaseContext() *MatchCaseContext {
	var p = new(MatchCaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_matchCase
	return p
}

func (*MatchCaseContext) IsMatchCaseContext() {}

func NewMatchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchCaseContext {
	var p = new(MatchCaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_matchCase

	return p
}

func (s *MatchCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchCaseContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *MatchCaseContext) RIGHT_RIGHT_ARROWS() antlr.TerminalNode {
	return s.GetToken(MojoParserRIGHT_RIGHT_ARROWS, 0)
}

func (s *MatchCaseContext) CodeBlock() ICodeBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICodeBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *MatchCaseContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MatchCaseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MatchCaseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MatchCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchCaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMatchCase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MatchCase() (localctx IMatchCaseContext) {
	this := p
	_ = this

	localctx = NewMatchCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, MojoParserRULE_matchCase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(569)
		p.pattern(0)
	}
	p.SetState(573)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(570)
			p.Match(MojoParserEOL)
		}

		p.SetState(575)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(576)
		p.Match(MojoParserRIGHT_RIGHT_ARROWS)
	}
	p.SetState(580)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(577)
			p.Match(MojoParserEOL)
		}

		p.SetState(582)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(585)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(583)
			p.CodeBlock()
		}

	case 2:
		{
			p.SetState(584)
			p.Expression()
		}

	}

	return localctx
}

// IControlTransferStatementContext is an interface to support dynamic dispatch.
type IControlTransferStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControlTransferStatementContext differentiates from other interfaces.
	IsControlTransferStatementContext()
}

type ControlTransferStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControlTransferStatementContext() *ControlTransferStatementContext {
	var p = new(ControlTransferStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_controlTransferStatement
	return p
}

func (*ControlTransferStatementContext) IsControlTransferStatementContext() {}

func NewControlTransferStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ControlTransferStatementContext {
	var p = new(ControlTransferStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_controlTransferStatement

	return p
}

func (s *ControlTransferStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ControlTransferStatementContext) BreakStatement() IBreakStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBreakStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *ControlTransferStatementContext) ContinueStatement() IContinueStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContinueStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *ControlTransferStatementContext) ReturnStatement() IReturnStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *ControlTransferStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ControlTransferStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ControlTransferStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitControlTransferStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ControlTransferStatement() (localctx IControlTransferStatementContext) {
	this := p
	_ = this

	localctx = NewControlTransferStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, MojoParserRULE_controlTransferStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(590)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_BREAK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(587)
			p.BreakStatement()
		}

	case MojoParserKEYWORD_CONTINUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(588)
			p.ContinueStatement()
		}

	case MojoParserKEYWORD_RETURN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(589)
			p.ReturnStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_breakStatement
	return p
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) KEYWORD_BREAK() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_BREAK, 0)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BreakStatement() (localctx IBreakStatementContext) {
	this := p
	_ = this

	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, MojoParserRULE_breakStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(592)
		p.Match(MojoParserKEYWORD_BREAK)
	}

	return localctx
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_continueStatement
	return p
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) KEYWORD_CONTINUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONTINUE, 0)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ContinueStatement() (localctx IContinueStatementContext) {
	this := p
	_ = this

	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, MojoParserRULE_continueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(594)
		p.Match(MojoParserKEYWORD_CONTINUE)
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) KEYWORD_RETURN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_RETURN, 0)
}

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ReturnStatement() (localctx IReturnStatementContext) {
	this := p
	_ = this

	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, MojoParserRULE_returnStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(596)
		p.Match(MojoParserKEYWORD_RETURN)
	}
	p.SetState(598)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&180125310164855614) != 0 || (int64((_la-73)) & ^0x3f) == 0 && ((int64(1)<<(_la-73))&4087) != 0 {
		{
			p.SetState(597)
			p.Expression()
		}

	}

	return localctx
}

// IGenericParameterClauseContext is an interface to support dynamic dispatch.
type IGenericParameterClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericParameterClauseContext differentiates from other interfaces.
	IsGenericParameterClauseContext()
}

type GenericParameterClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericParameterClauseContext() *GenericParameterClauseContext {
	var p = new(GenericParameterClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericParameterClause
	return p
}

func (*GenericParameterClauseContext) IsGenericParameterClauseContext() {}

func NewGenericParameterClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParameterClauseContext {
	var p = new(GenericParameterClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericParameterClause

	return p
}

func (s *GenericParameterClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParameterClauseContext) LT() antlr.TerminalNode {
	return s.GetToken(MojoParserLT, 0)
}

func (s *GenericParameterClauseContext) GenericParameters() IGenericParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParametersContext)
}

func (s *GenericParameterClauseContext) GT() antlr.TerminalNode {
	return s.GetToken(MojoParserGT, 0)
}

func (s *GenericParameterClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericParameterClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericParameterClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParameterClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParameterClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericParameterClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericParameterClause() (localctx IGenericParameterClauseContext) {
	this := p
	_ = this

	localctx = NewGenericParameterClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, MojoParserRULE_genericParameterClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(600)
		p.Match(MojoParserLT)
	}
	p.SetState(604)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(601)
			p.Match(MojoParserEOL)
		}

		p.SetState(606)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(607)
		p.GenericParameters()
	}
	p.SetState(611)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(608)
			p.Match(MojoParserEOL)
		}

		p.SetState(613)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(614)
		p.Match(MojoParserGT)
	}

	return localctx
}

// IGenericParametersContext is an interface to support dynamic dispatch.
type IGenericParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericParametersContext differentiates from other interfaces.
	IsGenericParametersContext()
}

type GenericParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericParametersContext() *GenericParametersContext {
	var p = new(GenericParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericParameters
	return p
}

func (*GenericParametersContext) IsGenericParametersContext() {}

func NewGenericParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParametersContext {
	var p = new(GenericParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericParameters

	return p
}

func (s *GenericParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParametersContext) AllGenericParameter() []IGenericParameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGenericParameterContext); ok {
			len++
		}
	}

	tst := make([]IGenericParameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGenericParameterContext); ok {
			tst[i] = t.(IGenericParameterContext)
			i++
		}
	}

	return tst
}

func (s *GenericParametersContext) GenericParameter(i int) IGenericParameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParameterContext)
}

func (s *GenericParametersContext) AllEovWithDocument() []IEovWithDocumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovWithDocumentContext); ok {
			len++
		}
	}

	tst := make([]IEovWithDocumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovWithDocumentContext); ok {
			tst[i] = t.(IEovWithDocumentContext)
			i++
		}
	}

	return tst
}

func (s *GenericParametersContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovWithDocumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *GenericParametersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericParametersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericParameters() (localctx IGenericParametersContext) {
	this := p
	_ = this

	localctx = NewGenericParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, MojoParserRULE_genericParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(616)
		p.GenericParameter()
	}
	p.SetState(628)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(617)
				p.EovWithDocument()
			}
			p.SetState(621)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(618)
					p.Match(MojoParserEOL)
				}

				p.SetState(623)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(624)
				p.GenericParameter()
			}

		}
		p.SetState(630)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())
	}
	p.SetState(632)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(631)
			p.EovWithDocument()
		}

	}

	return localctx
}

// IGenericParameterContext is an interface to support dynamic dispatch.
type IGenericParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericParameterContext differentiates from other interfaces.
	IsGenericParameterContext()
}

type GenericParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericParameterContext() *GenericParameterContext {
	var p = new(GenericParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericParameter
	return p
}

func (*GenericParameterContext) IsGenericParameterContext() {}

func NewGenericParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParameterContext {
	var p = new(GenericParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericParameter

	return p
}

func (s *GenericParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParameterContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *GenericParameterContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(MojoParserELLIPSIS, 0)
}

func (s *GenericParameterContext) TypeAnnotation() ITypeAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *GenericParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericParameter() (localctx IGenericParameterContext) {
	this := p
	_ = this

	localctx = NewGenericParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, MojoParserRULE_genericParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(641)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(634)
			p.TypeName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(635)
			p.TypeName()
		}
		{
			p.SetState(636)
			p.Match(MojoParserELLIPSIS)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(638)
			p.TypeName()
		}
		{
			p.SetState(639)
			p.TypeAnnotation()
		}

	}

	return localctx
}

// IGenericArgumentClauseContext is an interface to support dynamic dispatch.
type IGenericArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericArgumentClauseContext differentiates from other interfaces.
	IsGenericArgumentClauseContext()
}

type GenericArgumentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericArgumentClauseContext() *GenericArgumentClauseContext {
	var p = new(GenericArgumentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericArgumentClause
	return p
}

func (*GenericArgumentClauseContext) IsGenericArgumentClauseContext() {}

func NewGenericArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericArgumentClauseContext {
	var p = new(GenericArgumentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericArgumentClause

	return p
}

func (s *GenericArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericArgumentClauseContext) LT() antlr.TerminalNode {
	return s.GetToken(MojoParserLT, 0)
}

func (s *GenericArgumentClauseContext) GenericArguments() IGenericArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentsContext)
}

func (s *GenericArgumentClauseContext) GT() antlr.TerminalNode {
	return s.GetToken(MojoParserGT, 0)
}

func (s *GenericArgumentClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericArgumentClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericArgumentClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericArgumentClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericArgumentClause() (localctx IGenericArgumentClauseContext) {
	this := p
	_ = this

	localctx = NewGenericArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, MojoParserRULE_genericArgumentClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(643)
		p.Match(MojoParserLT)
	}
	p.SetState(647)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(644)
			p.Match(MojoParserEOL)
		}

		p.SetState(649)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(650)
		p.GenericArguments()
	}
	p.SetState(654)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(651)
			p.Match(MojoParserEOL)
		}

		p.SetState(656)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(657)
		p.Match(MojoParserGT)
	}

	return localctx
}

// IGenericArgumentsContext is an interface to support dynamic dispatch.
type IGenericArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericArgumentsContext differentiates from other interfaces.
	IsGenericArgumentsContext()
}

type GenericArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericArgumentsContext() *GenericArgumentsContext {
	var p = new(GenericArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericArguments
	return p
}

func (*GenericArgumentsContext) IsGenericArgumentsContext() {}

func NewGenericArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericArgumentsContext {
	var p = new(GenericArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericArguments

	return p
}

func (s *GenericArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericArgumentsContext) AllGenericArgument() []IGenericArgumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGenericArgumentContext); ok {
			len++
		}
	}

	tst := make([]IGenericArgumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGenericArgumentContext); ok {
			tst[i] = t.(IGenericArgumentContext)
			i++
		}
	}

	return tst
}

func (s *GenericArgumentsContext) GenericArgument(i int) IGenericArgumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericArgumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentContext)
}

func (s *GenericArgumentsContext) AllEov() []IEovContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovContext); ok {
			len++
		}
	}

	tst := make([]IEovContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovContext); ok {
			tst[i] = t.(IEovContext)
			i++
		}
	}

	return tst
}

func (s *GenericArgumentsContext) Eov(i int) IEovContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *GenericArgumentsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericArgumentsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericArguments() (localctx IGenericArgumentsContext) {
	this := p
	_ = this

	localctx = NewGenericArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, MojoParserRULE_genericArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(659)
		p.GenericArgument()
	}
	p.SetState(671)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(660)
				p.Eov()
			}
			p.SetState(664)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(661)
					p.Match(MojoParserEOL)
				}

				p.SetState(666)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(667)
				p.GenericArgument()
			}

		}
		p.SetState(673)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())
	}

	return localctx
}

// IGenericArgumentContext is an interface to support dynamic dispatch.
type IGenericArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericArgumentContext differentiates from other interfaces.
	IsGenericArgumentContext()
}

type GenericArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericArgumentContext() *GenericArgumentContext {
	var p = new(GenericArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericArgument
	return p
}

func (*GenericArgumentContext) IsGenericArgumentContext() {}

func NewGenericArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericArgumentContext {
	var p = new(GenericArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericArgument

	return p
}

func (s *GenericArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericArgumentContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *GenericArgumentContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *GenericArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericArgument() (localctx IGenericArgumentContext) {
	this := p
	_ = this

	localctx = NewGenericArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, MojoParserRULE_genericArgument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(674)
		p.type_(0)
	}
	p.SetState(676)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(675)
			p.Attributes()
		}

	}

	return localctx
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) PackageDeclaration() IPackageDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageDeclarationContext)
}

func (s *DeclarationContext) ImportDeclaration() IImportDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportDeclarationContext)
}

func (s *DeclarationContext) ConstantDeclaration() IConstantDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantDeclarationContext)
}

func (s *DeclarationContext) VariableDeclaration() IVariableDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVariableDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *DeclarationContext) TypeAliasDeclaration() ITypeAliasDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAliasDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAliasDeclarationContext)
}

func (s *DeclarationContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *DeclarationContext) EnumDeclaration() IEnumDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumDeclarationContext)
}

func (s *DeclarationContext) StructDeclaration() IStructDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructDeclarationContext)
}

func (s *DeclarationContext) InterfaceDeclaration() IInterfaceDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceDeclarationContext)
}

func (s *DeclarationContext) AttributeDeclaration() IAttributeDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeDeclarationContext)
}

func (s *DeclarationContext) AttributeAliasDeclaration() IAttributeAliasDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeAliasDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeAliasDeclarationContext)
}

func (s *DeclarationContext) Document() IDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *DeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *DeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *DeclarationContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Declaration() (localctx IDeclarationContext) {
	this := p
	_ = this

	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, MojoParserRULE_declaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(681)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLINE_DOCUMENT {
		{
			p.SetState(678)
			p.Document()
		}
		{
			p.SetState(679)
			p.Match(MojoParserEOL)
		}

	}
	p.SetState(690)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(683)
			p.Attributes()
		}
		p.SetState(687)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(684)
				p.Match(MojoParserEOL)
			}

			p.SetState(689)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(703)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(692)
			p.PackageDeclaration()
		}

	case 2:
		{
			p.SetState(693)
			p.ImportDeclaration()
		}

	case 3:
		{
			p.SetState(694)
			p.ConstantDeclaration()
		}

	case 4:
		{
			p.SetState(695)
			p.VariableDeclaration()
		}

	case 5:
		{
			p.SetState(696)
			p.TypeAliasDeclaration()
		}

	case 6:
		{
			p.SetState(697)
			p.FunctionDeclaration()
		}

	case 7:
		{
			p.SetState(698)
			p.EnumDeclaration()
		}

	case 8:
		{
			p.SetState(699)
			p.StructDeclaration()
		}

	case 9:
		{
			p.SetState(700)
			p.InterfaceDeclaration()
		}

	case 10:
		{
			p.SetState(701)
			p.AttributeDeclaration()
		}

	case 11:
		{
			p.SetState(702)
			p.AttributeAliasDeclaration()
		}

	}

	return localctx
}

// ICodeBlockContext is an interface to support dynamic dispatch.
type ICodeBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCodeBlockContext differentiates from other interfaces.
	IsCodeBlockContext()
}

type CodeBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCodeBlockContext() *CodeBlockContext {
	var p = new(CodeBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_codeBlock
	return p
}

func (*CodeBlockContext) IsCodeBlockContext() {}

func NewCodeBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CodeBlockContext {
	var p = new(CodeBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_codeBlock

	return p
}

func (s *CodeBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *CodeBlockContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *CodeBlockContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *CodeBlockContext) Statements() IStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *CodeBlockContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *CodeBlockContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *CodeBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CodeBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CodeBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitCodeBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) CodeBlock() (localctx ICodeBlockContext) {
	this := p
	_ = this

	localctx = NewCodeBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, MojoParserRULE_codeBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(705)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(713)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext()) == 1 {
		p.SetState(709)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(706)
				p.Match(MojoParserEOL)
			}

			p.SetState(711)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(712)
			p.Statements()
		}

	}
	p.SetState(718)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(715)
			p.Match(MojoParserEOL)
		}

		p.SetState(720)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(721)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IPackageDeclarationContext is an interface to support dynamic dispatch.
type IPackageDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageDeclarationContext differentiates from other interfaces.
	IsPackageDeclarationContext()
}

type PackageDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageDeclarationContext() *PackageDeclarationContext {
	var p = new(PackageDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_packageDeclaration
	return p
}

func (*PackageDeclarationContext) IsPackageDeclarationContext() {}

func NewPackageDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageDeclarationContext {
	var p = new(PackageDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_packageDeclaration

	return p
}

func (s *PackageDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageDeclarationContext) KEYWORD_PACKAGE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_PACKAGE, 0)
}

func (s *PackageDeclarationContext) PackageIdentifier() IPackageIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageIdentifierContext)
}

func (s *PackageDeclarationContext) ObjectLiteral() IObjectLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *PackageDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *PackageDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *PackageDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPackageDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PackageDeclaration() (localctx IPackageDeclarationContext) {
	this := p
	_ = this

	localctx = NewPackageDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, MojoParserRULE_packageDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(723)
		p.Match(MojoParserKEYWORD_PACKAGE)
	}
	{
		p.SetState(724)
		p.PackageIdentifier()
	}
	p.SetState(732)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) == 1 {
		p.SetState(728)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(725)
				p.Match(MojoParserEOL)
			}

			p.SetState(730)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(731)
			p.ObjectLiteral()
		}

	}

	return localctx
}

// IPackageIdentifierContext is an interface to support dynamic dispatch.
type IPackageIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageIdentifierContext differentiates from other interfaces.
	IsPackageIdentifierContext()
}

type PackageIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageIdentifierContext() *PackageIdentifierContext {
	var p = new(PackageIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_packageIdentifier
	return p
}

func (*PackageIdentifierContext) IsPackageIdentifierContext() {}

func NewPackageIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageIdentifierContext {
	var p = new(PackageIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_packageIdentifier

	return p
}

func (s *PackageIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageIdentifierContext) AllPackageName() []IPackageNameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPackageNameContext); ok {
			len++
		}
	}

	tst := make([]IPackageNameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPackageNameContext); ok {
			tst[i] = t.(IPackageNameContext)
			i++
		}
	}

	return tst
}

func (s *PackageIdentifierContext) PackageName(i int) IPackageNameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageNameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageNameContext)
}

func (s *PackageIdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *PackageIdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *PackageIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPackageIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PackageIdentifier() (localctx IPackageIdentifierContext) {
	this := p
	_ = this

	localctx = NewPackageIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, MojoParserRULE_packageIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(734)
		p.PackageName()
	}
	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(735)
				p.Match(MojoParserDOT)
			}
			{
				p.SetState(736)
				p.PackageName()
			}

		}
		p.SetState(741)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())
	}

	return localctx
}

// IPackageNameContext is an interface to support dynamic dispatch.
type IPackageNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageNameContext differentiates from other interfaces.
	IsPackageNameContext()
}

type PackageNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageNameContext() *PackageNameContext {
	var p = new(PackageNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_packageName
	return p
}

func (*PackageNameContext) IsPackageNameContext() {}

func NewPackageNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageNameContext {
	var p = new(PackageNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_packageName

	return p
}

func (s *PackageNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageNameContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *PackageNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPackageName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PackageName() (localctx IPackageNameContext) {
	this := p
	_ = this

	localctx = NewPackageNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, MojoParserRULE_packageName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(742)
		p.Match(MojoParserVALUE_IDENTIFIER)
	}

	return localctx
}

// IImportDeclarationContext is an interface to support dynamic dispatch.
type IImportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportDeclarationContext differentiates from other interfaces.
	IsImportDeclarationContext()
}

type ImportDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclarationContext() *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importDeclaration
	return p
}

func (*ImportDeclarationContext) IsImportDeclarationContext() {}

func NewImportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importDeclaration

	return p
}

func (s *ImportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclarationContext) KEYWORD_IMPORT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IMPORT, 0)
}

func (s *ImportDeclarationContext) ImportPath() IImportPathContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportPathContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportPathContext)
}

func (s *ImportDeclarationContext) ImportAllClause() IImportAllClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportAllClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportAllClauseContext)
}

func (s *ImportDeclarationContext) ImportValueAsClause() IImportValueAsClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportValueAsClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportValueAsClauseContext)
}

func (s *ImportDeclarationContext) ImportTypeClause() IImportTypeClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportTypeClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportTypeClauseContext)
}

func (s *ImportDeclarationContext) ImportGroupClause() IImportGroupClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportGroupClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportGroupClauseContext)
}

func (s *ImportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportDeclaration() (localctx IImportDeclarationContext) {
	this := p
	_ = this

	localctx = NewImportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, MojoParserRULE_importDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(744)
		p.Match(MojoParserKEYWORD_IMPORT)
	}
	{
		p.SetState(745)
		p.ImportPath()
	}
	p.SetState(750)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(746)
			p.ImportAllClause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(747)
			p.ImportValueAsClause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(748)
			p.ImportTypeClause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(749)
			p.ImportGroupClause()
		}

	}

	return localctx
}

// IImportPathContext is an interface to support dynamic dispatch.
type IImportPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportPathContext differentiates from other interfaces.
	IsImportPathContext()
}

type ImportPathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportPathContext() *ImportPathContext {
	var p = new(ImportPathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importPath
	return p
}

func (*ImportPathContext) IsImportPathContext() {}

func NewImportPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportPathContext {
	var p = new(ImportPathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importPath

	return p
}

func (s *ImportPathContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportPathContext) AllImportPathIdentifier() []IImportPathIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImportPathIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IImportPathIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImportPathIdentifierContext); ok {
			tst[i] = t.(IImportPathIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ImportPathContext) ImportPathIdentifier(i int) IImportPathIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportPathIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportPathIdentifierContext)
}

func (s *ImportPathContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *ImportPathContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *ImportPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportPathContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportPath(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportPath() (localctx IImportPathContext) {
	this := p
	_ = this

	localctx = NewImportPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, MojoParserRULE_importPath)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(752)
		p.ImportPathIdentifier()
	}
	p.SetState(757)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(753)
				p.Match(MojoParserDOT)
			}
			{
				p.SetState(754)
				p.ImportPathIdentifier()
			}

		}
		p.SetState(759)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext())
	}

	return localctx
}

// IImportPathIdentifierContext is an interface to support dynamic dispatch.
type IImportPathIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportPathIdentifierContext differentiates from other interfaces.
	IsImportPathIdentifierContext()
}

type ImportPathIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportPathIdentifierContext() *ImportPathIdentifierContext {
	var p = new(ImportPathIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importPathIdentifier
	return p
}

func (*ImportPathIdentifierContext) IsImportPathIdentifierContext() {}

func NewImportPathIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportPathIdentifierContext {
	var p = new(ImportPathIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importPathIdentifier

	return p
}

func (s *ImportPathIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportPathIdentifierContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *ImportPathIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportPathIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportPathIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportPathIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportPathIdentifier() (localctx IImportPathIdentifierContext) {
	this := p
	_ = this

	localctx = NewImportPathIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, MojoParserRULE_importPathIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(760)
		p.DeclarationIdentifier()
	}

	return localctx
}

// IImportAllClauseContext is an interface to support dynamic dispatch.
type IImportAllClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportAllClauseContext differentiates from other interfaces.
	IsImportAllClauseContext()
}

type ImportAllClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportAllClauseContext() *ImportAllClauseContext {
	var p = new(ImportAllClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importAllClause
	return p
}

func (*ImportAllClauseContext) IsImportAllClauseContext() {}

func NewImportAllClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportAllClauseContext {
	var p = new(ImportAllClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importAllClause

	return p
}

func (s *ImportAllClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportAllClauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImportAllClauseContext) STAR() antlr.TerminalNode {
	return s.GetToken(MojoParserSTAR, 0)
}

func (s *ImportAllClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportAllClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportAllClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportAllClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportAllClause() (localctx IImportAllClauseContext) {
	this := p
	_ = this

	localctx = NewImportAllClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, MojoParserRULE_importAllClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(762)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(763)
		p.Match(MojoParserSTAR)
	}

	return localctx
}

// IImportValueAsClauseContext is an interface to support dynamic dispatch.
type IImportValueAsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportValueAsClauseContext differentiates from other interfaces.
	IsImportValueAsClauseContext()
}

type ImportValueAsClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportValueAsClauseContext() *ImportValueAsClauseContext {
	var p = new(ImportValueAsClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importValueAsClause
	return p
}

func (*ImportValueAsClauseContext) IsImportValueAsClauseContext() {}

func NewImportValueAsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportValueAsClauseContext {
	var p = new(ImportValueAsClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importValueAsClause

	return p
}

func (s *ImportValueAsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportValueAsClauseContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *ImportValueAsClauseContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *ImportValueAsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportValueAsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportValueAsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportValueAsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportValueAsClause() (localctx IImportValueAsClauseContext) {
	this := p
	_ = this

	localctx = NewImportValueAsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, MojoParserRULE_importValueAsClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(765)
		p.Match(MojoParserKEYWORD_AS)
	}
	{
		p.SetState(766)
		p.DeclarationIdentifier()
	}

	return localctx
}

// IImportTypeClauseContext is an interface to support dynamic dispatch.
type IImportTypeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportTypeClauseContext differentiates from other interfaces.
	IsImportTypeClauseContext()
}

type ImportTypeClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportTypeClauseContext() *ImportTypeClauseContext {
	var p = new(ImportTypeClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importTypeClause
	return p
}

func (*ImportTypeClauseContext) IsImportTypeClauseContext() {}

func NewImportTypeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportTypeClauseContext {
	var p = new(ImportTypeClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importTypeClause

	return p
}

func (s *ImportTypeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportTypeClauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImportTypeClauseContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ImportTypeClauseContext) ImportTypeAsClause() IImportTypeAsClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportTypeAsClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportTypeAsClauseContext)
}

func (s *ImportTypeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportTypeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportTypeClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportTypeClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportTypeClause() (localctx IImportTypeClauseContext) {
	this := p
	_ = this

	localctx = NewImportTypeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, MojoParserRULE_importTypeClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(768)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(769)
		p.TypeName()
	}
	p.SetState(771)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_AS {
		{
			p.SetState(770)
			p.ImportTypeAsClause()
		}

	}

	return localctx
}

// IImportTypeAsClauseContext is an interface to support dynamic dispatch.
type IImportTypeAsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportTypeAsClauseContext differentiates from other interfaces.
	IsImportTypeAsClauseContext()
}

type ImportTypeAsClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportTypeAsClauseContext() *ImportTypeAsClauseContext {
	var p = new(ImportTypeAsClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importTypeAsClause
	return p
}

func (*ImportTypeAsClauseContext) IsImportTypeAsClauseContext() {}

func NewImportTypeAsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportTypeAsClauseContext {
	var p = new(ImportTypeAsClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importTypeAsClause

	return p
}

func (s *ImportTypeAsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportTypeAsClauseContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *ImportTypeAsClauseContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ImportTypeAsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportTypeAsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportTypeAsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportTypeAsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportTypeAsClause() (localctx IImportTypeAsClauseContext) {
	this := p
	_ = this

	localctx = NewImportTypeAsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, MojoParserRULE_importTypeAsClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(773)
		p.Match(MojoParserKEYWORD_AS)
	}
	{
		p.SetState(774)
		p.TypeName()
	}

	return localctx
}

// IImportGroupClauseContext is an interface to support dynamic dispatch.
type IImportGroupClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportGroupClauseContext differentiates from other interfaces.
	IsImportGroupClauseContext()
}

type ImportGroupClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportGroupClauseContext() *ImportGroupClauseContext {
	var p = new(ImportGroupClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importGroupClause
	return p
}

func (*ImportGroupClauseContext) IsImportGroupClauseContext() {}

func NewImportGroupClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportGroupClauseContext {
	var p = new(ImportGroupClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importGroupClause

	return p
}

func (s *ImportGroupClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportGroupClauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImportGroupClauseContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *ImportGroupClauseContext) ImportGroup() IImportGroupContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportGroupContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportGroupContext)
}

func (s *ImportGroupClauseContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *ImportGroupClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ImportGroupClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ImportGroupClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportGroupClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportGroupClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportGroupClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportGroupClause() (localctx IImportGroupClauseContext) {
	this := p
	_ = this

	localctx = NewImportGroupClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, MojoParserRULE_importGroupClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(776)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(777)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(781)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(778)
			p.Match(MojoParserEOL)
		}

		p.SetState(783)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(784)
		p.ImportGroup()
	}
	p.SetState(788)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(785)
			p.Match(MojoParserEOL)
		}

		p.SetState(790)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(791)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IImportGroupContext is an interface to support dynamic dispatch.
type IImportGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportGroupContext differentiates from other interfaces.
	IsImportGroupContext()
}

type ImportGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportGroupContext() *ImportGroupContext {
	var p = new(ImportGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importGroup
	return p
}

func (*ImportGroupContext) IsImportGroupContext() {}

func NewImportGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportGroupContext {
	var p = new(ImportGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importGroup

	return p
}

func (s *ImportGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportGroupContext) AllImportValue() []IImportValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImportValueContext); ok {
			len++
		}
	}

	tst := make([]IImportValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImportValueContext); ok {
			tst[i] = t.(IImportValueContext)
			i++
		}
	}

	return tst
}

func (s *ImportGroupContext) ImportValue(i int) IImportValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportValueContext)
}

func (s *ImportGroupContext) AllImportType() []IImportTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImportTypeContext); ok {
			len++
		}
	}

	tst := make([]IImportTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImportTypeContext); ok {
			tst[i] = t.(IImportTypeContext)
			i++
		}
	}

	return tst
}

func (s *ImportGroupContext) ImportType(i int) IImportTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportTypeContext)
}

func (s *ImportGroupContext) AllEov() []IEovContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovContext); ok {
			len++
		}
	}

	tst := make([]IEovContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovContext); ok {
			tst[i] = t.(IEovContext)
			i++
		}
	}

	return tst
}

func (s *ImportGroupContext) Eov(i int) IEovContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ImportGroupContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ImportGroupContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ImportGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportGroup() (localctx IImportGroupContext) {
	this := p
	_ = this

	localctx = NewImportGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, MojoParserRULE_importGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(795)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_XOR, MojoParserVALUE_IDENTIFIER:
		{
			p.SetState(793)
			p.ImportValue()
		}

	case MojoParserTYPE_IDENTIFIER:
		{
			p.SetState(794)
			p.ImportType()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(810)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(797)
				p.Eov()
			}
			p.SetState(801)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(798)
					p.Match(MojoParserEOL)
				}

				p.SetState(803)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(806)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_XOR, MojoParserVALUE_IDENTIFIER:
				{
					p.SetState(804)
					p.ImportValue()
				}

			case MojoParserTYPE_IDENTIFIER:
				{
					p.SetState(805)
					p.ImportType()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(812)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext())
	}
	p.SetState(814)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(813)
			p.Eov()
		}

	}

	return localctx
}

// IImportValueContext is an interface to support dynamic dispatch.
type IImportValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportValueContext differentiates from other interfaces.
	IsImportValueContext()
}

type ImportValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportValueContext() *ImportValueContext {
	var p = new(ImportValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importValue
	return p
}

func (*ImportValueContext) IsImportValueContext() {}

func NewImportValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportValueContext {
	var p = new(ImportValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importValue

	return p
}

func (s *ImportValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportValueContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *ImportValueContext) ImportValueAsClause() IImportValueAsClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportValueAsClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportValueAsClauseContext)
}

func (s *ImportValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportValue() (localctx IImportValueContext) {
	this := p
	_ = this

	localctx = NewImportValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, MojoParserRULE_importValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(816)
		p.DeclarationIdentifier()
	}
	p.SetState(818)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_AS {
		{
			p.SetState(817)
			p.ImportValueAsClause()
		}

	}

	return localctx
}

// IImportTypeContext is an interface to support dynamic dispatch.
type IImportTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportTypeContext differentiates from other interfaces.
	IsImportTypeContext()
}

type ImportTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportTypeContext() *ImportTypeContext {
	var p = new(ImportTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importType
	return p
}

func (*ImportTypeContext) IsImportTypeContext() {}

func NewImportTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportTypeContext {
	var p = new(ImportTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importType

	return p
}

func (s *ImportTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportTypeContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ImportTypeContext) ImportTypeAsClause() IImportTypeAsClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportTypeAsClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportTypeAsClauseContext)
}

func (s *ImportTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportType() (localctx IImportTypeContext) {
	this := p
	_ = this

	localctx = NewImportTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, MojoParserRULE_importType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(820)
		p.TypeName()
	}
	p.SetState(822)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_AS {
		{
			p.SetState(821)
			p.ImportTypeAsClause()
		}

	}

	return localctx
}

// IConstantDeclarationContext is an interface to support dynamic dispatch.
type IConstantDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantDeclarationContext differentiates from other interfaces.
	IsConstantDeclarationContext()
}

type ConstantDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantDeclarationContext() *ConstantDeclarationContext {
	var p = new(ConstantDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_constantDeclaration
	return p
}

func (*ConstantDeclarationContext) IsConstantDeclarationContext() {}

func NewConstantDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantDeclarationContext {
	var p = new(ConstantDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_constantDeclaration

	return p
}

func (s *ConstantDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantDeclarationContext) KEYWORD_CONST() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONST, 0)
}

func (s *ConstantDeclarationContext) PatternInitializers() IPatternInitializersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternInitializersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternInitializersContext)
}

func (s *ConstantDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitConstantDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ConstantDeclaration() (localctx IConstantDeclarationContext) {
	this := p
	_ = this

	localctx = NewConstantDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, MojoParserRULE_constantDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(824)
		p.Match(MojoParserKEYWORD_CONST)
	}
	{
		p.SetState(825)
		p.PatternInitializers()
	}

	return localctx
}

// IPatternInitializersContext is an interface to support dynamic dispatch.
type IPatternInitializersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPatternInitializersContext differentiates from other interfaces.
	IsPatternInitializersContext()
}

type PatternInitializersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternInitializersContext() *PatternInitializersContext {
	var p = new(PatternInitializersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_patternInitializers
	return p
}

func (*PatternInitializersContext) IsPatternInitializersContext() {}

func NewPatternInitializersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternInitializersContext {
	var p = new(PatternInitializersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_patternInitializers

	return p
}

func (s *PatternInitializersContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternInitializersContext) AllPatternInitializer() []IPatternInitializerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPatternInitializerContext); ok {
			len++
		}
	}

	tst := make([]IPatternInitializerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPatternInitializerContext); ok {
			tst[i] = t.(IPatternInitializerContext)
			i++
		}
	}

	return tst
}

func (s *PatternInitializersContext) PatternInitializer(i int) IPatternInitializerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternInitializerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternInitializerContext)
}

func (s *PatternInitializersContext) AllEov() []IEovContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovContext); ok {
			len++
		}
	}

	tst := make([]IEovContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovContext); ok {
			tst[i] = t.(IEovContext)
			i++
		}
	}

	return tst
}

func (s *PatternInitializersContext) Eov(i int) IEovContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *PatternInitializersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *PatternInitializersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *PatternInitializersContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *PatternInitializersContext) AllDocumentedPatternInitializer() []IDocumentedPatternInitializerContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDocumentedPatternInitializerContext); ok {
			len++
		}
	}

	tst := make([]IDocumentedPatternInitializerContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDocumentedPatternInitializerContext); ok {
			tst[i] = t.(IDocumentedPatternInitializerContext)
			i++
		}
	}

	return tst
}

func (s *PatternInitializersContext) DocumentedPatternInitializer(i int) IDocumentedPatternInitializerContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDocumentedPatternInitializerContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDocumentedPatternInitializerContext)
}

func (s *PatternInitializersContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *PatternInitializersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternInitializersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternInitializersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPatternInitializers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PatternInitializers() (localctx IPatternInitializersContext) {
	this := p
	_ = this

	localctx = NewPatternInitializersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, MojoParserRULE_patternInitializers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(875)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(827)
			p.PatternInitializer()
		}
		p.SetState(839)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(828)
					p.Eov()
				}
				p.SetState(832)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(829)
						p.Match(MojoParserEOL)
					}

					p.SetState(834)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(835)
					p.PatternInitializer()
				}

			}
			p.SetState(841)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(842)
			p.Match(MojoParserLCURLY)
		}
		p.SetState(846)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(843)
				p.Match(MojoParserEOL)
			}

			p.SetState(848)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(849)
			p.DocumentedPatternInitializer()
		}
		p.SetState(861)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(850)
					p.Eov()
				}
				p.SetState(854)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(851)
						p.Match(MojoParserEOL)
					}

					p.SetState(856)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(857)
					p.DocumentedPatternInitializer()
				}

			}
			p.SetState(863)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())
		}
		p.SetState(865)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(864)
				p.Eov()
			}

		}
		p.SetState(870)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(867)
				p.Match(MojoParserEOL)
			}

			p.SetState(872)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(873)
			p.Match(MojoParserRCURLY)
		}

	}

	return localctx
}

// IDocumentedPatternInitializerContext is an interface to support dynamic dispatch.
type IDocumentedPatternInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDocumentedPatternInitializerContext differentiates from other interfaces.
	IsDocumentedPatternInitializerContext()
}

type DocumentedPatternInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDocumentedPatternInitializerContext() *DocumentedPatternInitializerContext {
	var p = new(DocumentedPatternInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_documentedPatternInitializer
	return p
}

func (*DocumentedPatternInitializerContext) IsDocumentedPatternInitializerContext() {}

func NewDocumentedPatternInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DocumentedPatternInitializerContext {
	var p = new(DocumentedPatternInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_documentedPatternInitializer

	return p
}

func (s *DocumentedPatternInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *DocumentedPatternInitializerContext) PatternInitializer() IPatternInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternInitializerContext)
}

func (s *DocumentedPatternInitializerContext) Document() IDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *DocumentedPatternInitializerContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *DocumentedPatternInitializerContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *DocumentedPatternInitializerContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *DocumentedPatternInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DocumentedPatternInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DocumentedPatternInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDocumentedPatternInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) DocumentedPatternInitializer() (localctx IDocumentedPatternInitializerContext) {
	this := p
	_ = this

	localctx = NewDocumentedPatternInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, MojoParserRULE_documentedPatternInitializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(880)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLINE_DOCUMENT {
		{
			p.SetState(877)
			p.Document()
		}
		{
			p.SetState(878)
			p.Match(MojoParserEOL)
		}

	}
	p.SetState(885)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(882)
			p.Attributes()
		}
		{
			p.SetState(883)
			p.Match(MojoParserEOL)
		}

	}
	{
		p.SetState(887)
		p.PatternInitializer()
	}

	return localctx
}

// IPatternInitializerContext is an interface to support dynamic dispatch.
type IPatternInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPatternInitializerContext differentiates from other interfaces.
	IsPatternInitializerContext()
}

type PatternInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternInitializerContext() *PatternInitializerContext {
	var p = new(PatternInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_patternInitializer
	return p
}

func (*PatternInitializerContext) IsPatternInitializerContext() {}

func NewPatternInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternInitializerContext {
	var p = new(PatternInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_patternInitializer

	return p
}

func (s *PatternInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternInitializerContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *PatternInitializerContext) Initializer() IInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *PatternInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPatternInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PatternInitializer() (localctx IPatternInitializerContext) {
	this := p
	_ = this

	localctx = NewPatternInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, MojoParserRULE_patternInitializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(889)
		p.pattern(0)
	}
	p.SetState(891)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserEQUAL {
		{
			p.SetState(890)
			p.Initializer()
		}

	}

	return localctx
}

// IInitializerContext is an interface to support dynamic dispatch.
type IInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerContext differentiates from other interfaces.
	IsInitializerContext()
}

type InitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerContext() *InitializerContext {
	var p = new(InitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_initializer
	return p
}

func (*InitializerContext) IsInitializerContext() {}

func NewInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerContext {
	var p = new(InitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_initializer

	return p
}

func (s *InitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerContext) AssignmentOperator() IAssignmentOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *InitializerContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InitializerContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InitializerContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Initializer() (localctx IInitializerContext) {
	this := p
	_ = this

	localctx = NewInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, MojoParserRULE_initializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(893)
		p.AssignmentOperator()
	}
	p.SetState(897)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(894)
			p.Match(MojoParserEOL)
		}

		p.SetState(899)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(900)
		p.Expression()
	}

	return localctx
}

// IVariableDeclarationContext is an interface to support dynamic dispatch.
type IVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationContext differentiates from other interfaces.
	IsVariableDeclarationContext()
}

type VariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationContext() *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_variableDeclaration
	return p
}

func (*VariableDeclarationContext) IsVariableDeclarationContext() {}

func NewVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_variableDeclaration

	return p
}

func (s *VariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationContext) KEYWORD_VAR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_VAR, 0)
}

func (s *VariableDeclarationContext) PatternInitializers() IPatternInitializersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternInitializersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternInitializersContext)
}

func (s *VariableDeclarationContext) IdentifierPattern() IIdentifierPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierPatternContext)
}

func (s *VariableDeclarationContext) COLON_EQUAL() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON_EQUAL, 0)
}

func (s *VariableDeclarationContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitVariableDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) VariableDeclaration() (localctx IVariableDeclarationContext) {
	this := p
	_ = this

	localctx = NewVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, MojoParserRULE_variableDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(908)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_VAR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(902)
			p.Match(MojoParserKEYWORD_VAR)
		}
		{
			p.SetState(903)
			p.PatternInitializers()
		}

	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_XOR, MojoParserVALUE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(904)
			p.IdentifierPattern()
		}
		{
			p.SetState(905)
			p.Match(MojoParserCOLON_EQUAL)
		}
		{
			p.SetState(906)
			p.Expression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeAliasDeclarationContext is an interface to support dynamic dispatch.
type ITypeAliasDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasDeclarationContext differentiates from other interfaces.
	IsTypeAliasDeclarationContext()
}

type TypeAliasDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasDeclarationContext() *TypeAliasDeclarationContext {
	var p = new(TypeAliasDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeAliasDeclaration
	return p
}

func (*TypeAliasDeclarationContext) IsTypeAliasDeclarationContext() {}

func NewTypeAliasDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasDeclarationContext {
	var p = new(TypeAliasDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeAliasDeclaration

	return p
}

func (s *TypeAliasDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasDeclarationContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *TypeAliasDeclarationContext) TypeAliasName() ITypeAliasNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAliasNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAliasNameContext)
}

func (s *TypeAliasDeclarationContext) TypeAliasAssignment() ITypeAliasAssignmentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAliasAssignmentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAliasAssignmentContext)
}

func (s *TypeAliasDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParameterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *TypeAliasDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypeAliasDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypeAliasDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeAliasDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeAliasDeclaration() (localctx ITypeAliasDeclarationContext) {
	this := p
	_ = this

	localctx = NewTypeAliasDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, MojoParserRULE_typeAliasDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(910)
		p.Match(MojoParserKEYWORD_TYPE)
	}
	{
		p.SetState(911)
		p.TypeAliasName()
	}
	p.SetState(913)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(912)
			p.GenericParameterClause()
		}

	}
	p.SetState(918)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(915)
			p.Match(MojoParserEOL)
		}

		p.SetState(920)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(921)
		p.TypeAliasAssignment()
	}

	return localctx
}

// ITypeAliasNameContext is an interface to support dynamic dispatch.
type ITypeAliasNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasNameContext differentiates from other interfaces.
	IsTypeAliasNameContext()
}

type TypeAliasNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasNameContext() *TypeAliasNameContext {
	var p = new(TypeAliasNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeAliasName
	return p
}

func (*TypeAliasNameContext) IsTypeAliasNameContext() {}

func NewTypeAliasNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasNameContext {
	var p = new(TypeAliasNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeAliasName

	return p
}

func (s *TypeAliasNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasNameContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypeAliasNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeAliasName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeAliasName() (localctx ITypeAliasNameContext) {
	this := p
	_ = this

	localctx = NewTypeAliasNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, MojoParserRULE_typeAliasName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(923)
		p.TypeName()
	}

	return localctx
}

// ITypeAliasAssignmentContext is an interface to support dynamic dispatch.
type ITypeAliasAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasAssignmentContext differentiates from other interfaces.
	IsTypeAliasAssignmentContext()
}

type TypeAliasAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasAssignmentContext() *TypeAliasAssignmentContext {
	var p = new(TypeAliasAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeAliasAssignment
	return p
}

func (*TypeAliasAssignmentContext) IsTypeAliasAssignmentContext() {}

func NewTypeAliasAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasAssignmentContext {
	var p = new(TypeAliasAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeAliasAssignment

	return p
}

func (s *TypeAliasAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasAssignmentContext) AssignmentOperator() IAssignmentOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *TypeAliasAssignmentContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeAliasAssignmentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypeAliasAssignmentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypeAliasAssignmentContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TypeAliasAssignmentContext) FollowingDocument() IFollowingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *TypeAliasAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasAssignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeAliasAssignment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeAliasAssignment() (localctx ITypeAliasAssignmentContext) {
	this := p
	_ = this

	localctx = NewTypeAliasAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, MojoParserRULE_typeAliasAssignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(925)
		p.AssignmentOperator()
	}
	p.SetState(929)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(926)
			p.Match(MojoParserEOL)
		}

		p.SetState(931)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(932)
		p.type_(0)
	}
	p.SetState(934)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(933)
			p.Attributes()
		}

	}
	p.SetState(937)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(936)
			p.FollowingDocument()
		}

	}

	return localctx
}

// IFunctionDeclarationContext is an interface to support dynamic dispatch.
type IFunctionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclarationContext differentiates from other interfaces.
	IsFunctionDeclarationContext()
}

type FunctionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclarationContext() *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionDeclaration
	return p
}

func (*FunctionDeclarationContext) IsFunctionDeclarationContext() {}

func NewFunctionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionDeclaration

	return p
}

func (s *FunctionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclarationContext) KEYWORD_FUNC() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FUNC, 0)
}

func (s *FunctionDeclarationContext) FunctionName() IFunctionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *FunctionDeclarationContext) FunctionSignature() IFunctionSignatureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionSignatureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionSignatureContext)
}

func (s *FunctionDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParameterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *FunctionDeclarationContext) FunctionBody() IFunctionBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionDeclaration() (localctx IFunctionDeclarationContext) {
	this := p
	_ = this

	localctx = NewFunctionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, MojoParserRULE_functionDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(939)
		p.Match(MojoParserKEYWORD_FUNC)
	}
	{
		p.SetState(940)
		p.FunctionName()
	}
	p.SetState(942)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(941)
			p.GenericParameterClause()
		}

	}
	{
		p.SetState(944)
		p.FunctionSignature()
	}
	p.SetState(952)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext()) == 1 {
		p.SetState(948)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(945)
				p.Match(MojoParserEOL)
			}

			p.SetState(950)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(951)
			p.FunctionBody()
		}

	}

	return localctx
}

// IFunctionNameContext is an interface to support dynamic dispatch.
type IFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionNameContext differentiates from other interfaces.
	IsFunctionNameContext()
}

type FunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameContext() *FunctionNameContext {
	var p = new(FunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionName
	return p
}

func (*FunctionNameContext) IsFunctionNameContext() {}

func NewFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameContext {
	var p = new(FunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionName

	return p
}

func (s *FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *FunctionNameContext) Operator() IOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionName() (localctx IFunctionNameContext) {
	this := p
	_ = this

	localctx = NewFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, MojoParserRULE_functionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(956)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_XOR, MojoParserVALUE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(954)
			p.DeclarationIdentifier()
		}

	case MojoParserDOT, MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserOPERATOR_HEAD_OTHER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(955)
			p.Operator()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunctionSignatureContext is an interface to support dynamic dispatch.
type IFunctionSignatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionSignatureContext differentiates from other interfaces.
	IsFunctionSignatureContext()
}

type FunctionSignatureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionSignatureContext() *FunctionSignatureContext {
	var p = new(FunctionSignatureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionSignature
	return p
}

func (*FunctionSignatureContext) IsFunctionSignatureContext() {}

func NewFunctionSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionSignatureContext {
	var p = new(FunctionSignatureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionSignature

	return p
}

func (s *FunctionSignatureContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionSignatureContext) FunctionParameterClause() IFunctionParameterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionParameterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterClauseContext)
}

func (s *FunctionSignatureContext) FollowingDocument() IFollowingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *FunctionSignatureContext) FunctionResult() IFunctionResultContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionResultContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionResultContext)
}

func (s *FunctionSignatureContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionSignatureContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionSignatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionSignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionSignatureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionSignature(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionSignature() (localctx IFunctionSignatureContext) {
	this := p
	_ = this

	localctx = NewFunctionSignatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, MojoParserRULE_functionSignature)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(958)
		p.FunctionParameterClause()
	}
	p.SetState(960)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(959)
			p.FollowingDocument()
		}

	}
	p.SetState(969)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) == 1 {
		p.SetState(965)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(962)
				p.Match(MojoParserEOL)
			}

			p.SetState(967)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(968)
			p.FunctionResult()
		}

	}

	return localctx
}

// IFunctionResultContext is an interface to support dynamic dispatch.
type IFunctionResultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionResultContext differentiates from other interfaces.
	IsFunctionResultContext()
}

type FunctionResultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionResultContext() *FunctionResultContext {
	var p = new(FunctionResultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionResult
	return p
}

func (*FunctionResultContext) IsFunctionResultContext() {}

func NewFunctionResultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionResultContext {
	var p = new(FunctionResultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionResult

	return p
}

func (s *FunctionResultContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionResultContext) ArrowOperator() IArrowOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrowOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrowOperatorContext)
}

func (s *FunctionResultContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionResultContext) LabelIdentifier() ILabelIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *FunctionResultContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FunctionResultContext) FollowingDocument() IFollowingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *FunctionResultContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *FunctionResultContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionResultContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionResultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionResultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionResultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionResult(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionResult() (localctx IFunctionResultContext) {
	this := p
	_ = this

	localctx = NewFunctionResultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, MojoParserRULE_functionResult)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(971)
		p.ArrowOperator()
	}
	p.SetState(976)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(972)
			p.LabelIdentifier()
		}
		p.SetState(974)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserCOLON {
			{
				p.SetState(973)
				p.Match(MojoParserCOLON)
			}

		}

	}
	{
		p.SetState(978)
		p.type_(0)
	}
	p.SetState(980)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(979)
			p.Attributes()
		}

	}
	p.SetState(989)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) == 1 {
		p.SetState(985)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(982)
				p.Match(MojoParserEOL)
			}

			p.SetState(987)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(988)
			p.FollowingDocument()
		}

	}

	return localctx
}

// IFunctionBodyContext is an interface to support dynamic dispatch.
type IFunctionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionBodyContext differentiates from other interfaces.
	IsFunctionBodyContext()
}

type FunctionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBodyContext() *FunctionBodyContext {
	var p = new(FunctionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionBody
	return p
}

func (*FunctionBodyContext) IsFunctionBodyContext() {}

func NewFunctionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBodyContext {
	var p = new(FunctionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionBody

	return p
}

func (s *FunctionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *FunctionBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *FunctionBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *FunctionBodyContext) Statements() IStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *FunctionBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionBody() (localctx IFunctionBodyContext) {
	this := p
	_ = this

	localctx = NewFunctionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, MojoParserRULE_functionBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(991)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(993)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
		{
			p.SetState(992)
			p.FollowingDocument()
		}

	}
	p.SetState(1002)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) == 1 {
		p.SetState(998)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(995)
				p.Match(MojoParserEOL)
			}

			p.SetState(1000)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1001)
			p.Statements()
		}

	}
	p.SetState(1007)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1004)
			p.Match(MojoParserEOL)
		}

		p.SetState(1009)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1010)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IFunctionParameterClauseContext is an interface to support dynamic dispatch.
type IFunctionParameterClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParameterClauseContext differentiates from other interfaces.
	IsFunctionParameterClauseContext()
}

type FunctionParameterClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParameterClauseContext() *FunctionParameterClauseContext {
	var p = new(FunctionParameterClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionParameterClause
	return p
}

func (*FunctionParameterClauseContext) IsFunctionParameterClauseContext() {}

func NewFunctionParameterClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParameterClauseContext {
	var p = new(FunctionParameterClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionParameterClause

	return p
}

func (s *FunctionParameterClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParameterClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *FunctionParameterClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *FunctionParameterClauseContext) FunctionParameters() IFunctionParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionParametersContext)
}

func (s *FunctionParameterClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionParameterClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionParameterClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParameterClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParameterClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionParameterClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionParameterClause() (localctx IFunctionParameterClauseContext) {
	this := p
	_ = this

	localctx = NewFunctionParameterClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, MojoParserRULE_functionParameterClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1030)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1012)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1013)
			p.Match(MojoParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1014)
			p.Match(MojoParserLPAREN)
		}
		p.SetState(1018)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1015)
				p.Match(MojoParserEOL)
			}

			p.SetState(1020)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1021)
			p.FunctionParameters()
		}
		p.SetState(1025)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1022)
				p.Match(MojoParserEOL)
			}

			p.SetState(1027)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1028)
			p.Match(MojoParserRPAREN)
		}

	}

	return localctx
}

// IFunctionParametersContext is an interface to support dynamic dispatch.
type IFunctionParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParametersContext differentiates from other interfaces.
	IsFunctionParametersContext()
}

type FunctionParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParametersContext() *FunctionParametersContext {
	var p = new(FunctionParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionParameters
	return p
}

func (*FunctionParametersContext) IsFunctionParametersContext() {}

func NewFunctionParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParametersContext {
	var p = new(FunctionParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionParameters

	return p
}

func (s *FunctionParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParametersContext) AllFunctionParameter() []IFunctionParameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionParameterContext); ok {
			len++
		}
	}

	tst := make([]IFunctionParameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionParameterContext); ok {
			tst[i] = t.(IFunctionParameterContext)
			i++
		}
	}

	return tst
}

func (s *FunctionParametersContext) FunctionParameter(i int) IFunctionParameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionParameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterContext)
}

func (s *FunctionParametersContext) AllEovWithDocument() []IEovWithDocumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovWithDocumentContext); ok {
			len++
		}
	}

	tst := make([]IEovWithDocumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovWithDocumentContext); ok {
			tst[i] = t.(IEovWithDocumentContext)
			i++
		}
	}

	return tst
}

func (s *FunctionParametersContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovWithDocumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *FunctionParametersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionParametersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionParameters() (localctx IFunctionParametersContext) {
	this := p
	_ = this

	localctx = NewFunctionParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, MojoParserRULE_functionParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1032)
		p.FunctionParameter()
	}
	p.SetState(1044)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1033)
				p.EovWithDocument()
			}
			p.SetState(1037)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1034)
					p.Match(MojoParserEOL)
				}

				p.SetState(1039)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1040)
				p.FunctionParameter()
			}

		}
		p.SetState(1046)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())
	}
	p.SetState(1048)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1047)
			p.EovWithDocument()
		}

	}

	return localctx
}

// IFunctionParameterContext is an interface to support dynamic dispatch.
type IFunctionParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParameterContext differentiates from other interfaces.
	IsFunctionParameterContext()
}

type FunctionParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParameterContext() *FunctionParameterContext {
	var p = new(FunctionParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionParameter
	return p
}

func (*FunctionParameterContext) IsFunctionParameterContext() {}

func NewFunctionParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParameterContext {
	var p = new(FunctionParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionParameter

	return p
}

func (s *FunctionParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParameterContext) LabelIdentifier() ILabelIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *FunctionParameterContext) TypeAnnotation() ITypeAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *FunctionParameterContext) Initializer() IInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *FunctionParameterContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionParameterContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionParameterContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionParameterContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(MojoParserELLIPSIS, 0)
}

func (s *FunctionParameterContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *FunctionParameterContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FunctionParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionParameter() (localctx IFunctionParameterContext) {
	this := p
	_ = this

	localctx = NewFunctionParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, MojoParserRULE_functionParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1070)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 110, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1050)
			p.LabelIdentifier()
		}
		{
			p.SetState(1051)
			p.TypeAnnotation()
		}
		p.SetState(1059)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) == 1 {
			p.SetState(1055)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1052)
					p.Match(MojoParserEOL)
				}

				p.SetState(1057)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1058)
				p.Initializer()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1061)
			p.LabelIdentifier()
		}
		p.SetState(1063)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserCOLON {
			{
				p.SetState(1062)
				p.Match(MojoParserCOLON)
			}

		}
		{
			p.SetState(1065)
			p.type_(0)
		}
		{
			p.SetState(1066)
			p.Match(MojoParserELLIPSIS)
		}
		p.SetState(1068)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserAT {
			{
				p.SetState(1067)
				p.Attributes()
			}

		}

	}

	return localctx
}

// IEnumDeclarationContext is an interface to support dynamic dispatch.
type IEnumDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumDeclarationContext differentiates from other interfaces.
	IsEnumDeclarationContext()
}

type EnumDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumDeclarationContext() *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumDeclaration
	return p
}

func (*EnumDeclarationContext) IsEnumDeclarationContext() {}

func NewEnumDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumDeclaration

	return p
}

func (s *EnumDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDeclarationContext) KEYWORD_ENUM() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ENUM, 0)
}

func (s *EnumDeclarationContext) EnumName() IEnumNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumNameContext)
}

func (s *EnumDeclarationContext) EnumBody() IEnumBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumBodyContext)
}

func (s *EnumDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParameterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *EnumDeclarationContext) TypeInheritanceClause() ITypeInheritanceClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeInheritanceClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceClauseContext)
}

func (s *EnumDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumDeclaration() (localctx IEnumDeclarationContext) {
	this := p
	_ = this

	localctx = NewEnumDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, MojoParserRULE_enumDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1072)
		p.Match(MojoParserKEYWORD_ENUM)
	}
	{
		p.SetState(1073)
		p.EnumName()
	}
	p.SetState(1075)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1074)
			p.GenericParameterClause()
		}

	}
	p.SetState(1084)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) == 1 {
		p.SetState(1080)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1077)
				p.Match(MojoParserEOL)
			}

			p.SetState(1082)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1083)
			p.TypeInheritanceClause()
		}

	}
	p.SetState(1089)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1086)
			p.Match(MojoParserEOL)
		}

		p.SetState(1091)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1092)
		p.EnumBody()
	}

	return localctx
}

// IEnumBodyContext is an interface to support dynamic dispatch.
type IEnumBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumBodyContext differentiates from other interfaces.
	IsEnumBodyContext()
}

type EnumBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumBodyContext() *EnumBodyContext {
	var p = new(EnumBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumBody
	return p
}

func (*EnumBodyContext) IsEnumBodyContext() {}

func NewEnumBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumBodyContext {
	var p = new(EnumBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumBody

	return p
}

func (s *EnumBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *EnumBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *EnumBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *EnumBodyContext) EnumMembers() IEnumMembersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumMembersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumMembersContext)
}

func (s *EnumBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumBody() (localctx IEnumBodyContext) {
	this := p
	_ = this

	localctx = NewEnumBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, MojoParserRULE_enumBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1094)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1096)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
		{
			p.SetState(1095)
			p.FollowingDocument()
		}

	}
	p.SetState(1105)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) == 1 {
		p.SetState(1101)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1098)
				p.Match(MojoParserEOL)
			}

			p.SetState(1103)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1104)
			p.EnumMembers()
		}

	}
	p.SetState(1110)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1107)
			p.Match(MojoParserEOL)
		}

		p.SetState(1112)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1113)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IEnumNameContext is an interface to support dynamic dispatch.
type IEnumNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumNameContext differentiates from other interfaces.
	IsEnumNameContext()
}

type EnumNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumNameContext() *EnumNameContext {
	var p = new(EnumNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumName
	return p
}

func (*EnumNameContext) IsEnumNameContext() {}

func NewEnumNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumNameContext {
	var p = new(EnumNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumName

	return p
}

func (s *EnumNameContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumNameContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *EnumNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumName() (localctx IEnumNameContext) {
	this := p
	_ = this

	localctx = NewEnumNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, MojoParserRULE_enumName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1115)
		p.TypeName()
	}

	return localctx
}

// IEnumMembersContext is an interface to support dynamic dispatch.
type IEnumMembersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumMembersContext differentiates from other interfaces.
	IsEnumMembersContext()
}

type EnumMembersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumMembersContext() *EnumMembersContext {
	var p = new(EnumMembersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumMembers
	return p
}

func (*EnumMembersContext) IsEnumMembersContext() {}

func NewEnumMembersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumMembersContext {
	var p = new(EnumMembersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumMembers

	return p
}

func (s *EnumMembersContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumMembersContext) AllEnumMember() []IEnumMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnumMemberContext); ok {
			len++
		}
	}

	tst := make([]IEnumMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnumMemberContext); ok {
			tst[i] = t.(IEnumMemberContext)
			i++
		}
	}

	return tst
}

func (s *EnumMembersContext) EnumMember(i int) IEnumMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumMemberContext)
}

func (s *EnumMembersContext) AllEovWithDocument() []IEovWithDocumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovWithDocumentContext); ok {
			len++
		}
	}

	tst := make([]IEovWithDocumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovWithDocumentContext); ok {
			tst[i] = t.(IEovWithDocumentContext)
			i++
		}
	}

	return tst
}

func (s *EnumMembersContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovWithDocumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *EnumMembersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumMembersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumMembersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumMembersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumMembersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumMembers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumMembers() (localctx IEnumMembersContext) {
	this := p
	_ = this

	localctx = NewEnumMembersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, MojoParserRULE_enumMembers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1117)
		p.EnumMember()
	}
	p.SetState(1129)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1118)
				p.EovWithDocument()
			}
			p.SetState(1122)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1119)
					p.Match(MojoParserEOL)
				}

				p.SetState(1124)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1125)
				p.EnumMember()
			}

		}
		p.SetState(1131)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext())
	}
	p.SetState(1133)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1132)
			p.EovWithDocument()
		}

	}

	return localctx
}

// IEnumMemberContext is an interface to support dynamic dispatch.
type IEnumMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumMemberContext differentiates from other interfaces.
	IsEnumMemberContext()
}

type EnumMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumMemberContext() *EnumMemberContext {
	var p = new(EnumMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumMember
	return p
}

func (*EnumMemberContext) IsEnumMemberContext() {}

func NewEnumMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumMemberContext {
	var p = new(EnumMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumMember

	return p
}

func (s *EnumMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumMemberContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *EnumMemberContext) Document() IDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *EnumMemberContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumMemberContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumMemberContext) AllAttributes() []IAttributesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributesContext); ok {
			len++
		}
	}

	tst := make([]IAttributesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributesContext); ok {
			tst[i] = t.(IAttributesContext)
			i++
		}
	}

	return tst
}

func (s *EnumMemberContext) Attributes(i int) IAttributesContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *EnumMemberContext) Initializer() IInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *EnumMemberContext) FreeFloatingDocument() IFreeFloatingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFreeFloatingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFreeFloatingDocumentContext)
}

func (s *EnumMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumMember() (localctx IEnumMemberContext) {
	this := p
	_ = this

	localctx = NewEnumMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, MojoParserRULE_enumMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1159)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 127, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1138)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserLINE_DOCUMENT {
			{
				p.SetState(1135)
				p.Document()
			}
			{
				p.SetState(1136)
				p.Match(MojoParserEOL)
			}

		}
		p.SetState(1143)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserAT {
			{
				p.SetState(1140)
				p.Attributes()
			}
			{
				p.SetState(1141)
				p.Match(MojoParserEOL)
			}

		}
		{
			p.SetState(1145)
			p.DeclarationIdentifier()
		}
		p.SetState(1147)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserAT {
			{
				p.SetState(1146)
				p.Attributes()
			}

		}
		p.SetState(1156)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) == 1 {
			p.SetState(1152)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1149)
					p.Match(MojoParserEOL)
				}

				p.SetState(1154)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1155)
				p.Initializer()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1158)
			p.FreeFloatingDocument()
		}

	}

	return localctx
}

// IStructDeclarationContext is an interface to support dynamic dispatch.
type IStructDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructDeclarationContext differentiates from other interfaces.
	IsStructDeclarationContext()
}

type StructDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructDeclarationContext() *StructDeclarationContext {
	var p = new(StructDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structDeclaration
	return p
}

func (*StructDeclarationContext) IsStructDeclarationContext() {}

func NewStructDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDeclarationContext {
	var p = new(StructDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structDeclaration

	return p
}

func (s *StructDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDeclarationContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *StructDeclarationContext) StructName() IStructNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructNameContext)
}

func (s *StructDeclarationContext) StructType() IStructTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructTypeContext)
}

func (s *StructDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParameterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *StructDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructDeclaration() (localctx IStructDeclarationContext) {
	this := p
	_ = this

	localctx = NewStructDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, MojoParserRULE_structDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1161)
		p.Match(MojoParserKEYWORD_TYPE)
	}
	{
		p.SetState(1162)
		p.StructName()
	}
	p.SetState(1164)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1163)
			p.GenericParameterClause()
		}

	}
	{
		p.SetState(1166)
		p.StructType()
	}

	return localctx
}

// IStructNameContext is an interface to support dynamic dispatch.
type IStructNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructNameContext differentiates from other interfaces.
	IsStructNameContext()
}

type StructNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructNameContext() *StructNameContext {
	var p = new(StructNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structName
	return p
}

func (*StructNameContext) IsStructNameContext() {}

func NewStructNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructNameContext {
	var p = new(StructNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structName

	return p
}

func (s *StructNameContext) GetParser() antlr.Parser { return s.parser }

func (s *StructNameContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *StructNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructName() (localctx IStructNameContext) {
	this := p
	_ = this

	localctx = NewStructNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, MojoParserRULE_structName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1168)
		p.TypeName()
	}

	return localctx
}

// IStructTypeContext is an interface to support dynamic dispatch.
type IStructTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructTypeContext differentiates from other interfaces.
	IsStructTypeContext()
}

type StructTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructTypeContext() *StructTypeContext {
	var p = new(StructTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structType
	return p
}

func (*StructTypeContext) IsStructTypeContext() {}

func NewStructTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructTypeContext {
	var p = new(StructTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structType

	return p
}

func (s *StructTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *StructTypeContext) TypeInheritanceClause() ITypeInheritanceClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeInheritanceClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceClauseContext)
}

func (s *StructTypeContext) StructBody() IStructBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructBodyContext)
}

func (s *StructTypeContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructTypeContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructType() (localctx IStructTypeContext) {
	this := p
	_ = this

	localctx = NewStructTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, MojoParserRULE_structType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1177)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 130, p.GetParserRuleContext()) == 1 {
		p.SetState(1173)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1170)
				p.Match(MojoParserEOL)
			}

			p.SetState(1175)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1176)
			p.TypeInheritanceClause()
		}

	}
	p.SetState(1186)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext()) == 1 {
		p.SetState(1182)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1179)
				p.Match(MojoParserEOL)
			}

			p.SetState(1184)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1185)
			p.StructBody()
		}

	}

	return localctx
}

// IStructBodyContext is an interface to support dynamic dispatch.
type IStructBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructBodyContext differentiates from other interfaces.
	IsStructBodyContext()
}

type StructBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructBodyContext() *StructBodyContext {
	var p = new(StructBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structBody
	return p
}

func (*StructBodyContext) IsStructBodyContext() {}

func NewStructBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructBodyContext {
	var p = new(StructBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structBody

	return p
}

func (s *StructBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *StructBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *StructBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *StructBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *StructBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructBodyContext) StructMembers() IStructMembersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructMembersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructMembersContext)
}

func (s *StructBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructBody() (localctx IStructBodyContext) {
	this := p
	_ = this

	localctx = NewStructBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, MojoParserRULE_structBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1188)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1192)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
		{
			p.SetState(1189)
			p.FollowingDocument()
		}
		{
			p.SetState(1190)
			p.Match(MojoParserEOL)
		}

	}
	p.SetState(1201)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext()) == 1 {
		p.SetState(1197)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1194)
				p.Match(MojoParserEOL)
			}

			p.SetState(1199)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1200)
			p.StructMembers()
		}

	}
	p.SetState(1206)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1203)
			p.Match(MojoParserEOL)
		}

		p.SetState(1208)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1209)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IStructMembersContext is an interface to support dynamic dispatch.
type IStructMembersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructMembersContext differentiates from other interfaces.
	IsStructMembersContext()
}

type StructMembersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructMembersContext() *StructMembersContext {
	var p = new(StructMembersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structMembers
	return p
}

func (*StructMembersContext) IsStructMembersContext() {}

func NewStructMembersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMembersContext {
	var p = new(StructMembersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structMembers

	return p
}

func (s *StructMembersContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMembersContext) AllStructMember() []IStructMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStructMemberContext); ok {
			len++
		}
	}

	tst := make([]IStructMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStructMemberContext); ok {
			tst[i] = t.(IStructMemberContext)
			i++
		}
	}

	return tst
}

func (s *StructMembersContext) StructMember(i int) IStructMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructMemberContext)
}

func (s *StructMembersContext) AllEosWithDocument() []IEosWithDocumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosWithDocumentContext); ok {
			len++
		}
	}

	tst := make([]IEosWithDocumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosWithDocumentContext); ok {
			tst[i] = t.(IEosWithDocumentContext)
			i++
		}
	}

	return tst
}

func (s *StructMembersContext) EosWithDocument(i int) IEosWithDocumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosWithDocumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosWithDocumentContext)
}

func (s *StructMembersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructMembersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructMembersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMembersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMembersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructMembers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructMembers() (localctx IStructMembersContext) {
	this := p
	_ = this

	localctx = NewStructMembersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, MojoParserRULE_structMembers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1211)
		p.StructMember()
	}
	p.SetState(1223)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1212)
				p.EosWithDocument()
			}
			p.SetState(1216)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1213)
					p.Match(MojoParserEOL)
				}

				p.SetState(1218)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1219)
				p.StructMember()
			}

		}
		p.SetState(1225)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext())
	}
	p.SetState(1227)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 139, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1226)
			p.EosWithDocument()
		}

	}

	return localctx
}

// IStructMemberContext is an interface to support dynamic dispatch.
type IStructMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructMemberContext differentiates from other interfaces.
	IsStructMemberContext()
}

type StructMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructMemberContext() *StructMemberContext {
	var p = new(StructMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structMember
	return p
}

func (*StructMemberContext) IsStructMemberContext() {}

func NewStructMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMemberContext {
	var p = new(StructMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structMember

	return p
}

func (s *StructMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMemberContext) StructDeclaration() IStructDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructDeclarationContext)
}

func (s *StructMemberContext) EnumDeclaration() IEnumDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumDeclarationContext)
}

func (s *StructMemberContext) ConstantDeclaration() IConstantDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantDeclarationContext)
}

func (s *StructMemberContext) TypeAliasDeclaration() ITypeAliasDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAliasDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAliasDeclarationContext)
}

func (s *StructMemberContext) StructMemberDeclaration() IStructMemberDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructMemberDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructMemberDeclarationContext)
}

func (s *StructMemberContext) Document() IDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *StructMemberContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructMemberContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructMemberContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *StructMemberContext) FreeFloatingDocument() IFreeFloatingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFreeFloatingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFreeFloatingDocumentContext)
}

func (s *StructMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructMember() (localctx IStructMemberContext) {
	this := p
	_ = this

	localctx = NewStructMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, MojoParserRULE_structMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1247)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 143, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1232)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserLINE_DOCUMENT {
			{
				p.SetState(1229)
				p.Document()
			}
			{
				p.SetState(1230)
				p.Match(MojoParserEOL)
			}

		}
		p.SetState(1237)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserAT {
			{
				p.SetState(1234)
				p.Attributes()
			}
			{
				p.SetState(1235)
				p.Match(MojoParserEOL)
			}

		}
		p.SetState(1244)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 142, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1239)
				p.StructDeclaration()
			}

		case 2:
			{
				p.SetState(1240)
				p.EnumDeclaration()
			}

		case 3:
			{
				p.SetState(1241)
				p.ConstantDeclaration()
			}

		case 4:
			{
				p.SetState(1242)
				p.TypeAliasDeclaration()
			}

		case 5:
			{
				p.SetState(1243)
				p.StructMemberDeclaration()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1246)
			p.FreeFloatingDocument()
		}

	}

	return localctx
}

// IStructMemberDeclarationContext is an interface to support dynamic dispatch.
type IStructMemberDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructMemberDeclarationContext differentiates from other interfaces.
	IsStructMemberDeclarationContext()
}

type StructMemberDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructMemberDeclarationContext() *StructMemberDeclarationContext {
	var p = new(StructMemberDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structMemberDeclaration
	return p
}

func (*StructMemberDeclarationContext) IsStructMemberDeclarationContext() {}

func NewStructMemberDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMemberDeclarationContext {
	var p = new(StructMemberDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structMemberDeclaration

	return p
}

func (s *StructMemberDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMemberDeclarationContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *StructMemberDeclarationContext) TypeAnnotation() ITypeAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *StructMemberDeclarationContext) Initializer() IInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *StructMemberDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructMemberDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructMemberDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMemberDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMemberDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructMemberDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructMemberDeclaration() (localctx IStructMemberDeclarationContext) {
	this := p
	_ = this

	localctx = NewStructMemberDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, MojoParserRULE_structMemberDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1249)
		p.DeclarationIdentifier()
	}
	{
		p.SetState(1250)
		p.TypeAnnotation()
	}
	p.SetState(1258)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) == 1 {
		p.SetState(1254)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1251)
				p.Match(MojoParserEOL)
			}

			p.SetState(1256)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1257)
			p.Initializer()
		}

	}

	return localctx
}

// IInterfaceDeclarationContext is an interface to support dynamic dispatch.
type IInterfaceDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceDeclarationContext differentiates from other interfaces.
	IsInterfaceDeclarationContext()
}

type InterfaceDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceDeclarationContext() *InterfaceDeclarationContext {
	var p = new(InterfaceDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceDeclaration
	return p
}

func (*InterfaceDeclarationContext) IsInterfaceDeclarationContext() {}

func NewInterfaceDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceDeclarationContext {
	var p = new(InterfaceDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceDeclaration

	return p
}

func (s *InterfaceDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceDeclarationContext) KEYWORD_INTERFACE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_INTERFACE, 0)
}

func (s *InterfaceDeclarationContext) InterfaceName() IInterfaceNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceNameContext)
}

func (s *InterfaceDeclarationContext) InterfaceType() IInterfaceTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceTypeContext)
}

func (s *InterfaceDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParameterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *InterfaceDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceDeclaration() (localctx IInterfaceDeclarationContext) {
	this := p
	_ = this

	localctx = NewInterfaceDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, MojoParserRULE_interfaceDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1260)
		p.Match(MojoParserKEYWORD_INTERFACE)
	}
	{
		p.SetState(1261)
		p.InterfaceName()
	}
	p.SetState(1263)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1262)
			p.GenericParameterClause()
		}

	}
	{
		p.SetState(1265)
		p.InterfaceType()
	}

	return localctx
}

// IInterfaceNameContext is an interface to support dynamic dispatch.
type IInterfaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceNameContext differentiates from other interfaces.
	IsInterfaceNameContext()
}

type InterfaceNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceNameContext() *InterfaceNameContext {
	var p = new(InterfaceNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceName
	return p
}

func (*InterfaceNameContext) IsInterfaceNameContext() {}

func NewInterfaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceNameContext {
	var p = new(InterfaceNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceName

	return p
}

func (s *InterfaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceNameContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *InterfaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceName() (localctx IInterfaceNameContext) {
	this := p
	_ = this

	localctx = NewInterfaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, MojoParserRULE_interfaceName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1267)
		p.TypeName()
	}

	return localctx
}

// IInterfaceTypeContext is an interface to support dynamic dispatch.
type IInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceTypeContext differentiates from other interfaces.
	IsInterfaceTypeContext()
}

type InterfaceTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceTypeContext() *InterfaceTypeContext {
	var p = new(InterfaceTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceType
	return p
}

func (*InterfaceTypeContext) IsInterfaceTypeContext() {}

func NewInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceTypeContext {
	var p = new(InterfaceTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceType

	return p
}

func (s *InterfaceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceTypeContext) InterfaceBody() IInterfaceBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceBodyContext)
}

func (s *InterfaceTypeContext) TypeInheritanceClause() ITypeInheritanceClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeInheritanceClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceClauseContext)
}

func (s *InterfaceTypeContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceTypeContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceType() (localctx IInterfaceTypeContext) {
	this := p
	_ = this

	localctx = NewInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, MojoParserRULE_interfaceType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1276)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) == 1 {
		p.SetState(1272)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1269)
				p.Match(MojoParserEOL)
			}

			p.SetState(1274)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1275)
			p.TypeInheritanceClause()
		}

	}
	p.SetState(1281)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1278)
			p.Match(MojoParserEOL)
		}

		p.SetState(1283)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1284)
		p.InterfaceBody()
	}

	return localctx
}

// IInterfaceBodyContext is an interface to support dynamic dispatch.
type IInterfaceBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceBodyContext differentiates from other interfaces.
	IsInterfaceBodyContext()
}

type InterfaceBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceBodyContext() *InterfaceBodyContext {
	var p = new(InterfaceBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceBody
	return p
}

func (*InterfaceBodyContext) IsInterfaceBodyContext() {}

func NewInterfaceBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceBodyContext {
	var p = new(InterfaceBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceBody

	return p
}

func (s *InterfaceBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *InterfaceBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *InterfaceBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *InterfaceBodyContext) InterfaceMembers() IInterfaceMembersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceMembersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceMembersContext)
}

func (s *InterfaceBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceBody() (localctx IInterfaceBodyContext) {
	this := p
	_ = this

	localctx = NewInterfaceBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, MojoParserRULE_interfaceBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1286)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1288)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
		{
			p.SetState(1287)
			p.FollowingDocument()
		}

	}
	p.SetState(1297)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext()) == 1 {
		p.SetState(1293)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1290)
				p.Match(MojoParserEOL)
			}

			p.SetState(1295)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1296)
			p.InterfaceMembers()
		}

	}
	p.SetState(1302)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1299)
			p.Match(MojoParserEOL)
		}

		p.SetState(1304)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1305)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IInterfaceMembersContext is an interface to support dynamic dispatch.
type IInterfaceMembersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceMembersContext differentiates from other interfaces.
	IsInterfaceMembersContext()
}

type InterfaceMembersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMembersContext() *InterfaceMembersContext {
	var p = new(InterfaceMembersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceMembers
	return p
}

func (*InterfaceMembersContext) IsInterfaceMembersContext() {}

func NewInterfaceMembersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMembersContext {
	var p = new(InterfaceMembersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceMembers

	return p
}

func (s *InterfaceMembersContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMembersContext) AllInterfaceMember() []IInterfaceMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInterfaceMemberContext); ok {
			len++
		}
	}

	tst := make([]IInterfaceMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInterfaceMemberContext); ok {
			tst[i] = t.(IInterfaceMemberContext)
			i++
		}
	}

	return tst
}

func (s *InterfaceMembersContext) InterfaceMember(i int) IInterfaceMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceMemberContext)
}

func (s *InterfaceMembersContext) AllEosWithDocument() []IEosWithDocumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEosWithDocumentContext); ok {
			len++
		}
	}

	tst := make([]IEosWithDocumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEosWithDocumentContext); ok {
			tst[i] = t.(IEosWithDocumentContext)
			i++
		}
	}

	return tst
}

func (s *InterfaceMembersContext) EosWithDocument(i int) IEosWithDocumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEosWithDocumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEosWithDocumentContext)
}

func (s *InterfaceMembersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceMembersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceMembersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMembersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMembersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceMembers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceMembers() (localctx IInterfaceMembersContext) {
	this := p
	_ = this

	localctx = NewInterfaceMembersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, MojoParserRULE_interfaceMembers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1307)
		p.InterfaceMember()
	}
	p.SetState(1319)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1308)
				p.EosWithDocument()
			}
			p.SetState(1312)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1309)
					p.Match(MojoParserEOL)
				}

				p.SetState(1314)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1315)
				p.InterfaceMember()
			}

		}
		p.SetState(1321)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext())
	}
	p.SetState(1323)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1322)
			p.EosWithDocument()
		}

	}

	return localctx
}

// IInterfaceMemberContext is an interface to support dynamic dispatch.
type IInterfaceMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceMemberContext differentiates from other interfaces.
	IsInterfaceMemberContext()
}

type InterfaceMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMemberContext() *InterfaceMemberContext {
	var p = new(InterfaceMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceMember
	return p
}

func (*InterfaceMemberContext) IsInterfaceMemberContext() {}

func NewInterfaceMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMemberContext {
	var p = new(InterfaceMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceMember

	return p
}

func (s *InterfaceMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMemberContext) TypeAliasDeclaration() ITypeAliasDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAliasDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAliasDeclarationContext)
}

func (s *InterfaceMemberContext) InterfaceMethodDeclaration() IInterfaceMethodDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceMethodDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceMethodDeclarationContext)
}

func (s *InterfaceMemberContext) Document() IDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *InterfaceMemberContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceMemberContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceMemberContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *InterfaceMemberContext) FreeFloatingDocument() IFreeFloatingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFreeFloatingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFreeFloatingDocumentContext)
}

func (s *InterfaceMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceMember() (localctx IInterfaceMemberContext) {
	this := p
	_ = this

	localctx = NewInterfaceMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, MojoParserRULE_interfaceMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1340)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1328)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserLINE_DOCUMENT {
			{
				p.SetState(1325)
				p.Document()
			}
			{
				p.SetState(1326)
				p.Match(MojoParserEOL)
			}

		}
		p.SetState(1333)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserAT {
			{
				p.SetState(1330)
				p.Attributes()
			}
			{
				p.SetState(1331)
				p.Match(MojoParserEOL)
			}

		}
		p.SetState(1337)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(1335)
				p.TypeAliasDeclaration()
			}

		case 2:
			{
				p.SetState(1336)
				p.InterfaceMethodDeclaration()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1339)
			p.FreeFloatingDocument()
		}

	}

	return localctx
}

// IInterfaceMethodDeclarationContext is an interface to support dynamic dispatch.
type IInterfaceMethodDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceMethodDeclarationContext differentiates from other interfaces.
	IsInterfaceMethodDeclarationContext()
}

type InterfaceMethodDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMethodDeclarationContext() *InterfaceMethodDeclarationContext {
	var p = new(InterfaceMethodDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceMethodDeclaration
	return p
}

func (*InterfaceMethodDeclarationContext) IsInterfaceMethodDeclarationContext() {}

func NewInterfaceMethodDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMethodDeclarationContext {
	var p = new(InterfaceMethodDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceMethodDeclaration

	return p
}

func (s *InterfaceMethodDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMethodDeclarationContext) FunctionName() IFunctionNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *InterfaceMethodDeclarationContext) FunctionSignature() IFunctionSignatureContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionSignatureContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionSignatureContext)
}

func (s *InterfaceMethodDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParameterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *InterfaceMethodDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceMethodDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceMethodDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMethodDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMethodDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceMethodDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceMethodDeclaration() (localctx IInterfaceMethodDeclarationContext) {
	this := p
	_ = this

	localctx = NewInterfaceMethodDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, MojoParserRULE_interfaceMethodDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1342)
		p.FunctionName()
	}
	p.SetState(1344)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1343)
			p.GenericParameterClause()
		}

	}
	p.SetState(1349)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1346)
			p.Match(MojoParserEOL)
		}

		p.SetState(1351)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1352)
		p.FunctionSignature()
	}

	return localctx
}

// IAttributeDeclarationContext is an interface to support dynamic dispatch.
type IAttributeDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeDeclarationContext differentiates from other interfaces.
	IsAttributeDeclarationContext()
}

type AttributeDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeDeclarationContext() *AttributeDeclarationContext {
	var p = new(AttributeDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeDeclaration
	return p
}

func (*AttributeDeclarationContext) IsAttributeDeclarationContext() {}

func NewAttributeDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeDeclarationContext {
	var p = new(AttributeDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeDeclaration

	return p
}

func (s *AttributeDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeDeclarationContext) KEYWORD_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ATTRIBUTE, 0)
}

func (s *AttributeDeclarationContext) AttributeName() IAttributeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeNameContext)
}

func (s *AttributeDeclarationContext) StructBody() IStructBodyContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructBodyContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructBodyContext)
}

func (s *AttributeDeclarationContext) TypeAnnotation() ITypeAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *AttributeDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParameterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *AttributeDeclarationContext) Initializer() IInitializerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInitializerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *AttributeDeclarationContext) FollowingDocument() IFollowingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *AttributeDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *AttributeDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *AttributeDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeDeclaration() (localctx IAttributeDeclarationContext) {
	this := p
	_ = this

	localctx = NewAttributeDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, MojoParserRULE_attributeDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1354)
		p.Match(MojoParserKEYWORD_ATTRIBUTE)
	}
	{
		p.SetState(1355)
		p.AttributeName()
	}
	p.SetState(1357)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1356)
			p.GenericParameterClause()
		}

	}
	p.SetState(1373)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 167, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1359)
			p.StructBody()
		}

	case 2:
		{
			p.SetState(1360)
			p.TypeAnnotation()
		}
		p.SetState(1368)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) == 1 {
			p.SetState(1364)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1361)
					p.Match(MojoParserEOL)
				}

				p.SetState(1366)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1367)
				p.Initializer()
			}

		}
		p.SetState(1371)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
			{
				p.SetState(1370)
				p.FollowingDocument()
			}

		}

	}

	return localctx
}

// IAttributeAliasDeclarationContext is an interface to support dynamic dispatch.
type IAttributeAliasDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeAliasDeclarationContext differentiates from other interfaces.
	IsAttributeAliasDeclarationContext()
}

type AttributeAliasDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeAliasDeclarationContext() *AttributeAliasDeclarationContext {
	var p = new(AttributeAliasDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeAliasDeclaration
	return p
}

func (*AttributeAliasDeclarationContext) IsAttributeAliasDeclarationContext() {}

func NewAttributeAliasDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeAliasDeclarationContext {
	var p = new(AttributeAliasDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeAliasDeclaration

	return p
}

func (s *AttributeAliasDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeAliasDeclarationContext) KEYWORD_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ATTRIBUTE, 0)
}

func (s *AttributeAliasDeclarationContext) AttributeName() IAttributeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeNameContext)
}

func (s *AttributeAliasDeclarationContext) AttributeAliasAssignment() IAttributeAliasAssignmentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeAliasAssignmentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeAliasAssignmentContext)
}

func (s *AttributeAliasDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParameterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *AttributeAliasDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *AttributeAliasDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *AttributeAliasDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeAliasDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeAliasDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeAliasDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeAliasDeclaration() (localctx IAttributeAliasDeclarationContext) {
	this := p
	_ = this

	localctx = NewAttributeAliasDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, MojoParserRULE_attributeAliasDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1375)
		p.Match(MojoParserKEYWORD_ATTRIBUTE)
	}
	{
		p.SetState(1376)
		p.AttributeName()
	}
	p.SetState(1378)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1377)
			p.GenericParameterClause()
		}

	}
	p.SetState(1383)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1380)
			p.Match(MojoParserEOL)
		}

		p.SetState(1385)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1386)
		p.AttributeAliasAssignment()
	}

	return localctx
}

// IAttributeAliasAssignmentContext is an interface to support dynamic dispatch.
type IAttributeAliasAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeAliasAssignmentContext differentiates from other interfaces.
	IsAttributeAliasAssignmentContext()
}

type AttributeAliasAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeAliasAssignmentContext() *AttributeAliasAssignmentContext {
	var p = new(AttributeAliasAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeAliasAssignment
	return p
}

func (*AttributeAliasAssignmentContext) IsAttributeAliasAssignmentContext() {}

func NewAttributeAliasAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeAliasAssignmentContext {
	var p = new(AttributeAliasAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeAliasAssignment

	return p
}

func (s *AttributeAliasAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeAliasAssignmentContext) AssignmentOperator() IAssignmentOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *AttributeAliasAssignmentContext) AttributeName() IAttributeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeNameContext)
}

func (s *AttributeAliasAssignmentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *AttributeAliasAssignmentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *AttributeAliasAssignmentContext) PackageIdentifier() IPackageIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageIdentifierContext)
}

func (s *AttributeAliasAssignmentContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *AttributeAliasAssignmentContext) GenericArgumentClause() IGenericArgumentClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericArgumentClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *AttributeAliasAssignmentContext) FollowingDocument() IFollowingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *AttributeAliasAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeAliasAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeAliasAssignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeAliasAssignment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeAliasAssignment() (localctx IAttributeAliasAssignmentContext) {
	this := p
	_ = this

	localctx = NewAttributeAliasAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, MojoParserRULE_attributeAliasAssignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1388)
		p.AssignmentOperator()
	}
	p.SetState(1392)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1389)
			p.Match(MojoParserEOL)
		}

		p.SetState(1394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1398)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 171, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1395)
			p.PackageIdentifier()
		}
		{
			p.SetState(1396)
			p.Match(MojoParserDOT)
		}

	}
	{
		p.SetState(1400)
		p.AttributeName()
	}
	p.SetState(1402)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1401)
			p.GenericArgumentClause()
		}

	}
	p.SetState(1405)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
		{
			p.SetState(1404)
			p.FollowingDocument()
		}

	}

	return localctx
}

// IPatternContext is an interface to support dynamic dispatch.
type IPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPatternContext differentiates from other interfaces.
	IsPatternContext()
}

type PatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternContext() *PatternContext {
	var p = new(PatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_pattern
	return p
}

func (*PatternContext) IsPatternContext() {}

func NewPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternContext {
	var p = new(PatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_pattern

	return p
}

func (s *PatternContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternContext) WildcardPattern() IWildcardPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWildcardPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWildcardPatternContext)
}

func (s *PatternContext) TypeAnnotation() ITypeAnnotationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAnnotationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *PatternContext) IdentifierPattern() IIdentifierPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierPatternContext)
}

func (s *PatternContext) TuplePattern() ITuplePatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITuplePatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITuplePatternContext)
}

func (s *PatternContext) OptionalPattern() IOptionalPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOptionalPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOptionalPatternContext)
}

func (s *PatternContext) KEYWORD_IS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IS, 0)
}

func (s *PatternContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *PatternContext) ExpressionPattern() IExpressionPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionPatternContext)
}

func (s *PatternContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *PatternContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *PatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Pattern() (localctx IPatternContext) {
	return p.pattern(0)
}

func (p *MojoParser) pattern(_p int) (localctx IPatternContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPatternContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPatternContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 162
	p.EnterRecursionRule(localctx, 162, MojoParserRULE_pattern, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1424)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1408)
			p.WildcardPattern()
		}
		p.SetState(1410)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 174, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1409)
				p.TypeAnnotation()
			}

		}

	case 2:
		{
			p.SetState(1412)
			p.IdentifierPattern()
		}
		p.SetState(1414)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1413)
				p.TypeAnnotation()
			}

		}

	case 3:
		{
			p.SetState(1416)
			p.TuplePattern()
		}
		p.SetState(1418)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1417)
				p.TypeAnnotation()
			}

		}

	case 4:
		{
			p.SetState(1420)
			p.OptionalPattern()
		}

	case 5:
		{
			p.SetState(1421)
			p.Match(MojoParserKEYWORD_IS)
		}
		{
			p.SetState(1422)
			p.type_(0)
		}

	case 6:
		{
			p.SetState(1423)
			p.ExpressionPattern()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1431)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewPatternContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_pattern)
			p.SetState(1426)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1427)
				p.Match(MojoParserKEYWORD_AS)
			}
			{
				p.SetState(1428)
				p.type_(0)
			}

		}
		p.SetState(1433)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext())
	}

	return localctx
}

// IWildcardPatternContext is an interface to support dynamic dispatch.
type IWildcardPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWildcardPatternContext differentiates from other interfaces.
	IsWildcardPatternContext()
}

type WildcardPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWildcardPatternContext() *WildcardPatternContext {
	var p = new(WildcardPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_wildcardPattern
	return p
}

func (*WildcardPatternContext) IsWildcardPatternContext() {}

func NewWildcardPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WildcardPatternContext {
	var p = new(WildcardPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_wildcardPattern

	return p
}

func (s *WildcardPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *WildcardPatternContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(MojoParserUNDERSCORE, 0)
}

func (s *WildcardPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildcardPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WildcardPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitWildcardPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) WildcardPattern() (localctx IWildcardPatternContext) {
	this := p
	_ = this

	localctx = NewWildcardPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, MojoParserRULE_wildcardPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1434)
		p.Match(MojoParserUNDERSCORE)
	}

	return localctx
}

// IIdentifierPatternContext is an interface to support dynamic dispatch.
type IIdentifierPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierPatternContext differentiates from other interfaces.
	IsIdentifierPatternContext()
}

type IdentifierPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierPatternContext() *IdentifierPatternContext {
	var p = new(IdentifierPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_identifierPattern
	return p
}

func (*IdentifierPatternContext) IsIdentifierPatternContext() {}

func NewIdentifierPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierPatternContext {
	var p = new(IdentifierPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_identifierPattern

	return p
}

func (s *IdentifierPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierPatternContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *IdentifierPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIdentifierPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) IdentifierPattern() (localctx IIdentifierPatternContext) {
	this := p
	_ = this

	localctx = NewIdentifierPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, MojoParserRULE_identifierPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1436)
		p.DeclarationIdentifier()
	}

	return localctx
}

// ITuplePatternContext is an interface to support dynamic dispatch.
type ITuplePatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTuplePatternContext differentiates from other interfaces.
	IsTuplePatternContext()
}

type TuplePatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTuplePatternContext() *TuplePatternContext {
	var p = new(TuplePatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tuplePattern
	return p
}

func (*TuplePatternContext) IsTuplePatternContext() {}

func NewTuplePatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TuplePatternContext {
	var p = new(TuplePatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tuplePattern

	return p
}

func (s *TuplePatternContext) GetParser() antlr.Parser { return s.parser }

func (s *TuplePatternContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *TuplePatternContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *TuplePatternContext) TuplePatternElementList() ITuplePatternElementListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITuplePatternElementListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITuplePatternElementListContext)
}

func (s *TuplePatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TuplePatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TuplePatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTuplePattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TuplePattern() (localctx ITuplePatternContext) {
	this := p
	_ = this

	localctx = NewTuplePatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, MojoParserRULE_tuplePattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1438)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(1440)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&180125310164921150) != 0 || (int64((_la-73)) & ^0x3f) == 0 && ((int64(1)<<(_la-73))&4087) != 0 {
		{
			p.SetState(1439)
			p.TuplePatternElementList()
		}

	}
	{
		p.SetState(1442)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// ITuplePatternElementListContext is an interface to support dynamic dispatch.
type ITuplePatternElementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTuplePatternElementListContext differentiates from other interfaces.
	IsTuplePatternElementListContext()
}

type TuplePatternElementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTuplePatternElementListContext() *TuplePatternElementListContext {
	var p = new(TuplePatternElementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tuplePatternElementList
	return p
}

func (*TuplePatternElementListContext) IsTuplePatternElementListContext() {}

func NewTuplePatternElementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TuplePatternElementListContext {
	var p = new(TuplePatternElementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tuplePatternElementList

	return p
}

func (s *TuplePatternElementListContext) GetParser() antlr.Parser { return s.parser }

func (s *TuplePatternElementListContext) AllTuplePatternElement() []ITuplePatternElementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITuplePatternElementContext); ok {
			len++
		}
	}

	tst := make([]ITuplePatternElementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITuplePatternElementContext); ok {
			tst[i] = t.(ITuplePatternElementContext)
			i++
		}
	}

	return tst
}

func (s *TuplePatternElementListContext) TuplePatternElement(i int) ITuplePatternElementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITuplePatternElementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITuplePatternElementContext)
}

func (s *TuplePatternElementListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MojoParserCOMMA)
}

func (s *TuplePatternElementListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, i)
}

func (s *TuplePatternElementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TuplePatternElementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TuplePatternElementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTuplePatternElementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TuplePatternElementList() (localctx ITuplePatternElementListContext) {
	this := p
	_ = this

	localctx = NewTuplePatternElementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, MojoParserRULE_tuplePatternElementList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1444)
		p.TuplePatternElement()
	}
	p.SetState(1449)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserCOMMA {
		{
			p.SetState(1445)
			p.Match(MojoParserCOMMA)
		}
		{
			p.SetState(1446)
			p.TuplePatternElement()
		}

		p.SetState(1451)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITuplePatternElementContext is an interface to support dynamic dispatch.
type ITuplePatternElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTuplePatternElementContext differentiates from other interfaces.
	IsTuplePatternElementContext()
}

type TuplePatternElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTuplePatternElementContext() *TuplePatternElementContext {
	var p = new(TuplePatternElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tuplePatternElement
	return p
}

func (*TuplePatternElementContext) IsTuplePatternElementContext() {}

func NewTuplePatternElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TuplePatternElementContext {
	var p = new(TuplePatternElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tuplePatternElement

	return p
}

func (s *TuplePatternElementContext) GetParser() antlr.Parser { return s.parser }

func (s *TuplePatternElementContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *TuplePatternElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TuplePatternElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TuplePatternElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTuplePatternElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TuplePatternElement() (localctx ITuplePatternElementContext) {
	this := p
	_ = this

	localctx = NewTuplePatternElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, MojoParserRULE_tuplePatternElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1452)
		p.pattern(0)
	}

	return localctx
}

// IOptionalPatternContext is an interface to support dynamic dispatch.
type IOptionalPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionalPatternContext differentiates from other interfaces.
	IsOptionalPatternContext()
}

type OptionalPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionalPatternContext() *OptionalPatternContext {
	var p = new(OptionalPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_optionalPattern
	return p
}

func (*OptionalPatternContext) IsOptionalPatternContext() {}

func NewOptionalPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionalPatternContext {
	var p = new(OptionalPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_optionalPattern

	return p
}

func (s *OptionalPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionalPatternContext) IdentifierPattern() IIdentifierPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierPatternContext)
}

func (s *OptionalPatternContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *OptionalPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionalPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionalPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOptionalPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) OptionalPattern() (localctx IOptionalPatternContext) {
	this := p
	_ = this

	localctx = NewOptionalPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, MojoParserRULE_optionalPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1454)
		p.IdentifierPattern()
	}
	{
		p.SetState(1455)
		p.Match(MojoParserQUESTION)
	}

	return localctx
}

// IExpressionPatternContext is an interface to support dynamic dispatch.
type IExpressionPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionPatternContext differentiates from other interfaces.
	IsExpressionPatternContext()
}

type ExpressionPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionPatternContext() *ExpressionPatternContext {
	var p = new(ExpressionPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_expressionPattern
	return p
}

func (*ExpressionPatternContext) IsExpressionPatternContext() {}

func NewExpressionPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionPatternContext {
	var p = new(ExpressionPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_expressionPattern

	return p
}

func (s *ExpressionPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionPatternContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExpressionPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ExpressionPattern() (localctx IExpressionPatternContext) {
	this := p
	_ = this

	localctx = NewExpressionPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, MojoParserRULE_expressionPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1457)
		p.Expression()
	}

	return localctx
}

// IAttributeContext is an interface to support dynamic dispatch.
type IAttributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeContext differentiates from other interfaces.
	IsAttributeContext()
}

type AttributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeContext() *AttributeContext {
	var p = new(AttributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attribute
	return p
}

func (*AttributeContext) IsAttributeContext() {}

func NewAttributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeContext {
	var p = new(AttributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attribute

	return p
}

func (s *AttributeContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeContext) AT() antlr.TerminalNode {
	return s.GetToken(MojoParserAT, 0)
}

func (s *AttributeContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserDECIMAL_LITERAL, 0)
}

func (s *AttributeContext) AttributeIdentifier() IAttributeIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeIdentifierContext)
}

func (s *AttributeContext) GenericArgumentClause() IGenericArgumentClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericArgumentClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *AttributeContext) AttributeArgumentClause() IAttributeArgumentClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeArgumentClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeArgumentClauseContext)
}

func (s *AttributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Attribute() (localctx IAttributeContext) {
	this := p
	_ = this

	localctx = NewAttributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, MojoParserRULE_attribute)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1469)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1459)
			p.Match(MojoParserAT)
		}
		{
			p.SetState(1460)
			p.Match(MojoParserDECIMAL_LITERAL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1461)
			p.Match(MojoParserAT)
		}
		{
			p.SetState(1462)
			p.AttributeIdentifier()
		}
		p.SetState(1464)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1463)
				p.GenericArgumentClause()
			}

		}
		p.SetState(1467)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1466)
				p.AttributeArgumentClause()
			}

		}

	}

	return localctx
}

// IAttributeIdentifierContext is an interface to support dynamic dispatch.
type IAttributeIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeIdentifierContext differentiates from other interfaces.
	IsAttributeIdentifierContext()
}

type AttributeIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeIdentifierContext() *AttributeIdentifierContext {
	var p = new(AttributeIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeIdentifier
	return p
}

func (*AttributeIdentifierContext) IsAttributeIdentifierContext() {}

func NewAttributeIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeIdentifierContext {
	var p = new(AttributeIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeIdentifier

	return p
}

func (s *AttributeIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeIdentifierContext) AttributeName() IAttributeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeNameContext)
}

func (s *AttributeIdentifierContext) PackageIdentifier() IPackageIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageIdentifierContext)
}

func (s *AttributeIdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *AttributeIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeIdentifier() (localctx IAttributeIdentifierContext) {
	this := p
	_ = this

	localctx = NewAttributeIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, MojoParserRULE_attributeIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1474)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1471)
			p.PackageIdentifier()
		}
		{
			p.SetState(1472)
			p.Match(MojoParserDOT)
		}

	}
	{
		p.SetState(1476)
		p.AttributeName()
	}

	return localctx
}

// IAttributeNameContext is an interface to support dynamic dispatch.
type IAttributeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeNameContext differentiates from other interfaces.
	IsAttributeNameContext()
}

type AttributeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeNameContext() *AttributeNameContext {
	var p = new(AttributeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeName
	return p
}

func (*AttributeNameContext) IsAttributeNameContext() {}

func NewAttributeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeNameContext {
	var p = new(AttributeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeName

	return p
}

func (s *AttributeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeNameContext) LabelIdentifier() ILabelIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *AttributeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeName() (localctx IAttributeNameContext) {
	this := p
	_ = this

	localctx = NewAttributeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, MojoParserRULE_attributeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1478)
		p.LabelIdentifier()
	}

	return localctx
}

// IAttributeArgumentClauseContext is an interface to support dynamic dispatch.
type IAttributeArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeArgumentClauseContext differentiates from other interfaces.
	IsAttributeArgumentClauseContext()
}

type AttributeArgumentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeArgumentClauseContext() *AttributeArgumentClauseContext {
	var p = new(AttributeArgumentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeArgumentClause
	return p
}

func (*AttributeArgumentClauseContext) IsAttributeArgumentClauseContext() {}

func NewAttributeArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeArgumentClauseContext {
	var p = new(AttributeArgumentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeArgumentClause

	return p
}

func (s *AttributeArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeArgumentClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *AttributeArgumentClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *AttributeArgumentClauseContext) AttributeArguments() IAttributeArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeArgumentsContext)
}

func (s *AttributeArgumentClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *AttributeArgumentClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *AttributeArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeArgumentClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeArgumentClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeArgumentClause() (localctx IAttributeArgumentClauseContext) {
	this := p
	_ = this

	localctx = NewAttributeArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, MojoParserRULE_attributeArgumentClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1480)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(1488)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
		p.SetState(1484)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1481)
				p.Match(MojoParserEOL)
			}

			p.SetState(1486)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1487)
			p.AttributeArguments()
		}

	}
	p.SetState(1493)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1490)
			p.Match(MojoParserEOL)
		}

		p.SetState(1495)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1496)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// IAttributeArgumentContext is an interface to support dynamic dispatch.
type IAttributeArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeArgumentContext differentiates from other interfaces.
	IsAttributeArgumentContext()
}

type AttributeArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeArgumentContext() *AttributeArgumentContext {
	var p = new(AttributeArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeArgument
	return p
}

func (*AttributeArgumentContext) IsAttributeArgumentContext() {}

func NewAttributeArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeArgumentContext {
	var p = new(AttributeArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeArgument

	return p
}

func (s *AttributeArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeArgumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AttributeArgumentContext) LabelIdentifier() ILabelIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *AttributeArgumentContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *AttributeArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeArgument() (localctx IAttributeArgumentContext) {
	this := p
	_ = this

	localctx = NewAttributeArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, MojoParserRULE_attributeArgument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1502)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1498)
			p.LabelIdentifier()
		}
		p.SetState(1500)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserCOLON {
			{
				p.SetState(1499)
				p.Match(MojoParserCOLON)
			}

		}

	}
	{
		p.SetState(1504)
		p.Expression()
	}

	return localctx
}

// IAttributeArgumentsContext is an interface to support dynamic dispatch.
type IAttributeArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeArgumentsContext differentiates from other interfaces.
	IsAttributeArgumentsContext()
}

type AttributeArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeArgumentsContext() *AttributeArgumentsContext {
	var p = new(AttributeArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeArguments
	return p
}

func (*AttributeArgumentsContext) IsAttributeArgumentsContext() {}

func NewAttributeArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeArgumentsContext {
	var p = new(AttributeArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeArguments

	return p
}

func (s *AttributeArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeArgumentsContext) AllAttributeArgument() []IAttributeArgumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeArgumentContext); ok {
			len++
		}
	}

	tst := make([]IAttributeArgumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeArgumentContext); ok {
			tst[i] = t.(IAttributeArgumentContext)
			i++
		}
	}

	return tst
}

func (s *AttributeArgumentsContext) AttributeArgument(i int) IAttributeArgumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeArgumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeArgumentContext)
}

func (s *AttributeArgumentsContext) AllEov() []IEovContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovContext); ok {
			len++
		}
	}

	tst := make([]IEovContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovContext); ok {
			tst[i] = t.(IEovContext)
			i++
		}
	}

	return tst
}

func (s *AttributeArgumentsContext) Eov(i int) IEovContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *AttributeArgumentsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *AttributeArgumentsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *AttributeArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeArguments() (localctx IAttributeArgumentsContext) {
	this := p
	_ = this

	localctx = NewAttributeArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, MojoParserRULE_attributeArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1506)
		p.AttributeArgument()
	}
	p.SetState(1518)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1507)
				p.Eov()
			}
			p.SetState(1511)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1508)
					p.Match(MojoParserEOL)
				}

				p.SetState(1513)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1514)
				p.AttributeArgument()
			}

		}
		p.SetState(1520)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 191, p.GetParserRuleContext())
	}
	p.SetState(1522)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1521)
			p.Eov()
		}

	}

	return localctx
}

// IAttributesContext is an interface to support dynamic dispatch.
type IAttributesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributesContext differentiates from other interfaces.
	IsAttributesContext()
}

type AttributesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributesContext() *AttributesContext {
	var p = new(AttributesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributes
	return p
}

func (*AttributesContext) IsAttributesContext() {}

func NewAttributesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributesContext {
	var p = new(AttributesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributes

	return p
}

func (s *AttributesContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributesContext) AllAttribute() []IAttributeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributeContext); ok {
			len++
		}
	}

	tst := make([]IAttributeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributeContext); ok {
			tst[i] = t.(IAttributeContext)
			i++
		}
	}

	return tst
}

func (s *AttributesContext) Attribute(i int) IAttributeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributeContext)
}

func (s *AttributesContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *AttributesContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *AttributesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Attributes() (localctx IAttributesContext) {
	this := p
	_ = this

	localctx = NewAttributesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, MojoParserRULE_attributes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1524)
		p.Attribute()
	}
	p.SetState(1531)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1526)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == MojoParserEOL {
				{
					p.SetState(1525)
					p.Match(MojoParserEOL)
				}

			}
			{
				p.SetState(1528)
				p.Attribute()
			}

		}
		p.SetState(1533)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 194, p.GetParserRuleContext())
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) PrefixExpression() IPrefixExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrefixExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrefixExpressionContext)
}

func (s *ExpressionContext) BinaryExpressions() IBinaryExpressionsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBinaryExpressionsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBinaryExpressionsContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Expression() (localctx IExpressionContext) {
	this := p
	_ = this

	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, MojoParserRULE_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1534)
		p.PrefixExpression()
	}
	p.SetState(1536)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 195, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1535)
			p.BinaryExpressions()
		}

	}

	return localctx
}

// IExpressionsContext is an interface to support dynamic dispatch.
type IExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionsContext differentiates from other interfaces.
	IsExpressionsContext()
}

type ExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionsContext() *ExpressionsContext {
	var p = new(ExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_expressions
	return p
}

func (*ExpressionsContext) IsExpressionsContext() {}

func NewExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionsContext {
	var p = new(ExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_expressions

	return p
}

func (s *ExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionsContext) AllExpression() []IExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExpressionContext); ok {
			len++
		}
	}

	tst := make([]IExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExpressionContext); ok {
			tst[i] = t.(IExpressionContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionsContext) Expression(i int) IExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionsContext) AllEov() []IEovContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovContext); ok {
			len++
		}
	}

	tst := make([]IEovContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovContext); ok {
			tst[i] = t.(IEovContext)
			i++
		}
	}

	return tst
}

func (s *ExpressionsContext) Eov(i int) IEovContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ExpressionsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ExpressionsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExpressions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Expressions() (localctx IExpressionsContext) {
	this := p
	_ = this

	localctx = NewExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, MojoParserRULE_expressions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1538)
		p.Expression()
	}
	p.SetState(1550)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1539)
				p.Eov()
			}
			p.SetState(1543)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1540)
					p.Match(MojoParserEOL)
				}

				p.SetState(1545)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1546)
				p.Expression()
			}

		}
		p.SetState(1552)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 197, p.GetParserRuleContext())
	}
	p.SetState(1554)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserCOMMA || _la == MojoParserEOL {
		{
			p.SetState(1553)
			p.Eov()
		}

	}

	return localctx
}

// IPrefixExpressionContext is an interface to support dynamic dispatch.
type IPrefixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixExpressionContext differentiates from other interfaces.
	IsPrefixExpressionContext()
}

type PrefixExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixExpressionContext() *PrefixExpressionContext {
	var p = new(PrefixExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_prefixExpression
	return p
}

func (*PrefixExpressionContext) IsPrefixExpressionContext() {}

func NewPrefixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixExpressionContext {
	var p = new(PrefixExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_prefixExpression

	return p
}

func (s *PrefixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixExpressionContext) PrefixOperator() IPrefixOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrefixOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrefixOperatorContext)
}

func (s *PrefixExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostfixExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *PrefixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrefixExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrefixExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrefixExpression() (localctx IPrefixExpressionContext) {
	this := p
	_ = this

	localctx = NewPrefixExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, MojoParserRULE_prefixExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1560)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1556)
			p.PrefixOperator()
		}
		{
			p.SetState(1557)
			p.PostfixExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1559)
			p.PostfixExpression()
		}

	}

	return localctx
}

// IBinaryExpressionContext is an interface to support dynamic dispatch.
type IBinaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinaryExpressionContext differentiates from other interfaces.
	IsBinaryExpressionContext()
}

type BinaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinaryExpressionContext() *BinaryExpressionContext {
	var p = new(BinaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_binaryExpression
	return p
}

func (*BinaryExpressionContext) IsBinaryExpressionContext() {}

func NewBinaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinaryExpressionContext {
	var p = new(BinaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_binaryExpression

	return p
}

func (s *BinaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *BinaryExpressionContext) BinaryOperator() IBinaryOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBinaryOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBinaryOperatorContext)
}

func (s *BinaryExpressionContext) PrefixExpression() IPrefixExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrefixExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrefixExpressionContext)
}

func (s *BinaryExpressionContext) AssignmentOperator() IAssignmentOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAssignmentOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *BinaryExpressionContext) ConditionalOperator() IConditionalOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConditionalOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConditionalOperatorContext)
}

func (s *BinaryExpressionContext) TypeCastingOperator() ITypeCastingOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeCastingOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeCastingOperatorContext)
}

func (s *BinaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBinaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BinaryExpression() (localctx IBinaryExpressionContext) {
	this := p
	_ = this

	localctx = NewBinaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, MojoParserRULE_binaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1572)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 200, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1562)
			p.BinaryOperator()
		}
		{
			p.SetState(1563)
			p.PrefixExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1565)
			p.AssignmentOperator()
		}
		{
			p.SetState(1566)
			p.PrefixExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1568)
			p.ConditionalOperator()
		}
		{
			p.SetState(1569)
			p.PrefixExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1571)
			p.TypeCastingOperator()
		}

	}

	return localctx
}

// IBinaryExpressionsContext is an interface to support dynamic dispatch.
type IBinaryExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinaryExpressionsContext differentiates from other interfaces.
	IsBinaryExpressionsContext()
}

type BinaryExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinaryExpressionsContext() *BinaryExpressionsContext {
	var p = new(BinaryExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_binaryExpressions
	return p
}

func (*BinaryExpressionsContext) IsBinaryExpressionsContext() {}

func NewBinaryExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinaryExpressionsContext {
	var p = new(BinaryExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_binaryExpressions

	return p
}

func (s *BinaryExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *BinaryExpressionsContext) AllBinaryExpression() []IBinaryExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBinaryExpressionContext); ok {
			len++
		}
	}

	tst := make([]IBinaryExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBinaryExpressionContext); ok {
			tst[i] = t.(IBinaryExpressionContext)
			i++
		}
	}

	return tst
}

func (s *BinaryExpressionsContext) BinaryExpression(i int) IBinaryExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBinaryExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBinaryExpressionContext)
}

func (s *BinaryExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinaryExpressionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBinaryExpressions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BinaryExpressions() (localctx IBinaryExpressionsContext) {
	this := p
	_ = this

	localctx = NewBinaryExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, MojoParserRULE_binaryExpressions)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1575)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1574)
				p.BinaryExpression()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1577)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 201, p.GetParserRuleContext())
	}

	return localctx
}

// IConditionalOperatorContext is an interface to support dynamic dispatch.
type IConditionalOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalOperatorContext differentiates from other interfaces.
	IsConditionalOperatorContext()
}

type ConditionalOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalOperatorContext() *ConditionalOperatorContext {
	var p = new(ConditionalOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_conditionalOperator
	return p
}

func (*ConditionalOperatorContext) IsConditionalOperatorContext() {}

func NewConditionalOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalOperatorContext {
	var p = new(ConditionalOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_conditionalOperator

	return p
}

func (s *ConditionalOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalOperatorContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *ConditionalOperatorContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionalOperatorContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *ConditionalOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitConditionalOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ConditionalOperator() (localctx IConditionalOperatorContext) {
	this := p
	_ = this

	localctx = NewConditionalOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, MojoParserRULE_conditionalOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1579)
		p.Match(MojoParserQUESTION)
	}
	{
		p.SetState(1580)
		p.Expression()
	}
	{
		p.SetState(1581)
		p.Match(MojoParserCOLON)
	}

	return localctx
}

// ITypeCastingOperatorContext is an interface to support dynamic dispatch.
type ITypeCastingOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeCastingOperatorContext differentiates from other interfaces.
	IsTypeCastingOperatorContext()
}

type TypeCastingOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeCastingOperatorContext() *TypeCastingOperatorContext {
	var p = new(TypeCastingOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeCastingOperator
	return p
}

func (*TypeCastingOperatorContext) IsTypeCastingOperatorContext() {}

func NewTypeCastingOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeCastingOperatorContext {
	var p = new(TypeCastingOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeCastingOperator

	return p
}

func (s *TypeCastingOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeCastingOperatorContext) KEYWORD_IS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IS, 0)
}

func (s *TypeCastingOperatorContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeCastingOperatorContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *TypeCastingOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeCastingOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeCastingOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeCastingOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeCastingOperator() (localctx ITypeCastingOperatorContext) {
	this := p
	_ = this

	localctx = NewTypeCastingOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, MojoParserRULE_typeCastingOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1587)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_IS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1583)
			p.Match(MojoParserKEYWORD_IS)
		}
		{
			p.SetState(1584)
			p.type_(0)
		}

	case MojoParserKEYWORD_AS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1585)
			p.Match(MojoParserKEYWORD_AS)
		}
		{
			p.SetState(1586)
			p.type_(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) LiteralExpression() ILiteralExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralExpressionContext)
}

func (s *PrimaryExpressionContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *PrimaryExpressionContext) GenericArgumentClause() IGenericArgumentClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericArgumentClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *PrimaryExpressionContext) TypeIdentifier() ITypeIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierContext)
}

func (s *PrimaryExpressionContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *PrimaryExpressionContext) ClosureExpression() IClosureExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClosureExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClosureExpressionContext)
}

func (s *PrimaryExpressionContext) ParenthesizedExpression() IParenthesizedExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParenthesizedExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParenthesizedExpressionContext)
}

func (s *PrimaryExpressionContext) TupleExpression() ITupleExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *PrimaryExpressionContext) ImplicitMemberExpression() IImplicitMemberExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImplicitMemberExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImplicitMemberExpressionContext)
}

func (s *PrimaryExpressionContext) WildcardExpression() IWildcardExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWildcardExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWildcardExpressionContext)
}

func (s *PrimaryExpressionContext) StructConstructionExpression() IStructConstructionExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructConstructionExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructConstructionExpressionContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrimaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	this := p
	_ = this

	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, MojoParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1606)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 205, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1589)
			p.LiteralExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1590)
			p.DeclarationIdentifier()
		}
		p.SetState(1592)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1591)
				p.GenericArgumentClause()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1594)
			p.TypeIdentifier()
		}
		{
			p.SetState(1595)
			p.Match(MojoParserDOT)
		}
		{
			p.SetState(1596)
			p.DeclarationIdentifier()
		}
		p.SetState(1598)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 204, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1597)
				p.GenericArgumentClause()
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1600)
			p.ClosureExpression()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1601)
			p.ParenthesizedExpression()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1602)
			p.TupleExpression()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1603)
			p.ImplicitMemberExpression()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1604)
			p.WildcardExpression()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1605)
			p.StructConstructionExpression()
		}

	}

	return localctx
}

// ILiteralExpressionContext is an interface to support dynamic dispatch.
type ILiteralExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralExpressionContext differentiates from other interfaces.
	IsLiteralExpressionContext()
}

type LiteralExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralExpressionContext() *LiteralExpressionContext {
	var p = new(LiteralExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_literalExpression
	return p
}

func (*LiteralExpressionContext) IsLiteralExpressionContext() {}

func NewLiteralExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralExpressionContext {
	var p = new(LiteralExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_literalExpression

	return p
}

func (s *LiteralExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralExpressionContext) NumericOperatorLiteral() INumericOperatorLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericOperatorLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericOperatorLiteralContext)
}

func (s *LiteralExpressionContext) StringOperatorLiteral() IStringOperatorLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringOperatorLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringOperatorLiteralContext)
}

func (s *LiteralExpressionContext) StructLiteral() IStructLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructLiteralContext)
}

func (s *LiteralExpressionContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *LiteralExpressionContext) ArrayLiteral() IArrayLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralContext)
}

func (s *LiteralExpressionContext) MapLiteral() IMapLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapLiteralContext)
}

func (s *LiteralExpressionContext) ObjectLiteral() IObjectLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *LiteralExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLiteralExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LiteralExpression() (localctx ILiteralExpressionContext) {
	this := p
	_ = this

	localctx = NewLiteralExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, MojoParserRULE_literalExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1615)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 206, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1608)
			p.NumericOperatorLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1609)
			p.StringOperatorLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1610)
			p.StructLiteral()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1611)
			p.Literal()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1612)
			p.ArrayLiteral()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1613)
			p.MapLiteral()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1614)
			p.ObjectLiteral()
		}

	}

	return localctx
}

// INumericOperatorLiteralContext is an interface to support dynamic dispatch.
type INumericOperatorLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumericOperatorLiteralContext differentiates from other interfaces.
	IsNumericOperatorLiteralContext()
}

type NumericOperatorLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericOperatorLiteralContext() *NumericOperatorLiteralContext {
	var p = new(NumericOperatorLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_numericOperatorLiteral
	return p
}

func (*NumericOperatorLiteralContext) IsNumericOperatorLiteralContext() {}

func NewNumericOperatorLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericOperatorLiteralContext {
	var p = new(NumericOperatorLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_numericOperatorLiteral

	return p
}

func (s *NumericOperatorLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericOperatorLiteralContext) NumericLiteral() INumericLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericLiteralContext)
}

func (s *NumericOperatorLiteralContext) PostfixLiteralOperator() IPostfixLiteralOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostfixLiteralOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostfixLiteralOperatorContext)
}

func (s *NumericOperatorLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericOperatorLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericOperatorLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitNumericOperatorLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) NumericOperatorLiteral() (localctx INumericOperatorLiteralContext) {
	this := p
	_ = this

	localctx = NewNumericOperatorLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, MojoParserRULE_numericOperatorLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1617)
		p.NumericLiteral()
	}
	{
		p.SetState(1618)
		p.PostfixLiteralOperator()
	}

	return localctx
}

// IStringOperatorLiteralContext is an interface to support dynamic dispatch.
type IStringOperatorLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringOperatorLiteralContext differentiates from other interfaces.
	IsStringOperatorLiteralContext()
}

type StringOperatorLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringOperatorLiteralContext() *StringOperatorLiteralContext {
	var p = new(StringOperatorLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_stringOperatorLiteral
	return p
}

func (*StringOperatorLiteralContext) IsStringOperatorLiteralContext() {}

func NewStringOperatorLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringOperatorLiteralContext {
	var p = new(StringOperatorLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_stringOperatorLiteral

	return p
}

func (s *StringOperatorLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringOperatorLiteralContext) PrefixLiteralOperator() IPrefixLiteralOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrefixLiteralOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrefixLiteralOperatorContext)
}

func (s *StringOperatorLiteralContext) StringLiteral() IStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *StringOperatorLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringOperatorLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringOperatorLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStringOperatorLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StringOperatorLiteral() (localctx IStringOperatorLiteralContext) {
	this := p
	_ = this

	localctx = NewStringOperatorLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, MojoParserRULE_stringOperatorLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1620)
		p.PrefixLiteralOperator()
	}
	{
		p.SetState(1621)
		p.StringLiteral()
	}

	return localctx
}

// IPostfixLiteralOperatorContext is an interface to support dynamic dispatch.
type IPostfixLiteralOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixLiteralOperatorContext differentiates from other interfaces.
	IsPostfixLiteralOperatorContext()
}

type PostfixLiteralOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixLiteralOperatorContext() *PostfixLiteralOperatorContext {
	var p = new(PostfixLiteralOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_postfixLiteralOperator
	return p
}

func (*PostfixLiteralOperatorContext) IsPostfixLiteralOperatorContext() {}

func NewPostfixLiteralOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixLiteralOperatorContext {
	var p = new(PostfixLiteralOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_postfixLiteralOperator

	return p
}

func (s *PostfixLiteralOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixLiteralOperatorContext) TYPE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserTYPE_IDENTIFIER, 0)
}

func (s *PostfixLiteralOperatorContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *PostfixLiteralOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixLiteralOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixLiteralOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPostfixLiteralOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PostfixLiteralOperator() (localctx IPostfixLiteralOperatorContext) {
	this := p
	_ = this

	localctx = NewPostfixLiteralOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, MojoParserRULE_postfixLiteralOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1623)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserTYPE_IDENTIFIER || _la == MojoParserVALUE_IDENTIFIER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPrefixLiteralOperatorContext is an interface to support dynamic dispatch.
type IPrefixLiteralOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixLiteralOperatorContext differentiates from other interfaces.
	IsPrefixLiteralOperatorContext()
}

type PrefixLiteralOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixLiteralOperatorContext() *PrefixLiteralOperatorContext {
	var p = new(PrefixLiteralOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_prefixLiteralOperator
	return p
}

func (*PrefixLiteralOperatorContext) IsPrefixLiteralOperatorContext() {}

func NewPrefixLiteralOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixLiteralOperatorContext {
	var p = new(PrefixLiteralOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_prefixLiteralOperator

	return p
}

func (s *PrefixLiteralOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixLiteralOperatorContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *PrefixLiteralOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixLiteralOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrefixLiteralOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrefixLiteralOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrefixLiteralOperator() (localctx IPrefixLiteralOperatorContext) {
	this := p
	_ = this

	localctx = NewPrefixLiteralOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, MojoParserRULE_prefixLiteralOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1625)
		p.Match(MojoParserVALUE_IDENTIFIER)
	}

	return localctx
}

// IArrayLiteralContext is an interface to support dynamic dispatch.
type IArrayLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteralContext differentiates from other interfaces.
	IsArrayLiteralContext()
}

type ArrayLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralContext() *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayLiteral
	return p
}

func (*ArrayLiteralContext) IsArrayLiteralContext() {}

func NewArrayLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayLiteral

	return p
}

func (s *ArrayLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserLBRACK, 0)
}

func (s *ArrayLiteralContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserRBRACK, 0)
}

func (s *ArrayLiteralContext) ArrayLiteralItems() IArrayLiteralItemsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayLiteralItemsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralItemsContext)
}

func (s *ArrayLiteralContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ArrayLiteralContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ArrayLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayLiteral() (localctx IArrayLiteralContext) {
	this := p
	_ = this

	localctx = NewArrayLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, MojoParserRULE_arrayLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1627)
		p.Match(MojoParserLBRACK)
	}
	p.SetState(1635)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 208, p.GetParserRuleContext()) == 1 {
		p.SetState(1631)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1628)
				p.Match(MojoParserEOL)
			}

			p.SetState(1633)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1634)
			p.ArrayLiteralItems()
		}

	}
	p.SetState(1640)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1637)
			p.Match(MojoParserEOL)
		}

		p.SetState(1642)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1643)
		p.Match(MojoParserRBRACK)
	}

	return localctx
}

// IArrayLiteralItemsContext is an interface to support dynamic dispatch.
type IArrayLiteralItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteralItemsContext differentiates from other interfaces.
	IsArrayLiteralItemsContext()
}

type ArrayLiteralItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralItemsContext() *ArrayLiteralItemsContext {
	var p = new(ArrayLiteralItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayLiteralItems
	return p
}

func (*ArrayLiteralItemsContext) IsArrayLiteralItemsContext() {}

func NewArrayLiteralItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralItemsContext {
	var p = new(ArrayLiteralItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayLiteralItems

	return p
}

func (s *ArrayLiteralItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralItemsContext) AllArrayLiteralItem() []IArrayLiteralItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArrayLiteralItemContext); ok {
			len++
		}
	}

	tst := make([]IArrayLiteralItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArrayLiteralItemContext); ok {
			tst[i] = t.(IArrayLiteralItemContext)
			i++
		}
	}

	return tst
}

func (s *ArrayLiteralItemsContext) ArrayLiteralItem(i int) IArrayLiteralItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayLiteralItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralItemContext)
}

func (s *ArrayLiteralItemsContext) AllEov() []IEovContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovContext); ok {
			len++
		}
	}

	tst := make([]IEovContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovContext); ok {
			tst[i] = t.(IEovContext)
			i++
		}
	}

	return tst
}

func (s *ArrayLiteralItemsContext) Eov(i int) IEovContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ArrayLiteralItemsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ArrayLiteralItemsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ArrayLiteralItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralItemsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayLiteralItems(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayLiteralItems() (localctx IArrayLiteralItemsContext) {
	this := p
	_ = this

	localctx = NewArrayLiteralItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, MojoParserRULE_arrayLiteralItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1645)
		p.ArrayLiteralItem()
	}
	p.SetState(1657)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1646)
				p.Eov()
			}
			p.SetState(1650)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1647)
					p.Match(MojoParserEOL)
				}

				p.SetState(1652)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1653)
				p.ArrayLiteralItem()
			}

		}
		p.SetState(1659)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext())
	}
	p.SetState(1661)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1660)
			p.Eov()
		}

	}

	return localctx
}

// IArrayLiteralItemContext is an interface to support dynamic dispatch.
type IArrayLiteralItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteralItemContext differentiates from other interfaces.
	IsArrayLiteralItemContext()
}

type ArrayLiteralItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralItemContext() *ArrayLiteralItemContext {
	var p = new(ArrayLiteralItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayLiteralItem
	return p
}

func (*ArrayLiteralItemContext) IsArrayLiteralItemContext() {}

func NewArrayLiteralItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralItemContext {
	var p = new(ArrayLiteralItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayLiteralItem

	return p
}

func (s *ArrayLiteralItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralItemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayLiteralItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayLiteralItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayLiteralItem() (localctx IArrayLiteralItemContext) {
	this := p
	_ = this

	localctx = NewArrayLiteralItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, MojoParserRULE_arrayLiteralItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1663)
		p.Expression()
	}

	return localctx
}

// IMapLiteralContext is an interface to support dynamic dispatch.
type IMapLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapLiteralContext differentiates from other interfaces.
	IsMapLiteralContext()
}

type MapLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapLiteralContext() *MapLiteralContext {
	var p = new(MapLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_mapLiteral
	return p
}

func (*MapLiteralContext) IsMapLiteralContext() {}

func NewMapLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapLiteralContext {
	var p = new(MapLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_mapLiteral

	return p
}

func (s *MapLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MapLiteralContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *MapLiteralContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *MapLiteralContext) MapLiteralItems() IMapLiteralItemsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapLiteralItemsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapLiteralItemsContext)
}

func (s *MapLiteralContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MapLiteralContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MapLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMapLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MapLiteral() (localctx IMapLiteralContext) {
	this := p
	_ = this

	localctx = NewMapLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, MojoParserRULE_mapLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1665)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1673)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 214, p.GetParserRuleContext()) == 1 {
		p.SetState(1669)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1666)
				p.Match(MojoParserEOL)
			}

			p.SetState(1671)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1672)
			p.MapLiteralItems()
		}

	}
	p.SetState(1678)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1675)
			p.Match(MojoParserEOL)
		}

		p.SetState(1680)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1681)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IMapLiteralItemsContext is an interface to support dynamic dispatch.
type IMapLiteralItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapLiteralItemsContext differentiates from other interfaces.
	IsMapLiteralItemsContext()
}

type MapLiteralItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapLiteralItemsContext() *MapLiteralItemsContext {
	var p = new(MapLiteralItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_mapLiteralItems
	return p
}

func (*MapLiteralItemsContext) IsMapLiteralItemsContext() {}

func NewMapLiteralItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapLiteralItemsContext {
	var p = new(MapLiteralItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_mapLiteralItems

	return p
}

func (s *MapLiteralItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *MapLiteralItemsContext) AllMapLiteralItem() []IMapLiteralItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IMapLiteralItemContext); ok {
			len++
		}
	}

	tst := make([]IMapLiteralItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IMapLiteralItemContext); ok {
			tst[i] = t.(IMapLiteralItemContext)
			i++
		}
	}

	return tst
}

func (s *MapLiteralItemsContext) MapLiteralItem(i int) IMapLiteralItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapLiteralItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapLiteralItemContext)
}

func (s *MapLiteralItemsContext) AllEov() []IEovContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovContext); ok {
			len++
		}
	}

	tst := make([]IEovContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovContext); ok {
			tst[i] = t.(IEovContext)
			i++
		}
	}

	return tst
}

func (s *MapLiteralItemsContext) Eov(i int) IEovContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *MapLiteralItemsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MapLiteralItemsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MapLiteralItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapLiteralItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapLiteralItemsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMapLiteralItems(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MapLiteralItems() (localctx IMapLiteralItemsContext) {
	this := p
	_ = this

	localctx = NewMapLiteralItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, MojoParserRULE_mapLiteralItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1683)
		p.MapLiteralItem()
	}
	p.SetState(1695)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1684)
				p.Eov()
			}
			p.SetState(1688)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1685)
					p.Match(MojoParserEOL)
				}

				p.SetState(1690)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1691)
				p.MapLiteralItem()
			}

		}
		p.SetState(1697)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext())
	}
	p.SetState(1699)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1698)
			p.Eov()
		}

	}

	return localctx
}

// IMapLiteralItemContext is an interface to support dynamic dispatch.
type IMapLiteralItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapLiteralItemContext differentiates from other interfaces.
	IsMapLiteralItemContext()
}

type MapLiteralItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapLiteralItemContext() *MapLiteralItemContext {
	var p = new(MapLiteralItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_mapLiteralItem
	return p
}

func (*MapLiteralItemContext) IsMapLiteralItemContext() {}

func NewMapLiteralItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapLiteralItemContext {
	var p = new(MapLiteralItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_mapLiteralItem

	return p
}

func (s *MapLiteralItemContext) GetParser() antlr.Parser { return s.parser }

func (s *MapLiteralItemContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *MapLiteralItemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MapLiteralItemContext) StringLiteral() IStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *MapLiteralItemContext) IntegerLiteral() IIntegerLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerLiteralContext)
}

func (s *MapLiteralItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapLiteralItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapLiteralItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMapLiteralItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MapLiteralItem() (localctx IMapLiteralItemContext) {
	this := p
	_ = this

	localctx = NewMapLiteralItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, MojoParserRULE_mapLiteralItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1703)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserSTATIC_STRING_LITERAL, MojoParserINTERPOLATED_STRING_LITERAL:
		{
			p.SetState(1701)
			p.StringLiteral()
		}

	case MojoParserBINARY_LITERAL, MojoParserOCTAL_LITERAL, MojoParserDECIMAL_LITERAL, MojoParserPURE_DECIMAL_DIGITS, MojoParserHEXADECIMAL_LITERAL:
		{
			p.SetState(1702)
			p.IntegerLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1705)
		p.Match(MojoParserCOLON)
	}
	{
		p.SetState(1706)
		p.Expression()
	}

	return localctx
}

// IObjectLiteralContext is an interface to support dynamic dispatch.
type IObjectLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralContext differentiates from other interfaces.
	IsObjectLiteralContext()
}

type ObjectLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralContext() *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_objectLiteral
	return p
}

func (*ObjectLiteralContext) IsObjectLiteralContext() {}

func NewObjectLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_objectLiteral

	return p
}

func (s *ObjectLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *ObjectLiteralContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *ObjectLiteralContext) ObjectLiteralItems() IObjectLiteralItemsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectLiteralItemsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralItemsContext)
}

func (s *ObjectLiteralContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ObjectLiteralContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ObjectLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitObjectLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ObjectLiteral() (localctx IObjectLiteralContext) {
	this := p
	_ = this

	localctx = NewObjectLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, MojoParserRULE_objectLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1708)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1716)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 221, p.GetParserRuleContext()) == 1 {
		p.SetState(1712)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1709)
				p.Match(MojoParserEOL)
			}

			p.SetState(1714)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1715)
			p.ObjectLiteralItems()
		}

	}
	p.SetState(1721)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1718)
			p.Match(MojoParserEOL)
		}

		p.SetState(1723)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1724)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IObjectLiteralItemsContext is an interface to support dynamic dispatch.
type IObjectLiteralItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralItemsContext differentiates from other interfaces.
	IsObjectLiteralItemsContext()
}

type ObjectLiteralItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralItemsContext() *ObjectLiteralItemsContext {
	var p = new(ObjectLiteralItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_objectLiteralItems
	return p
}

func (*ObjectLiteralItemsContext) IsObjectLiteralItemsContext() {}

func NewObjectLiteralItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralItemsContext {
	var p = new(ObjectLiteralItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_objectLiteralItems

	return p
}

func (s *ObjectLiteralItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralItemsContext) AllObjectLiteralItem() []IObjectLiteralItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IObjectLiteralItemContext); ok {
			len++
		}
	}

	tst := make([]IObjectLiteralItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IObjectLiteralItemContext); ok {
			tst[i] = t.(IObjectLiteralItemContext)
			i++
		}
	}

	return tst
}

func (s *ObjectLiteralItemsContext) ObjectLiteralItem(i int) IObjectLiteralItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectLiteralItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralItemContext)
}

func (s *ObjectLiteralItemsContext) AllEov() []IEovContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovContext); ok {
			len++
		}
	}

	tst := make([]IEovContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovContext); ok {
			tst[i] = t.(IEovContext)
			i++
		}
	}

	return tst
}

func (s *ObjectLiteralItemsContext) Eov(i int) IEovContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ObjectLiteralItemsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ObjectLiteralItemsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ObjectLiteralItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralItemsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitObjectLiteralItems(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ObjectLiteralItems() (localctx IObjectLiteralItemsContext) {
	this := p
	_ = this

	localctx = NewObjectLiteralItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, MojoParserRULE_objectLiteralItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1726)
		p.ObjectLiteralItem()
	}
	p.SetState(1738)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 224, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1727)
				p.Eov()
			}
			p.SetState(1731)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1728)
					p.Match(MojoParserEOL)
				}

				p.SetState(1733)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1734)
				p.ObjectLiteralItem()
			}

		}
		p.SetState(1740)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 224, p.GetParserRuleContext())
	}
	p.SetState(1742)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1741)
			p.Eov()
		}

	}

	return localctx
}

// IObjectLiteralItemContext is an interface to support dynamic dispatch.
type IObjectLiteralItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralItemContext differentiates from other interfaces.
	IsObjectLiteralItemContext()
}

type ObjectLiteralItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralItemContext() *ObjectLiteralItemContext {
	var p = new(ObjectLiteralItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_objectLiteralItem
	return p
}

func (*ObjectLiteralItemContext) IsObjectLiteralItemContext() {}

func NewObjectLiteralItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralItemContext {
	var p = new(ObjectLiteralItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_objectLiteralItem

	return p
}

func (s *ObjectLiteralItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralItemContext) PathIdentifier() IPathIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPathIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPathIdentifierContext)
}

func (s *ObjectLiteralItemContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *ObjectLiteralItemContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ObjectLiteralItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitObjectLiteralItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ObjectLiteralItem() (localctx IObjectLiteralItemContext) {
	this := p
	_ = this

	localctx = NewObjectLiteralItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, MojoParserRULE_objectLiteralItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1744)
		p.PathIdentifier()
	}
	p.SetState(1747)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserCOLON {
		{
			p.SetState(1745)
			p.Match(MojoParserCOLON)
		}
		{
			p.SetState(1746)
			p.Expression()
		}

	}

	return localctx
}

// IStructLiteralContext is an interface to support dynamic dispatch.
type IStructLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructLiteralContext differentiates from other interfaces.
	IsStructLiteralContext()
}

type StructLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructLiteralContext() *StructLiteralContext {
	var p = new(StructLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structLiteral
	return p
}

func (*StructLiteralContext) IsStructLiteralContext() {}

func NewStructLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructLiteralContext {
	var p = new(StructLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structLiteral

	return p
}

func (s *StructLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StructLiteralContext) TypeIdentifier() ITypeIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierContext)
}

func (s *StructLiteralContext) ObjectLiteral() IObjectLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IObjectLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *StructLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructLiteral() (localctx IStructLiteralContext) {
	this := p
	_ = this

	localctx = NewStructLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, MojoParserRULE_structLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1749)
		p.TypeIdentifier()
	}
	{
		p.SetState(1750)
		p.ObjectLiteral()
	}

	return localctx
}

// IStructConstructionExpressionContext is an interface to support dynamic dispatch.
type IStructConstructionExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructConstructionExpressionContext differentiates from other interfaces.
	IsStructConstructionExpressionContext()
}

type StructConstructionExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructConstructionExpressionContext() *StructConstructionExpressionContext {
	var p = new(StructConstructionExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structConstructionExpression
	return p
}

func (*StructConstructionExpressionContext) IsStructConstructionExpressionContext() {}

func NewStructConstructionExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructConstructionExpressionContext {
	var p = new(StructConstructionExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structConstructionExpression

	return p
}

func (s *StructConstructionExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *StructConstructionExpressionContext) TypeIdentifier() ITypeIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierContext)
}

func (s *StructConstructionExpressionContext) FunctionCallSuffix() IFunctionCallSuffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallSuffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallSuffixContext)
}

func (s *StructConstructionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructConstructionExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructConstructionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructConstructionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructConstructionExpression() (localctx IStructConstructionExpressionContext) {
	this := p
	_ = this

	localctx = NewStructConstructionExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, MojoParserRULE_structConstructionExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1752)
		p.TypeIdentifier()
	}
	{
		p.SetState(1753)
		p.FunctionCallSuffix()
	}

	return localctx
}

// IClosureExpressionContext is an interface to support dynamic dispatch.
type IClosureExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClosureExpressionContext differentiates from other interfaces.
	IsClosureExpressionContext()
}

type ClosureExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClosureExpressionContext() *ClosureExpressionContext {
	var p = new(ClosureExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_closureExpression
	return p
}

func (*ClosureExpressionContext) IsClosureExpressionContext() {}

func NewClosureExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClosureExpressionContext {
	var p = new(ClosureExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_closureExpression

	return p
}

func (s *ClosureExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ClosureExpressionContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *ClosureExpressionContext) Statements() IStatementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *ClosureExpressionContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *ClosureExpressionContext) ClosureParameters() IClosureParametersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClosureParametersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClosureParametersContext)
}

func (s *ClosureExpressionContext) RIGHT_ARROW() antlr.TerminalNode {
	return s.GetToken(MojoParserRIGHT_ARROW, 0)
}

func (s *ClosureExpressionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ClosureExpressionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ClosureExpressionContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ClosureExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClosureExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClosureExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitClosureExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ClosureExpression() (localctx IClosureExpressionContext) {
	this := p
	_ = this

	localctx = NewClosureExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, MojoParserRULE_closureExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1786)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 231, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1755)
			p.Match(MojoParserLCURLY)
		}
		{
			p.SetState(1756)
			p.Statements()
		}
		{
			p.SetState(1757)
			p.Match(MojoParserRCURLY)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1759)
			p.Match(MojoParserLCURLY)
		}
		{
			p.SetState(1760)
			p.ClosureParameters()
		}
		p.SetState(1764)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1761)
				p.Match(MojoParserEOL)
			}

			p.SetState(1766)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1767)
			p.Match(MojoParserRIGHT_ARROW)
		}
		p.SetState(1775)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext()) == 1 {
			p.SetState(1771)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1768)
					p.Match(MojoParserEOL)
				}

				p.SetState(1773)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1774)
				p.type_(0)
			}

		}
		p.SetState(1780)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1777)
				p.Match(MojoParserEOL)
			}

			p.SetState(1782)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1783)
			p.Statements()
		}
		{
			p.SetState(1784)
			p.Match(MojoParserRCURLY)
		}

	}

	return localctx
}

// IClosureParametersContext is an interface to support dynamic dispatch.
type IClosureParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClosureParametersContext differentiates from other interfaces.
	IsClosureParametersContext()
}

type ClosureParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClosureParametersContext() *ClosureParametersContext {
	var p = new(ClosureParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_closureParameters
	return p
}

func (*ClosureParametersContext) IsClosureParametersContext() {}

func NewClosureParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClosureParametersContext {
	var p = new(ClosureParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_closureParameters

	return p
}

func (s *ClosureParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *ClosureParametersContext) AllClosureParameter() []IClosureParameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IClosureParameterContext); ok {
			len++
		}
	}

	tst := make([]IClosureParameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IClosureParameterContext); ok {
			tst[i] = t.(IClosureParameterContext)
			i++
		}
	}

	return tst
}

func (s *ClosureParametersContext) ClosureParameter(i int) IClosureParameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClosureParameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClosureParameterContext)
}

func (s *ClosureParametersContext) AllEov() []IEovContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovContext); ok {
			len++
		}
	}

	tst := make([]IEovContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovContext); ok {
			tst[i] = t.(IEovContext)
			i++
		}
	}

	return tst
}

func (s *ClosureParametersContext) Eov(i int) IEovContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ClosureParametersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ClosureParametersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ClosureParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClosureParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClosureParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitClosureParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ClosureParameters() (localctx IClosureParametersContext) {
	this := p
	_ = this

	localctx = NewClosureParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, MojoParserRULE_closureParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1788)
		p.ClosureParameter()
	}
	p.SetState(1800)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1789)
				p.Eov()
			}
			p.SetState(1793)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1790)
					p.Match(MojoParserEOL)
				}

				p.SetState(1795)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1796)
				p.ClosureParameter()
			}

		}
		p.SetState(1802)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext())
	}
	p.SetState(1804)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1803)
			p.Eov()
		}

	}

	return localctx
}

// IClosureParameterContext is an interface to support dynamic dispatch.
type IClosureParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClosureParameterContext differentiates from other interfaces.
	IsClosureParameterContext()
}

type ClosureParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClosureParameterContext() *ClosureParameterContext {
	var p = new(ClosureParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_closureParameter
	return p
}

func (*ClosureParameterContext) IsClosureParameterContext() {}

func NewClosureParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClosureParameterContext {
	var p = new(ClosureParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_closureParameter

	return p
}

func (s *ClosureParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ClosureParameterContext) FunctionParameter() IFunctionParameterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionParameterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterContext)
}

func (s *ClosureParameterContext) LabelIdentifier() ILabelIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *ClosureParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClosureParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClosureParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitClosureParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ClosureParameter() (localctx IClosureParameterContext) {
	this := p
	_ = this

	localctx = NewClosureParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, MojoParserRULE_closureParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1808)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 235, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1806)
			p.FunctionParameter()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1807)
			p.LabelIdentifier()
		}

	}

	return localctx
}

// IImplicitMemberExpressionContext is an interface to support dynamic dispatch.
type IImplicitMemberExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplicitMemberExpressionContext differentiates from other interfaces.
	IsImplicitMemberExpressionContext()
}

type ImplicitMemberExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplicitMemberExpressionContext() *ImplicitMemberExpressionContext {
	var p = new(ImplicitMemberExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_implicitMemberExpression
	return p
}

func (*ImplicitMemberExpressionContext) IsImplicitMemberExpressionContext() {}

func NewImplicitMemberExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplicitMemberExpressionContext {
	var p = new(ImplicitMemberExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_implicitMemberExpression

	return p
}

func (s *ImplicitMemberExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplicitMemberExpressionContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImplicitMemberExpressionContext) LabelIdentifier() ILabelIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *ImplicitMemberExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplicitMemberExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplicitMemberExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImplicitMemberExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImplicitMemberExpression() (localctx IImplicitMemberExpressionContext) {
	this := p
	_ = this

	localctx = NewImplicitMemberExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, MojoParserRULE_implicitMemberExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1810)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(1811)
		p.LabelIdentifier()
	}

	return localctx
}

// IParenthesizedExpressionContext is an interface to support dynamic dispatch.
type IParenthesizedExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParenthesizedExpressionContext differentiates from other interfaces.
	IsParenthesizedExpressionContext()
}

type ParenthesizedExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesizedExpressionContext() *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_parenthesizedExpression
	return p
}

func (*ParenthesizedExpressionContext) IsParenthesizedExpressionContext() {}

func NewParenthesizedExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_parenthesizedExpression

	return p
}

func (s *ParenthesizedExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ParenthesizedExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *ParenthesizedExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *ParenthesizedExpressionContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenthesizedExpressionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ParenthesizedExpressionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ParenthesizedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParenthesizedExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitParenthesizedExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ParenthesizedExpression() (localctx IParenthesizedExpressionContext) {
	this := p
	_ = this

	localctx = NewParenthesizedExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, MojoParserRULE_parenthesizedExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1813)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(1817)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1814)
			p.Match(MojoParserEOL)
		}

		p.SetState(1819)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	{
		p.SetState(1820)
		p.Expression()
	}

	p.SetState(1824)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1821)
			p.Match(MojoParserEOL)
		}

		p.SetState(1826)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1827)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// ITupleExpressionContext is an interface to support dynamic dispatch.
type ITupleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleExpressionContext differentiates from other interfaces.
	IsTupleExpressionContext()
}

type TupleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExpressionContext() *TupleExpressionContext {
	var p = new(TupleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleExpression
	return p
}

func (*TupleExpressionContext) IsTupleExpressionContext() {}

func NewTupleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExpressionContext {
	var p = new(TupleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleExpression

	return p
}

func (s *TupleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *TupleExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *TupleExpressionContext) AllTupleElement() []ITupleElementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITupleElementContext); ok {
			len++
		}
	}

	tst := make([]ITupleElementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITupleElementContext); ok {
			tst[i] = t.(ITupleElementContext)
			i++
		}
	}

	return tst
}

func (s *TupleExpressionContext) TupleElement(i int) ITupleElementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleElementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleElementContext)
}

func (s *TupleExpressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MojoParserCOMMA)
}

func (s *TupleExpressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, i)
}

func (s *TupleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleExpression() (localctx ITupleExpressionContext) {
	this := p
	_ = this

	localctx = NewTupleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, MojoParserRULE_tupleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1841)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 239, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1829)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1830)
			p.Match(MojoParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1831)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1832)
			p.TupleElement()
		}
		p.SetState(1835)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MojoParserCOMMA {
			{
				p.SetState(1833)
				p.Match(MojoParserCOMMA)
			}
			{
				p.SetState(1834)
				p.TupleElement()
			}

			p.SetState(1837)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1839)
			p.Match(MojoParserRPAREN)
		}

	}

	return localctx
}

// ITupleElementContext is an interface to support dynamic dispatch.
type ITupleElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleElementContext differentiates from other interfaces.
	IsTupleElementContext()
}

type TupleElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleElementContext() *TupleElementContext {
	var p = new(TupleElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleElement
	return p
}

func (*TupleElementContext) IsTupleElementContext() {}

func NewTupleElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleElementContext {
	var p = new(TupleElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleElement

	return p
}

func (s *TupleElementContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleElementContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleElementContext) LabelIdentifier() ILabelIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *TupleElementContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TupleElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleElement() (localctx ITupleElementContext) {
	this := p
	_ = this

	localctx = NewTupleElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, MojoParserRULE_tupleElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1850)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 241, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1843)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1844)
			p.LabelIdentifier()
		}
		p.SetState(1846)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserCOLON {
			{
				p.SetState(1845)
				p.Match(MojoParserCOLON)
			}

		}
		{
			p.SetState(1848)
			p.Expression()
		}

	}

	return localctx
}

// IWildcardExpressionContext is an interface to support dynamic dispatch.
type IWildcardExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWildcardExpressionContext differentiates from other interfaces.
	IsWildcardExpressionContext()
}

type WildcardExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWildcardExpressionContext() *WildcardExpressionContext {
	var p = new(WildcardExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_wildcardExpression
	return p
}

func (*WildcardExpressionContext) IsWildcardExpressionContext() {}

func NewWildcardExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WildcardExpressionContext {
	var p = new(WildcardExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_wildcardExpression

	return p
}

func (s *WildcardExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *WildcardExpressionContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(MojoParserUNDERSCORE, 0)
}

func (s *WildcardExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildcardExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WildcardExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitWildcardExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) WildcardExpression() (localctx IWildcardExpressionContext) {
	this := p
	_ = this

	localctx = NewWildcardExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, MojoParserRULE_wildcardExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1852)
		p.Match(MojoParserUNDERSCORE)
	}

	return localctx
}

// IPostfixExpressionContext is an interface to support dynamic dispatch.
type IPostfixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixExpressionContext differentiates from other interfaces.
	IsPostfixExpressionContext()
}

type PostfixExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixExpressionContext() *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_postfixExpression
	return p
}

func (*PostfixExpressionContext) IsPostfixExpressionContext() {}

func NewPostfixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_postfixExpression

	return p
}

func (s *PostfixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *PostfixExpressionContext) AllSuffixExpression() []ISuffixExpressionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISuffixExpressionContext); ok {
			len++
		}
	}

	tst := make([]ISuffixExpressionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISuffixExpressionContext); ok {
			tst[i] = t.(ISuffixExpressionContext)
			i++
		}
	}

	return tst
}

func (s *PostfixExpressionContext) SuffixExpression(i int) ISuffixExpressionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISuffixExpressionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISuffixExpressionContext)
}

func (s *PostfixExpressionContext) PostfixOperator() IPostfixOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPostfixOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPostfixOperatorContext)
}

func (s *PostfixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPostfixExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PostfixExpression() (localctx IPostfixExpressionContext) {
	this := p
	_ = this

	localctx = NewPostfixExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, MojoParserRULE_postfixExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1854)
		p.PrimaryExpression()
	}
	p.SetState(1858)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1855)
				p.SuffixExpression()
			}

		}
		p.SetState(1860)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext())
	}
	p.SetState(1862)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 243, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1861)
			p.PostfixOperator()
		}

	}

	return localctx
}

// ISuffixExpressionContext is an interface to support dynamic dispatch.
type ISuffixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuffixExpressionContext differentiates from other interfaces.
	IsSuffixExpressionContext()
}

type SuffixExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuffixExpressionContext() *SuffixExpressionContext {
	var p = new(SuffixExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_suffixExpression
	return p
}

func (*SuffixExpressionContext) IsSuffixExpressionContext() {}

func NewSuffixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuffixExpressionContext {
	var p = new(SuffixExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_suffixExpression

	return p
}

func (s *SuffixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SuffixExpressionContext) FunctionCallSuffix() IFunctionCallSuffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallSuffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallSuffixContext)
}

func (s *SuffixExpressionContext) ExplicitMemberSuffix() IExplicitMemberSuffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExplicitMemberSuffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExplicitMemberSuffixContext)
}

func (s *SuffixExpressionContext) SubscriptSuffix() ISubscriptSuffixContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISubscriptSuffixContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISubscriptSuffixContext)
}

func (s *SuffixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuffixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuffixExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitSuffixExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) SuffixExpression() (localctx ISuffixExpressionContext) {
	this := p
	_ = this

	localctx = NewSuffixExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, MojoParserRULE_suffixExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1867)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLCURLY, MojoParserLPAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1864)
			p.FunctionCallSuffix()
		}

	case MojoParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1865)
			p.ExplicitMemberSuffix()
		}

	case MojoParserLBRACK:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1866)
			p.SubscriptSuffix()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExplicitMemberSuffixContext is an interface to support dynamic dispatch.
type IExplicitMemberSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplicitMemberSuffixContext differentiates from other interfaces.
	IsExplicitMemberSuffixContext()
}

type ExplicitMemberSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplicitMemberSuffixContext() *ExplicitMemberSuffixContext {
	var p = new(ExplicitMemberSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_explicitMemberSuffix
	return p
}

func (*ExplicitMemberSuffixContext) IsExplicitMemberSuffixContext() {}

func NewExplicitMemberSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplicitMemberSuffixContext {
	var p = new(ExplicitMemberSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_explicitMemberSuffix

	return p
}

func (s *ExplicitMemberSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplicitMemberSuffixContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ExplicitMemberSuffixContext) PURE_DECIMAL_DIGITS() antlr.TerminalNode {
	return s.GetToken(MojoParserPURE_DECIMAL_DIGITS, 0)
}

func (s *ExplicitMemberSuffixContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExplicitMemberSuffixContext) GenericArgumentClause() IGenericArgumentClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericArgumentClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *ExplicitMemberSuffixContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *ExplicitMemberSuffixContext) ArgumentNames() IArgumentNamesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentNamesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentNamesContext)
}

func (s *ExplicitMemberSuffixContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *ExplicitMemberSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitMemberSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplicitMemberSuffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExplicitMemberSuffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ExplicitMemberSuffix() (localctx IExplicitMemberSuffixContext) {
	this := p
	_ = this

	localctx = NewExplicitMemberSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, MojoParserRULE_explicitMemberSuffix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1869)
		p.Match(MojoParserDOT)
	}
	p.SetState(1879)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserPURE_DECIMAL_DIGITS:
		{
			p.SetState(1870)
			p.Match(MojoParserPURE_DECIMAL_DIGITS)
		}

	case MojoParserVALUE_IDENTIFIER, MojoParserIMPLICIT_PARAMETER_NAME:
		{
			p.SetState(1871)
			p.Identifier()
		}
		p.SetState(1877)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1872)
				p.GenericArgumentClause()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 245, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1873)
				p.Match(MojoParserLPAREN)
			}
			{
				p.SetState(1874)
				p.ArgumentNames()
			}
			{
				p.SetState(1875)
				p.Match(MojoParserRPAREN)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISubscriptSuffixContext is an interface to support dynamic dispatch.
type ISubscriptSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubscriptSuffixContext differentiates from other interfaces.
	IsSubscriptSuffixContext()
}

type SubscriptSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubscriptSuffixContext() *SubscriptSuffixContext {
	var p = new(SubscriptSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_subscriptSuffix
	return p
}

func (*SubscriptSuffixContext) IsSubscriptSuffixContext() {}

func NewSubscriptSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubscriptSuffixContext {
	var p = new(SubscriptSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_subscriptSuffix

	return p
}

func (s *SubscriptSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *SubscriptSuffixContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserLBRACK, 0)
}

func (s *SubscriptSuffixContext) FunctionCallArguments() IFunctionCallArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentsContext)
}

func (s *SubscriptSuffixContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserRBRACK, 0)
}

func (s *SubscriptSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubscriptSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubscriptSuffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitSubscriptSuffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) SubscriptSuffix() (localctx ISubscriptSuffixContext) {
	this := p
	_ = this

	localctx = NewSubscriptSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, MojoParserRULE_subscriptSuffix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1881)
		p.Match(MojoParserLBRACK)
	}
	{
		p.SetState(1882)
		p.FunctionCallArguments()
	}
	{
		p.SetState(1883)
		p.Match(MojoParserRBRACK)
	}

	return localctx
}

// IFunctionCallSuffixContext is an interface to support dynamic dispatch.
type IFunctionCallSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallSuffixContext differentiates from other interfaces.
	IsFunctionCallSuffixContext()
}

type FunctionCallSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallSuffixContext() *FunctionCallSuffixContext {
	var p = new(FunctionCallSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionCallSuffix
	return p
}

func (*FunctionCallSuffixContext) IsFunctionCallSuffixContext() {}

func NewFunctionCallSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallSuffixContext {
	var p = new(FunctionCallSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionCallSuffix

	return p
}

func (s *FunctionCallSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallSuffixContext) TrailingClosures() ITrailingClosuresContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITrailingClosuresContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITrailingClosuresContext)
}

func (s *FunctionCallSuffixContext) FunctionCallArgumentClause() IFunctionCallArgumentClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallArgumentClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentClauseContext)
}

func (s *FunctionCallSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallSuffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionCallSuffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionCallSuffix() (localctx IFunctionCallSuffixContext) {
	this := p
	_ = this

	localctx = NewFunctionCallSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, MojoParserRULE_functionCallSuffix)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1890)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1886)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserLPAREN {
			{
				p.SetState(1885)
				p.FunctionCallArgumentClause()
			}

		}
		{
			p.SetState(1888)
			p.TrailingClosures()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1889)
			p.FunctionCallArgumentClause()
		}

	}

	return localctx
}

// IFunctionCallArgumentClauseContext is an interface to support dynamic dispatch.
type IFunctionCallArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallArgumentClauseContext differentiates from other interfaces.
	IsFunctionCallArgumentClauseContext()
}

type FunctionCallArgumentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallArgumentClauseContext() *FunctionCallArgumentClauseContext {
	var p = new(FunctionCallArgumentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionCallArgumentClause
	return p
}

func (*FunctionCallArgumentClauseContext) IsFunctionCallArgumentClauseContext() {}

func NewFunctionCallArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallArgumentClauseContext {
	var p = new(FunctionCallArgumentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionCallArgumentClause

	return p
}

func (s *FunctionCallArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallArgumentClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *FunctionCallArgumentClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *FunctionCallArgumentClauseContext) FunctionCallArguments() IFunctionCallArgumentsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallArgumentsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentsContext)
}

func (s *FunctionCallArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallArgumentClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionCallArgumentClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionCallArgumentClause() (localctx IFunctionCallArgumentClauseContext) {
	this := p
	_ = this

	localctx = NewFunctionCallArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, MojoParserRULE_functionCallArgumentClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1898)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1892)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1893)
			p.Match(MojoParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1894)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1895)
			p.FunctionCallArguments()
		}
		{
			p.SetState(1896)
			p.Match(MojoParserRPAREN)
		}

	}

	return localctx
}

// IFunctionCallArgumentsContext is an interface to support dynamic dispatch.
type IFunctionCallArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallArgumentsContext differentiates from other interfaces.
	IsFunctionCallArgumentsContext()
}

type FunctionCallArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallArgumentsContext() *FunctionCallArgumentsContext {
	var p = new(FunctionCallArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionCallArguments
	return p
}

func (*FunctionCallArgumentsContext) IsFunctionCallArgumentsContext() {}

func NewFunctionCallArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallArgumentsContext {
	var p = new(FunctionCallArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionCallArguments

	return p
}

func (s *FunctionCallArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallArgumentsContext) AllFunctionCallArgument() []IFunctionCallArgumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFunctionCallArgumentContext); ok {
			len++
		}
	}

	tst := make([]IFunctionCallArgumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFunctionCallArgumentContext); ok {
			tst[i] = t.(IFunctionCallArgumentContext)
			i++
		}
	}

	return tst
}

func (s *FunctionCallArgumentsContext) FunctionCallArgument(i int) IFunctionCallArgumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionCallArgumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentContext)
}

func (s *FunctionCallArgumentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MojoParserCOMMA)
}

func (s *FunctionCallArgumentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, i)
}

func (s *FunctionCallArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionCallArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionCallArguments() (localctx IFunctionCallArgumentsContext) {
	this := p
	_ = this

	localctx = NewFunctionCallArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, MojoParserRULE_functionCallArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1900)
		p.FunctionCallArgument()
	}
	p.SetState(1905)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserCOMMA {
		{
			p.SetState(1901)
			p.Match(MojoParserCOMMA)
		}
		{
			p.SetState(1902)
			p.FunctionCallArgument()
		}

		p.SetState(1907)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctionCallArgumentContext is an interface to support dynamic dispatch.
type IFunctionCallArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallArgumentContext differentiates from other interfaces.
	IsFunctionCallArgumentContext()
}

type FunctionCallArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallArgumentContext() *FunctionCallArgumentContext {
	var p = new(FunctionCallArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionCallArgument
	return p
}

func (*FunctionCallArgumentContext) IsFunctionCallArgumentContext() {}

func NewFunctionCallArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallArgumentContext {
	var p = new(FunctionCallArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionCallArgument

	return p
}

func (s *FunctionCallArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallArgumentContext) Expression() IExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallArgumentContext) LabelIdentifier() ILabelIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *FunctionCallArgumentContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *FunctionCallArgumentContext) Operator() IOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *FunctionCallArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionCallArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionCallArgument() (localctx IFunctionCallArgumentContext) {
	this := p
	_ = this

	localctx = NewFunctionCallArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, MojoParserRULE_functionCallArgument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1922)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 253, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1908)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1909)
			p.LabelIdentifier()
		}
		p.SetState(1911)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserCOLON {
			{
				p.SetState(1910)
				p.Match(MojoParserCOLON)
			}

		}
		{
			p.SetState(1913)
			p.Expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1915)
			p.Operator()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1916)
			p.LabelIdentifier()
		}
		p.SetState(1918)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserCOLON {
			{
				p.SetState(1917)
				p.Match(MojoParserCOLON)
			}

		}
		{
			p.SetState(1920)
			p.Operator()
		}

	}

	return localctx
}

// ITrailingClosuresContext is an interface to support dynamic dispatch.
type ITrailingClosuresContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrailingClosuresContext differentiates from other interfaces.
	IsTrailingClosuresContext()
}

type TrailingClosuresContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailingClosuresContext() *TrailingClosuresContext {
	var p = new(TrailingClosuresContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_trailingClosures
	return p
}

func (*TrailingClosuresContext) IsTrailingClosuresContext() {}

func NewTrailingClosuresContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailingClosuresContext {
	var p = new(TrailingClosuresContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_trailingClosures

	return p
}

func (s *TrailingClosuresContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailingClosuresContext) ClosureExpression() IClosureExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClosureExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClosureExpressionContext)
}

func (s *TrailingClosuresContext) LabeledTrailingClosures() ILabeledTrailingClosuresContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabeledTrailingClosuresContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabeledTrailingClosuresContext)
}

func (s *TrailingClosuresContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailingClosuresContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrailingClosuresContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTrailingClosures(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TrailingClosures() (localctx ITrailingClosuresContext) {
	this := p
	_ = this

	localctx = NewTrailingClosuresContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 272, MojoParserRULE_trailingClosures)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1924)
		p.ClosureExpression()
	}
	p.SetState(1926)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1925)
			p.LabeledTrailingClosures()
		}

	}

	return localctx
}

// ILabeledTrailingClosuresContext is an interface to support dynamic dispatch.
type ILabeledTrailingClosuresContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabeledTrailingClosuresContext differentiates from other interfaces.
	IsLabeledTrailingClosuresContext()
}

type LabeledTrailingClosuresContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledTrailingClosuresContext() *LabeledTrailingClosuresContext {
	var p = new(LabeledTrailingClosuresContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_labeledTrailingClosures
	return p
}

func (*LabeledTrailingClosuresContext) IsLabeledTrailingClosuresContext() {}

func NewLabeledTrailingClosuresContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledTrailingClosuresContext {
	var p = new(LabeledTrailingClosuresContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_labeledTrailingClosures

	return p
}

func (s *LabeledTrailingClosuresContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledTrailingClosuresContext) AllLabeledTrailingClosure() []ILabeledTrailingClosureContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ILabeledTrailingClosureContext); ok {
			len++
		}
	}

	tst := make([]ILabeledTrailingClosureContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ILabeledTrailingClosureContext); ok {
			tst[i] = t.(ILabeledTrailingClosureContext)
			i++
		}
	}

	return tst
}

func (s *LabeledTrailingClosuresContext) LabeledTrailingClosure(i int) ILabeledTrailingClosureContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabeledTrailingClosureContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabeledTrailingClosureContext)
}

func (s *LabeledTrailingClosuresContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledTrailingClosuresContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabeledTrailingClosuresContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLabeledTrailingClosures(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LabeledTrailingClosures() (localctx ILabeledTrailingClosuresContext) {
	this := p
	_ = this

	localctx = NewLabeledTrailingClosuresContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 274, MojoParserRULE_labeledTrailingClosures)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1929)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1928)
				p.LabeledTrailingClosure()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1931)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext())
	}

	return localctx
}

// ILabeledTrailingClosureContext is an interface to support dynamic dispatch.
type ILabeledTrailingClosureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabeledTrailingClosureContext differentiates from other interfaces.
	IsLabeledTrailingClosureContext()
}

type LabeledTrailingClosureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledTrailingClosureContext() *LabeledTrailingClosureContext {
	var p = new(LabeledTrailingClosureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_labeledTrailingClosure
	return p
}

func (*LabeledTrailingClosureContext) IsLabeledTrailingClosureContext() {}

func NewLabeledTrailingClosureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledTrailingClosureContext {
	var p = new(LabeledTrailingClosureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_labeledTrailingClosure

	return p
}

func (s *LabeledTrailingClosureContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledTrailingClosureContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LabeledTrailingClosureContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *LabeledTrailingClosureContext) ClosureExpression() IClosureExpressionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IClosureExpressionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IClosureExpressionContext)
}

func (s *LabeledTrailingClosureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledTrailingClosureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabeledTrailingClosureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLabeledTrailingClosure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LabeledTrailingClosure() (localctx ILabeledTrailingClosureContext) {
	this := p
	_ = this

	localctx = NewLabeledTrailingClosureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, MojoParserRULE_labeledTrailingClosure)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1933)
		p.Identifier()
	}
	{
		p.SetState(1934)
		p.Match(MojoParserCOLON)
	}
	{
		p.SetState(1935)
		p.ClosureExpression()
	}

	return localctx
}

// IArgumentNamesContext is an interface to support dynamic dispatch.
type IArgumentNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentNamesContext differentiates from other interfaces.
	IsArgumentNamesContext()
}

type ArgumentNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentNamesContext() *ArgumentNamesContext {
	var p = new(ArgumentNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_argumentNames
	return p
}

func (*ArgumentNamesContext) IsArgumentNamesContext() {}

func NewArgumentNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentNamesContext {
	var p = new(ArgumentNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_argumentNames

	return p
}

func (s *ArgumentNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentNamesContext) AllArgumentName() []IArgumentNameContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IArgumentNameContext); ok {
			len++
		}
	}

	tst := make([]IArgumentNameContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IArgumentNameContext); ok {
			tst[i] = t.(IArgumentNameContext)
			i++
		}
	}

	return tst
}

func (s *ArgumentNamesContext) ArgumentName(i int) IArgumentNameContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgumentNameContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgumentNameContext)
}

func (s *ArgumentNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArgumentNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArgumentNames() (localctx IArgumentNamesContext) {
	this := p
	_ = this

	localctx = NewArgumentNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, MojoParserRULE_argumentNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1937)
		p.ArgumentName()
	}
	p.SetState(1941)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1073741822) != 0 || _la == MojoParserVALUE_IDENTIFIER {
		{
			p.SetState(1938)
			p.ArgumentName()
		}

		p.SetState(1943)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IArgumentNameContext is an interface to support dynamic dispatch.
type IArgumentNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentNameContext differentiates from other interfaces.
	IsArgumentNameContext()
}

type ArgumentNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentNameContext() *ArgumentNameContext {
	var p = new(ArgumentNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_argumentName
	return p
}

func (*ArgumentNameContext) IsArgumentNameContext() {}

func NewArgumentNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentNameContext {
	var p = new(ArgumentNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_argumentName

	return p
}

func (s *ArgumentNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentNameContext) LabelIdentifier() ILabelIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILabelIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *ArgumentNameContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *ArgumentNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArgumentName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArgumentName() (localctx IArgumentNameContext) {
	this := p
	_ = this

	localctx = NewArgumentNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, MojoParserRULE_argumentName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1944)
		p.LabelIdentifier()
	}
	{
		p.SetState(1945)
		p.Match(MojoParserCOLON)
	}

	return localctx
}

// IType_Context is an interface to support dynamic dispatch.
type IType_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_Context differentiates from other interfaces.
	IsType_Context()
}

type Type_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_Context() *Type_Context {
	var p = new(Type_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_type_
	return p
}

func (*Type_Context) IsType_Context() {}

func NewType_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_Context {
	var p = new(Type_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_type_

	return p
}

func (s *Type_Context) GetParser() antlr.Parser { return s.parser }

func (s *Type_Context) BasicType() IBasicTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBasicTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBasicTypeContext)
}

func (s *Type_Context) FunctionType() IFunctionTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeContext)
}

func (s *Type_Context) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *Type_Context) BANG() antlr.TerminalNode {
	return s.GetToken(MojoParserBANG, 0)
}

func (s *Type_Context) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *Type_Context) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(MojoParserELLIPSIS, 0)
}

func (s *Type_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitType_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Type_() (localctx IType_Context) {
	return p.type_(0)
}

func (p *MojoParser) type_(_p int) (localctx IType_Context) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewType_Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IType_Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 282
	p.EnterRecursionRule(localctx, 282, MojoParserRULE_type_, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1950)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 257, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1948)
			p.basicType(0)
		}

	case 2:
		{
			p.SetState(1949)
			p.FunctionType()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1960)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 259, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1958)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 258, p.GetParserRuleContext()) {
			case 1:
				localctx = NewType_Context(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_type_)
				p.SetState(1952)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1953)
					p.Match(MojoParserBANG)
				}

			case 2:
				localctx = NewType_Context(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_type_)
				p.SetState(1954)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1955)
					p.Match(MojoParserQUESTION)
				}

			case 3:
				localctx = NewType_Context(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_type_)
				p.SetState(1956)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1957)
					p.Match(MojoParserELLIPSIS)
				}

			}

		}
		p.SetState(1962)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 259, p.GetParserRuleContext())
	}

	return localctx
}

// IBasicTypeContext is an interface to support dynamic dispatch.
type IBasicTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBasicTypeContext differentiates from other interfaces.
	IsBasicTypeContext()
}

type BasicTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasicTypeContext() *BasicTypeContext {
	var p = new(BasicTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_basicType
	return p
}

func (*BasicTypeContext) IsBasicTypeContext() {}

func NewBasicTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicTypeContext {
	var p = new(BasicTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_basicType

	return p
}

func (s *BasicTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicTypeContext) CopyFrom(ctx *BasicTypeContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *BasicTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IntersectionContext struct {
	*BasicTypeContext
}

func NewIntersectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntersectionContext {
	var p = new(IntersectionContext)

	p.BasicTypeContext = NewEmptyBasicTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BasicTypeContext))

	return p
}

func (s *IntersectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntersectionContext) AllBasicType() []IBasicTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBasicTypeContext); ok {
			len++
		}
	}

	tst := make([]IBasicTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBasicTypeContext); ok {
			tst[i] = t.(IBasicTypeContext)
			i++
		}
	}

	return tst
}

func (s *IntersectionContext) BasicType(i int) IBasicTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBasicTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBasicTypeContext)
}

func (s *IntersectionContext) AND() antlr.TerminalNode {
	return s.GetToken(MojoParserAND, 0)
}

func (s *IntersectionContext) AllAttributes() []IAttributesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributesContext); ok {
			len++
		}
	}

	tst := make([]IAttributesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributesContext); ok {
			tst[i] = t.(IAttributesContext)
			i++
		}
	}

	return tst
}

func (s *IntersectionContext) Attributes(i int) IAttributesContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *IntersectionContext) AllFollowingDocument() []IFollowingDocumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			len++
		}
	}

	tst := make([]IFollowingDocumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFollowingDocumentContext); ok {
			tst[i] = t.(IFollowingDocumentContext)
			i++
		}
	}

	return tst
}

func (s *IntersectionContext) FollowingDocument(i int) IFollowingDocumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *IntersectionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *IntersectionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *IntersectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIntersection(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrimeContext struct {
	*BasicTypeContext
}

func NewPrimeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimeContext {
	var p = new(PrimeContext)

	p.BasicTypeContext = NewEmptyBasicTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BasicTypeContext))

	return p
}

func (s *PrimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimeContext) PrimeType() IPrimeTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimeTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimeTypeContext)
}

func (s *PrimeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrime(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnionContext struct {
	*BasicTypeContext
}

func NewUnionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnionContext {
	var p = new(UnionContext)

	p.BasicTypeContext = NewEmptyBasicTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BasicTypeContext))

	return p
}

func (s *UnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionContext) AllBasicType() []IBasicTypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBasicTypeContext); ok {
			len++
		}
	}

	tst := make([]IBasicTypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBasicTypeContext); ok {
			tst[i] = t.(IBasicTypeContext)
			i++
		}
	}

	return tst
}

func (s *UnionContext) BasicType(i int) IBasicTypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBasicTypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBasicTypeContext)
}

func (s *UnionContext) PIPE() antlr.TerminalNode {
	return s.GetToken(MojoParserPIPE, 0)
}

func (s *UnionContext) AllAttributes() []IAttributesContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IAttributesContext); ok {
			len++
		}
	}

	tst := make([]IAttributesContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IAttributesContext); ok {
			tst[i] = t.(IAttributesContext)
			i++
		}
	}

	return tst
}

func (s *UnionContext) Attributes(i int) IAttributesContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *UnionContext) AllFollowingDocument() []IFollowingDocumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			len++
		}
	}

	tst := make([]IFollowingDocumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFollowingDocumentContext); ok {
			tst[i] = t.(IFollowingDocumentContext)
			i++
		}
	}

	return tst
}

func (s *UnionContext) FollowingDocument(i int) IFollowingDocumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *UnionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *UnionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *UnionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitUnion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BasicType() (localctx IBasicTypeContext) {
	return p.basicType(0)
}

func (p *MojoParser) basicType(_p int) (localctx IBasicTypeContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBasicTypeContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBasicTypeContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 284
	p.EnterRecursionRule(localctx, 284, MojoParserRULE_basicType, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewPrimeContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(1964)
		p.PrimeType()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(2030)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(2028)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 272, p.GetParserRuleContext()) {
			case 1:
				localctx = NewUnionContext(p, NewBasicTypeContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_basicType)
				p.SetState(1966)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(1968)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MojoParserAT {
					{
						p.SetState(1967)
						p.Attributes()
					}

				}
				p.SetState(1973)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
					{
						p.SetState(1970)
						p.FollowingDocument()
					}
					{
						p.SetState(1971)
						p.Match(MojoParserEOL)
					}

				}
				p.SetState(1978)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(1975)
						p.Match(MojoParserEOL)
					}

					p.SetState(1980)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1981)
					p.Match(MojoParserPIPE)
				}
				p.SetState(1985)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(1982)
						p.Match(MojoParserEOL)
					}

					p.SetState(1987)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1988)
					p.basicType(0)
				}
				p.SetState(1990)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 264, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1989)
						p.Attributes()
					}

				}
				p.SetState(1995)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 265, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1992)
						p.FollowingDocument()
					}
					{
						p.SetState(1993)
						p.Match(MojoParserEOL)
					}

				}

			case 2:
				localctx = NewIntersectionContext(p, NewBasicTypeContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_basicType)
				p.SetState(1997)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				p.SetState(1999)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MojoParserAT {
					{
						p.SetState(1998)
						p.Attributes()
					}

				}
				p.SetState(2004)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
					{
						p.SetState(2001)
						p.FollowingDocument()
					}
					{
						p.SetState(2002)
						p.Match(MojoParserEOL)
					}

				}
				p.SetState(2009)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(2006)
						p.Match(MojoParserEOL)
					}

					p.SetState(2011)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(2012)
					p.Match(MojoParserAND)
				}
				p.SetState(2016)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(2013)
						p.Match(MojoParserEOL)
					}

					p.SetState(2018)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(2019)
					p.basicType(0)
				}
				p.SetState(2021)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 270, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(2020)
						p.Attributes()
					}

				}
				p.SetState(2026)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 271, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(2023)
						p.FollowingDocument()
					}
					{
						p.SetState(2024)
						p.Match(MojoParserEOL)
					}

				}

			}

		}
		p.SetState(2032)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimeTypeContext is an interface to support dynamic dispatch.
type IPrimeTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimeTypeContext differentiates from other interfaces.
	IsPrimeTypeContext()
}

type PrimeTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimeTypeContext() *PrimeTypeContext {
	var p = new(PrimeTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_primeType
	return p
}

func (*PrimeTypeContext) IsPrimeTypeContext() {}

func NewPrimeTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimeTypeContext {
	var p = new(PrimeTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_primeType

	return p
}

func (s *PrimeTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimeTypeContext) ArrayType() IArrayTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrayTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *PrimeTypeContext) MapType() IMapTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapTypeContext)
}

func (s *PrimeTypeContext) TupleType() ITupleTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleTypeContext)
}

func (s *PrimeTypeContext) TypeIdentifier() ITypeIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierContext)
}

func (s *PrimeTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimeTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimeTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrimeType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrimeType() (localctx IPrimeTypeContext) {
	this := p
	_ = this

	localctx = NewPrimeTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, MojoParserRULE_primeType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2037)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLBRACK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2033)
			p.ArrayType()
		}

	case MojoParserLCURLY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2034)
			p.MapType()
		}

	case MojoParserLPAREN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2035)
			p.TupleType()
		}

	case MojoParserTYPE_IDENTIFIER, MojoParserVALUE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2036)
			p.TypeIdentifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeAnnotationContext is an interface to support dynamic dispatch.
type ITypeAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAnnotationContext differentiates from other interfaces.
	IsTypeAnnotationContext()
}

type TypeAnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAnnotationContext() *TypeAnnotationContext {
	var p = new(TypeAnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeAnnotation
	return p
}

func (*TypeAnnotationContext) IsTypeAnnotationContext() {}

func NewTypeAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAnnotationContext {
	var p = new(TypeAnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeAnnotation

	return p
}

func (s *TypeAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAnnotationContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeAnnotationContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TypeAnnotationContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TypeAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeAnnotation() (localctx ITypeAnnotationContext) {
	this := p
	_ = this

	localctx = NewTypeAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, MojoParserRULE_typeAnnotation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2040)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserCOLON {
		{
			p.SetState(2039)
			p.Match(MojoParserCOLON)
		}

	}
	{
		p.SetState(2042)
		p.type_(0)
	}
	p.SetState(2044)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 276, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2043)
			p.Attributes()
		}

	}

	return localctx
}

// ITypeIdentifierContext is an interface to support dynamic dispatch.
type ITypeIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeIdentifierContext differentiates from other interfaces.
	IsTypeIdentifierContext()
}

type TypeIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeIdentifierContext() *TypeIdentifierContext {
	var p = new(TypeIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeIdentifier
	return p
}

func (*TypeIdentifierContext) IsTypeIdentifierContext() {}

func NewTypeIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeIdentifierContext {
	var p = new(TypeIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeIdentifier

	return p
}

func (s *TypeIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeIdentifierContext) AllTypeIdentifierClause() []ITypeIdentifierClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeIdentifierClauseContext); ok {
			len++
		}
	}

	tst := make([]ITypeIdentifierClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeIdentifierClauseContext); ok {
			tst[i] = t.(ITypeIdentifierClauseContext)
			i++
		}
	}

	return tst
}

func (s *TypeIdentifierContext) TypeIdentifierClause(i int) ITypeIdentifierClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeIdentifierClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierClauseContext)
}

func (s *TypeIdentifierContext) PackageIdentifier() IPackageIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPackageIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPackageIdentifierContext)
}

func (s *TypeIdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *TypeIdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *TypeIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeIdentifier() (localctx ITypeIdentifierContext) {
	this := p
	_ = this

	localctx = NewTypeIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, MojoParserRULE_typeIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2049)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserVALUE_IDENTIFIER {
		{
			p.SetState(2046)
			p.PackageIdentifier()
		}
		{
			p.SetState(2047)
			p.Match(MojoParserDOT)
		}

	}
	{
		p.SetState(2051)
		p.TypeIdentifierClause()
	}
	p.SetState(2056)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2052)
				p.Match(MojoParserDOT)
			}
			{
				p.SetState(2053)
				p.TypeIdentifierClause()
			}

		}
		p.SetState(2058)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 278, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeIdentifierClauseContext is an interface to support dynamic dispatch.
type ITypeIdentifierClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeIdentifierClauseContext differentiates from other interfaces.
	IsTypeIdentifierClauseContext()
}

type TypeIdentifierClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeIdentifierClauseContext() *TypeIdentifierClauseContext {
	var p = new(TypeIdentifierClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeIdentifierClause
	return p
}

func (*TypeIdentifierClauseContext) IsTypeIdentifierClauseContext() {}

func NewTypeIdentifierClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeIdentifierClauseContext {
	var p = new(TypeIdentifierClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeIdentifierClause

	return p
}

func (s *TypeIdentifierClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeIdentifierClauseContext) TypeName() ITypeNameContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeNameContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypeIdentifierClauseContext) GenericArgumentClause() IGenericArgumentClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericArgumentClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *TypeIdentifierClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeIdentifierClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeIdentifierClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeIdentifierClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeIdentifierClause() (localctx ITypeIdentifierClauseContext) {
	this := p
	_ = this

	localctx = NewTypeIdentifierClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, MojoParserRULE_typeIdentifierClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2059)
		p.TypeName()
	}
	p.SetState(2061)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 279, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2060)
			p.GenericArgumentClause()
		}

	}

	return localctx
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeName
	return p
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) TYPE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserTYPE_IDENTIFIER, 0)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeName() (localctx ITypeNameContext) {
	this := p
	_ = this

	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, MojoParserRULE_typeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2063)
		p.Match(MojoParserTYPE_IDENTIFIER)
	}

	return localctx
}

// ITupleTypeContext is an interface to support dynamic dispatch.
type ITupleTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeContext differentiates from other interfaces.
	IsTupleTypeContext()
}

type TupleTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeContext() *TupleTypeContext {
	var p = new(TupleTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleType
	return p
}

func (*TupleTypeContext) IsTupleTypeContext() {}

func NewTupleTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeContext {
	var p = new(TupleTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleType

	return p
}

func (s *TupleTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *TupleTypeContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *TupleTypeContext) TupleTypeElements() ITupleTypeElementsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleTypeElementsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleTypeElementsContext)
}

func (s *TupleTypeContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TupleTypeContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TupleTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleType() (localctx ITupleTypeContext) {
	this := p
	_ = this

	localctx = NewTupleTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, MojoParserRULE_tupleType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2065)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(2073)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 281, p.GetParserRuleContext()) == 1 {
		p.SetState(2069)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(2066)
				p.Match(MojoParserEOL)
			}

			p.SetState(2071)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(2072)
			p.TupleTypeElements()
		}

	}
	p.SetState(2078)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(2075)
			p.Match(MojoParserEOL)
		}

		p.SetState(2080)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2081)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// ITupleTypeElementsContext is an interface to support dynamic dispatch.
type ITupleTypeElementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeElementsContext differentiates from other interfaces.
	IsTupleTypeElementsContext()
}

type TupleTypeElementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeElementsContext() *TupleTypeElementsContext {
	var p = new(TupleTypeElementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleTypeElements
	return p
}

func (*TupleTypeElementsContext) IsTupleTypeElementsContext() {}

func NewTupleTypeElementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeElementsContext {
	var p = new(TupleTypeElementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleTypeElements

	return p
}

func (s *TupleTypeElementsContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeElementsContext) AllTupleTypeElement() []ITupleTypeElementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITupleTypeElementContext); ok {
			len++
		}
	}

	tst := make([]ITupleTypeElementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITupleTypeElementContext); ok {
			tst[i] = t.(ITupleTypeElementContext)
			i++
		}
	}

	return tst
}

func (s *TupleTypeElementsContext) TupleTypeElement(i int) ITupleTypeElementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleTypeElementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleTypeElementContext)
}

func (s *TupleTypeElementsContext) AllEovWithDocument() []IEovWithDocumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovWithDocumentContext); ok {
			len++
		}
	}

	tst := make([]IEovWithDocumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovWithDocumentContext); ok {
			tst[i] = t.(IEovWithDocumentContext)
			i++
		}
	}

	return tst
}

func (s *TupleTypeElementsContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovWithDocumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *TupleTypeElementsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TupleTypeElementsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TupleTypeElementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeElementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeElementsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleTypeElements(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleTypeElements() (localctx ITupleTypeElementsContext) {
	this := p
	_ = this

	localctx = NewTupleTypeElementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, MojoParserRULE_tupleTypeElements)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2083)
		p.TupleTypeElement()
	}
	p.SetState(2095)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 284, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2084)
				p.EovWithDocument()
			}
			p.SetState(2088)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(2085)
					p.Match(MojoParserEOL)
				}

				p.SetState(2090)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2091)
				p.TupleTypeElement()
			}

		}
		p.SetState(2097)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 284, p.GetParserRuleContext())
	}
	p.SetState(2099)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 285, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2098)
			p.EovWithDocument()
		}

	}

	return localctx
}

// ITupleTypeElementContext is an interface to support dynamic dispatch.
type ITupleTypeElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeElementContext differentiates from other interfaces.
	IsTupleTypeElementContext()
}

type TupleTypeElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeElementContext() *TupleTypeElementContext {
	var p = new(TupleTypeElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleTypeElement
	return p
}

func (*TupleTypeElementContext) IsTupleTypeElementContext() {}

func NewTupleTypeElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeElementContext {
	var p = new(TupleTypeElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleTypeElement

	return p
}

func (s *TupleTypeElementContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeElementContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TupleTypeElementContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *TupleTypeElementContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TupleTypeElementContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TupleTypeElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleTypeElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleTypeElement() (localctx ITupleTypeElementContext) {
	this := p
	_ = this

	localctx = NewTupleTypeElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, MojoParserRULE_tupleTypeElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2105)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 287, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2101)
			p.DeclarationIdentifier()
		}
		p.SetState(2103)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserCOLON {
			{
				p.SetState(2102)
				p.Match(MojoParserCOLON)
			}

		}

	}
	{
		p.SetState(2107)
		p.type_(0)
	}
	p.SetState(2109)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(2108)
			p.Attributes()
		}

	}

	return localctx
}

// IFunctionTypeContext is an interface to support dynamic dispatch.
type IFunctionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeContext differentiates from other interfaces.
	IsFunctionTypeContext()
}

type FunctionTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeContext() *FunctionTypeContext {
	var p = new(FunctionTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionType
	return p
}

func (*FunctionTypeContext) IsFunctionTypeContext() {}

func NewFunctionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionType

	return p
}

func (s *FunctionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeContext) FunctionParameterClause() IFunctionParameterClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionParameterClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterClauseContext)
}

func (s *FunctionTypeContext) ArrowOperator() IArrowOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArrowOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArrowOperatorContext)
}

func (s *FunctionTypeContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionTypeContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionType() (localctx IFunctionTypeContext) {
	this := p
	_ = this

	localctx = NewFunctionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, MojoParserRULE_functionType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2111)
		p.FunctionParameterClause()
	}
	{
		p.SetState(2112)
		p.ArrowOperator()
	}
	{
		p.SetState(2113)
		p.type_(0)
	}
	p.SetState(2115)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 289, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2114)
			p.Attributes()
		}

	}

	return localctx
}

// IArrayTypeContext is an interface to support dynamic dispatch.
type IArrayTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayTypeContext differentiates from other interfaces.
	IsArrayTypeContext()
}

type ArrayTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayTypeContext() *ArrayTypeContext {
	var p = new(ArrayTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayType
	return p
}

func (*ArrayTypeContext) IsArrayTypeContext() {}

func NewArrayTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayTypeContext {
	var p = new(ArrayTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayType

	return p
}

func (s *ArrayTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayTypeContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserLBRACK, 0)
}

func (s *ArrayTypeContext) Type_() IType_Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ArrayTypeContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserRBRACK, 0)
}

func (s *ArrayTypeContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *ArrayTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayType() (localctx IArrayTypeContext) {
	this := p
	_ = this

	localctx = NewArrayTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, MojoParserRULE_arrayType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2117)
		p.Match(MojoParserLBRACK)
	}
	{
		p.SetState(2118)
		p.type_(0)
	}
	p.SetState(2120)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(2119)
			p.Attributes()
		}

	}
	{
		p.SetState(2122)
		p.Match(MojoParserRBRACK)
	}

	return localctx
}

// IMapTypeContext is an interface to support dynamic dispatch.
type IMapTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapTypeContext differentiates from other interfaces.
	IsMapTypeContext()
}

type MapTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapTypeContext() *MapTypeContext {
	var p = new(MapTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_mapType
	return p
}

func (*MapTypeContext) IsMapTypeContext() {}

func NewMapTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapTypeContext {
	var p = new(MapTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_mapType

	return p
}

func (s *MapTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *MapTypeContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *MapTypeContext) AllType_() []IType_Context {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IType_Context); ok {
			len++
		}
	}

	tst := make([]IType_Context, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IType_Context); ok {
			tst[i] = t.(IType_Context)
			i++
		}
	}

	return tst
}

func (s *MapTypeContext) Type_(i int) IType_Context {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IType_Context); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *MapTypeContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *MapTypeContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *MapTypeContext) KeyAttributes() IKeyAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyAttributesContext)
}

func (s *MapTypeContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *MapTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMapType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MapType() (localctx IMapTypeContext) {
	this := p
	_ = this

	localctx = NewMapTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, MojoParserRULE_mapType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2124)
		p.Match(MojoParserLCURLY)
	}
	{
		p.SetState(2125)
		p.type_(0)
	}
	p.SetState(2127)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(2126)
			p.KeyAttributes()
		}

	}
	{
		p.SetState(2129)
		p.Match(MojoParserCOLON)
	}
	{
		p.SetState(2130)
		p.type_(0)
	}
	p.SetState(2132)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(2131)
			p.Attributes()
		}

	}
	{
		p.SetState(2134)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IKeyAttributesContext is an interface to support dynamic dispatch.
type IKeyAttributesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyAttributesContext differentiates from other interfaces.
	IsKeyAttributesContext()
}

type KeyAttributesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyAttributesContext() *KeyAttributesContext {
	var p = new(KeyAttributesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_keyAttributes
	return p
}

func (*KeyAttributesContext) IsKeyAttributesContext() {}

func NewKeyAttributesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyAttributesContext {
	var p = new(KeyAttributesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_keyAttributes

	return p
}

func (s *KeyAttributesContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyAttributesContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *KeyAttributesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyAttributesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyAttributesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitKeyAttributes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) KeyAttributes() (localctx IKeyAttributesContext) {
	this := p
	_ = this

	localctx = NewKeyAttributesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, MojoParserRULE_keyAttributes)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2136)
		p.Attributes()
	}

	return localctx
}

// ITypeInheritanceClauseContext is an interface to support dynamic dispatch.
type ITypeInheritanceClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeInheritanceClauseContext differentiates from other interfaces.
	IsTypeInheritanceClauseContext()
}

type TypeInheritanceClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeInheritanceClauseContext() *TypeInheritanceClauseContext {
	var p = new(TypeInheritanceClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeInheritanceClause
	return p
}

func (*TypeInheritanceClauseContext) IsTypeInheritanceClauseContext() {}

func NewTypeInheritanceClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeInheritanceClauseContext {
	var p = new(TypeInheritanceClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeInheritanceClause

	return p
}

func (s *TypeInheritanceClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeInheritanceClauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TypeInheritanceClauseContext) TypeInheritances() ITypeInheritancesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeInheritancesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeInheritancesContext)
}

func (s *TypeInheritanceClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypeInheritanceClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypeInheritanceClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeInheritanceClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeInheritanceClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeInheritanceClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeInheritanceClause() (localctx ITypeInheritanceClauseContext) {
	this := p
	_ = this

	localctx = NewTypeInheritanceClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, MojoParserRULE_typeInheritanceClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2138)
		p.Match(MojoParserCOLON)
	}
	p.SetState(2142)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(2139)
			p.Match(MojoParserEOL)
		}

		p.SetState(2144)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2145)
		p.TypeInheritances()
	}

	return localctx
}

// ITypeInheritancesContext is an interface to support dynamic dispatch.
type ITypeInheritancesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeInheritancesContext differentiates from other interfaces.
	IsTypeInheritancesContext()
}

type TypeInheritancesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeInheritancesContext() *TypeInheritancesContext {
	var p = new(TypeInheritancesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeInheritances
	return p
}

func (*TypeInheritancesContext) IsTypeInheritancesContext() {}

func NewTypeInheritancesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeInheritancesContext {
	var p = new(TypeInheritancesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeInheritances

	return p
}

func (s *TypeInheritancesContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeInheritancesContext) AllTypeInheritance() []ITypeInheritanceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeInheritanceContext); ok {
			len++
		}
	}

	tst := make([]ITypeInheritanceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeInheritanceContext); ok {
			tst[i] = t.(ITypeInheritanceContext)
			i++
		}
	}

	return tst
}

func (s *TypeInheritancesContext) TypeInheritance(i int) ITypeInheritanceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeInheritanceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceContext)
}

func (s *TypeInheritancesContext) AllEovWithDocument() []IEovWithDocumentContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEovWithDocumentContext); ok {
			len++
		}
	}

	tst := make([]IEovWithDocumentContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEovWithDocumentContext); ok {
			tst[i] = t.(IEovWithDocumentContext)
			i++
		}
	}

	return tst
}

func (s *TypeInheritancesContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEovWithDocumentContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *TypeInheritancesContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypeInheritancesContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypeInheritancesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeInheritancesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeInheritancesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeInheritances(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeInheritances() (localctx ITypeInheritancesContext) {
	this := p
	_ = this

	localctx = NewTypeInheritancesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, MojoParserRULE_typeInheritances)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2147)
		p.TypeInheritance()
	}
	p.SetState(2159)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 295, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2148)
				p.EovWithDocument()
			}
			p.SetState(2152)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(2149)
					p.Match(MojoParserEOL)
				}

				p.SetState(2154)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(2155)
				p.TypeInheritance()
			}

		}
		p.SetState(2161)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 295, p.GetParserRuleContext())
	}
	p.SetState(2163)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 296, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2162)
			p.EovWithDocument()
		}

	}

	return localctx
}

// ITypeInheritanceContext is an interface to support dynamic dispatch.
type ITypeInheritanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeInheritanceContext differentiates from other interfaces.
	IsTypeInheritanceContext()
}

type TypeInheritanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeInheritanceContext() *TypeInheritanceContext {
	var p = new(TypeInheritanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeInheritance
	return p
}

func (*TypeInheritanceContext) IsTypeInheritanceContext() {}

func NewTypeInheritanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeInheritanceContext {
	var p = new(TypeInheritanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeInheritance

	return p
}

func (s *TypeInheritanceContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeInheritanceContext) BasicType() IBasicTypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBasicTypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBasicTypeContext)
}

func (s *TypeInheritanceContext) Attributes() IAttributesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAttributesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TypeInheritanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeInheritanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeInheritanceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeInheritance(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeInheritance() (localctx ITypeInheritanceContext) {
	this := p
	_ = this

	localctx = NewTypeInheritanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, MojoParserRULE_typeInheritance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2165)
		p.basicType(0)
	}
	p.SetState(2167)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(2166)
			p.Attributes()
		}

	}

	return localctx
}

// IDeclarationIdentifierContext is an interface to support dynamic dispatch.
type IDeclarationIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationIdentifierContext differentiates from other interfaces.
	IsDeclarationIdentifierContext()
}

type DeclarationIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationIdentifierContext() *DeclarationIdentifierContext {
	var p = new(DeclarationIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_declarationIdentifier
	return p
}

func (*DeclarationIdentifierContext) IsDeclarationIdentifierContext() {}

func NewDeclarationIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationIdentifierContext {
	var p = new(DeclarationIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_declarationIdentifier

	return p
}

func (s *DeclarationIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationIdentifierContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *DeclarationIdentifierContext) KeywordAsIdentifierInDeclarations() IKeywordAsIdentifierInDeclarationsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeywordAsIdentifierInDeclarationsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeywordAsIdentifierInDeclarationsContext)
}

func (s *DeclarationIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDeclarationIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) DeclarationIdentifier() (localctx IDeclarationIdentifierContext) {
	this := p
	_ = this

	localctx = NewDeclarationIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, MojoParserRULE_declarationIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2171)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserVALUE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2169)
			p.Match(MojoParserVALUE_IDENTIFIER)
		}

	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_XOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2170)
			p.KeywordAsIdentifierInDeclarations()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILabelIdentifierContext is an interface to support dynamic dispatch.
type ILabelIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelIdentifierContext differentiates from other interfaces.
	IsLabelIdentifierContext()
}

type LabelIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelIdentifierContext() *LabelIdentifierContext {
	var p = new(LabelIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_labelIdentifier
	return p
}

func (*LabelIdentifierContext) IsLabelIdentifierContext() {}

func NewLabelIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelIdentifierContext {
	var p = new(LabelIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_labelIdentifier

	return p
}

func (s *LabelIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelIdentifierContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *LabelIdentifierContext) KeywordAsIdentifierInLabels() IKeywordAsIdentifierInLabelsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeywordAsIdentifierInLabelsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeywordAsIdentifierInLabelsContext)
}

func (s *LabelIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLabelIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LabelIdentifier() (localctx ILabelIdentifierContext) {
	this := p
	_ = this

	localctx = NewLabelIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, MojoParserRULE_labelIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2175)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserVALUE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2173)
			p.Match(MojoParserVALUE_IDENTIFIER)
		}

	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_CONTINUE, MojoParserKEYWORD_ELSE, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FALSE, MojoParserKEYWORD_FOR, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_OR, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TRUE, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_WHILE, MojoParserKEYWORD_XOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2174)
			p.KeywordAsIdentifierInLabels()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPathIdentifierContext is an interface to support dynamic dispatch.
type IPathIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPathIdentifierContext differentiates from other interfaces.
	IsPathIdentifierContext()
}

type PathIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPathIdentifierContext() *PathIdentifierContext {
	var p = new(PathIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_pathIdentifier
	return p
}

func (*PathIdentifierContext) IsPathIdentifierContext() {}

func NewPathIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PathIdentifierContext {
	var p = new(PathIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_pathIdentifier

	return p
}

func (s *PathIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PathIdentifierContext) AllDeclarationIdentifier() []IDeclarationIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDeclarationIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IDeclarationIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDeclarationIdentifierContext); ok {
			tst[i] = t.(IDeclarationIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *PathIdentifierContext) DeclarationIdentifier(i int) IDeclarationIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclarationIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *PathIdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *PathIdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *PathIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PathIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPathIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PathIdentifier() (localctx IPathIdentifierContext) {
	this := p
	_ = this

	localctx = NewPathIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, MojoParserRULE_pathIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2177)
		p.DeclarationIdentifier()
	}
	p.SetState(2182)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserDOT {
		{
			p.SetState(2178)
			p.Match(MojoParserDOT)
		}
		{
			p.SetState(2179)
			p.DeclarationIdentifier()
		}

		p.SetState(2184)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *IdentifierContext) IMPLICIT_PARAMETER_NAME() antlr.TerminalNode {
	return s.GetToken(MojoParserIMPLICIT_PARAMETER_NAME, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Identifier() (localctx IIdentifierContext) {
	this := p
	_ = this

	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, MojoParserRULE_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2185)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserVALUE_IDENTIFIER || _la == MojoParserIMPLICIT_PARAMETER_NAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IKeywordAsIdentifierInDeclarationsContext is an interface to support dynamic dispatch.
type IKeywordAsIdentifierInDeclarationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywordAsIdentifierInDeclarationsContext differentiates from other interfaces.
	IsKeywordAsIdentifierInDeclarationsContext()
}

type KeywordAsIdentifierInDeclarationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordAsIdentifierInDeclarationsContext() *KeywordAsIdentifierInDeclarationsContext {
	var p = new(KeywordAsIdentifierInDeclarationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_keywordAsIdentifierInDeclarations
	return p
}

func (*KeywordAsIdentifierInDeclarationsContext) IsKeywordAsIdentifierInDeclarationsContext() {}

func NewKeywordAsIdentifierInDeclarationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordAsIdentifierInDeclarationsContext {
	var p = new(KeywordAsIdentifierInDeclarationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_keywordAsIdentifierInDeclarations

	return p
}

func (s *KeywordAsIdentifierInDeclarationsContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_AND() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AND, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ATTRIBUTE, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_BREAK() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_BREAK, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_CONST() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONST, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_ENUM() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ENUM, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_FUNC() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FUNC, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_IMPORT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IMPORT, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_IN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IN, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_INTERFACE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_INTERFACE, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_MATCH() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_MATCH, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_NOT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NOT, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_NULL() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NULL, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_PACKAGE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_PACKAGE, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_REPEATE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_REPEATE, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_STRUCT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_STRUCT, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_XOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_XOR, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordAsIdentifierInDeclarationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordAsIdentifierInDeclarationsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitKeywordAsIdentifierInDeclarations(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) KeywordAsIdentifierInDeclarations() (localctx IKeywordAsIdentifierInDeclarationsContext) {
	this := p
	_ = this

	localctx = NewKeywordAsIdentifierInDeclarationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, MojoParserRULE_keywordAsIdentifierInDeclarations)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2187)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&628025662) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IKeywordAsIdentifierInLabelsContext is an interface to support dynamic dispatch.
type IKeywordAsIdentifierInLabelsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywordAsIdentifierInLabelsContext differentiates from other interfaces.
	IsKeywordAsIdentifierInLabelsContext()
}

type KeywordAsIdentifierInLabelsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordAsIdentifierInLabelsContext() *KeywordAsIdentifierInLabelsContext {
	var p = new(KeywordAsIdentifierInLabelsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_keywordAsIdentifierInLabels
	return p
}

func (*KeywordAsIdentifierInLabelsContext) IsKeywordAsIdentifierInLabelsContext() {}

func NewKeywordAsIdentifierInLabelsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordAsIdentifierInLabelsContext {
	var p = new(KeywordAsIdentifierInLabelsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_keywordAsIdentifierInLabels

	return p
}

func (s *KeywordAsIdentifierInLabelsContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_AND() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AND, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ATTRIBUTE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_BREAK() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_BREAK, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_CONST() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONST, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_CONTINUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONTINUE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_ELSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ELSE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_ENUM() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ENUM, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_FALSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FALSE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_FOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FOR, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_FUNC() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FUNC, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_IF() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IF, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_IMPORT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IMPORT, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_IN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IN, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_INTERFACE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_INTERFACE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_IS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IS, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_MATCH() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_MATCH, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_NOT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NOT, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_NULL() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NULL, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_OR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_OR, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_PACKAGE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_PACKAGE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_REPEATE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_REPEATE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_RETURN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_RETURN, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_STRUCT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_STRUCT, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_TRUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TRUE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_VAR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_VAR, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_WHILE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_WHILE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_XOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_XOR, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordAsIdentifierInLabelsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordAsIdentifierInLabelsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitKeywordAsIdentifierInLabels(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) KeywordAsIdentifierInLabels() (localctx IKeywordAsIdentifierInLabelsContext) {
	this := p
	_ = this

	localctx = NewKeywordAsIdentifierInLabelsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, MojoParserRULE_keywordAsIdentifierInLabels)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2189)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1073741822) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDocumentContext is an interface to support dynamic dispatch.
type IDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDocumentContext differentiates from other interfaces.
	IsDocumentContext()
}

type DocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDocumentContext() *DocumentContext {
	var p = new(DocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_document
	return p
}

func (*DocumentContext) IsDocumentContext() {}

func NewDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DocumentContext {
	var p = new(DocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_document

	return p
}

func (s *DocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *DocumentContext) AllLINE_DOCUMENT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserLINE_DOCUMENT)
}

func (s *DocumentContext) LINE_DOCUMENT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserLINE_DOCUMENT, i)
}

func (s *DocumentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *DocumentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *DocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Document() (localctx IDocumentContext) {
	this := p
	_ = this

	localctx = NewDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, MojoParserRULE_document)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2191)
		p.Match(MojoParserLINE_DOCUMENT)
	}
	p.SetState(2196)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 301, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2192)
				p.Match(MojoParserEOL)
			}
			{
				p.SetState(2193)
				p.Match(MojoParserLINE_DOCUMENT)
			}

		}
		p.SetState(2198)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 301, p.GetParserRuleContext())
	}

	return localctx
}

// IFollowingDocumentContext is an interface to support dynamic dispatch.
type IFollowingDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFollowingDocumentContext differentiates from other interfaces.
	IsFollowingDocumentContext()
}

type FollowingDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFollowingDocumentContext() *FollowingDocumentContext {
	var p = new(FollowingDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_followingDocument
	return p
}

func (*FollowingDocumentContext) IsFollowingDocumentContext() {}

func NewFollowingDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FollowingDocumentContext {
	var p = new(FollowingDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_followingDocument

	return p
}

func (s *FollowingDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *FollowingDocumentContext) AllFOLLOWING_LINE_DOCUMENT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserFOLLOWING_LINE_DOCUMENT)
}

func (s *FollowingDocumentContext) FOLLOWING_LINE_DOCUMENT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserFOLLOWING_LINE_DOCUMENT, i)
}

func (s *FollowingDocumentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FollowingDocumentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FollowingDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FollowingDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FollowingDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFollowingDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FollowingDocument() (localctx IFollowingDocumentContext) {
	this := p
	_ = this

	localctx = NewFollowingDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, MojoParserRULE_followingDocument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2199)
		p.Match(MojoParserFOLLOWING_LINE_DOCUMENT)
	}
	p.SetState(2204)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 302, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2200)
				p.Match(MojoParserEOL)
			}
			{
				p.SetState(2201)
				p.Match(MojoParserFOLLOWING_LINE_DOCUMENT)
			}

		}
		p.SetState(2206)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 302, p.GetParserRuleContext())
	}

	return localctx
}

// IAssignmentOperatorContext is an interface to support dynamic dispatch.
type IAssignmentOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentOperatorContext differentiates from other interfaces.
	IsAssignmentOperatorContext()
}

type AssignmentOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentOperatorContext() *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_assignmentOperator
	return p
}

func (*AssignmentOperatorContext) IsAssignmentOperatorContext() {}

func NewAssignmentOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_assignmentOperator

	return p
}

func (s *AssignmentOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentOperatorContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(MojoParserEQUAL, 0)
}

func (s *AssignmentOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAssignmentOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AssignmentOperator() (localctx IAssignmentOperatorContext) {
	this := p
	_ = this

	localctx = NewAssignmentOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, MojoParserRULE_assignmentOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2207)
		p.Match(MojoParserEQUAL)
	}

	return localctx
}

// INegatePrefixOperatorContext is an interface to support dynamic dispatch.
type INegatePrefixOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNegatePrefixOperatorContext differentiates from other interfaces.
	IsNegatePrefixOperatorContext()
}

type NegatePrefixOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNegatePrefixOperatorContext() *NegatePrefixOperatorContext {
	var p = new(NegatePrefixOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_negatePrefixOperator
	return p
}

func (*NegatePrefixOperatorContext) IsNegatePrefixOperatorContext() {}

func NewNegatePrefixOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NegatePrefixOperatorContext {
	var p = new(NegatePrefixOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_negatePrefixOperator

	return p
}

func (s *NegatePrefixOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *NegatePrefixOperatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MojoParserMINUS, 0)
}

func (s *NegatePrefixOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NegatePrefixOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NegatePrefixOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitNegatePrefixOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) NegatePrefixOperator() (localctx INegatePrefixOperatorContext) {
	this := p
	_ = this

	localctx = NewNegatePrefixOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, MojoParserRULE_negatePrefixOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2209)
		p.Match(MojoParserMINUS)
	}

	return localctx
}

// IArrowOperatorContext is an interface to support dynamic dispatch.
type IArrowOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowOperatorContext differentiates from other interfaces.
	IsArrowOperatorContext()
}

type ArrowOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowOperatorContext() *ArrowOperatorContext {
	var p = new(ArrowOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrowOperator
	return p
}

func (*ArrowOperatorContext) IsArrowOperatorContext() {}

func NewArrowOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowOperatorContext {
	var p = new(ArrowOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrowOperator

	return p
}

func (s *ArrowOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowOperatorContext) RIGHT_ARROW() antlr.TerminalNode {
	return s.GetToken(MojoParserRIGHT_ARROW, 0)
}

func (s *ArrowOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrowOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrowOperator() (localctx IArrowOperatorContext) {
	this := p
	_ = this

	localctx = NewArrowOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, MojoParserRULE_arrowOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2211)
		p.Match(MojoParserRIGHT_ARROW)
	}

	return localctx
}

// IRangeOperatorContext is an interface to support dynamic dispatch.
type IRangeOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRangeOperatorContext differentiates from other interfaces.
	IsRangeOperatorContext()
}

type RangeOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRangeOperatorContext() *RangeOperatorContext {
	var p = new(RangeOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_rangeOperator
	return p
}

func (*RangeOperatorContext) IsRangeOperatorContext() {}

func NewRangeOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeOperatorContext {
	var p = new(RangeOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_rangeOperator

	return p
}

func (s *RangeOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeOperatorContext) DOT_DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT_DOT, 0)
}

func (s *RangeOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitRangeOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) RangeOperator() (localctx IRangeOperatorContext) {
	this := p
	_ = this

	localctx = NewRangeOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, MojoParserRULE_rangeOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2213)
		p.Match(MojoParserDOT_DOT)
	}

	return localctx
}

// IHalfOpenRangeOperatorContext is an interface to support dynamic dispatch.
type IHalfOpenRangeOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHalfOpenRangeOperatorContext differentiates from other interfaces.
	IsHalfOpenRangeOperatorContext()
}

type HalfOpenRangeOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHalfOpenRangeOperatorContext() *HalfOpenRangeOperatorContext {
	var p = new(HalfOpenRangeOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_halfOpenRangeOperator
	return p
}

func (*HalfOpenRangeOperatorContext) IsHalfOpenRangeOperatorContext() {}

func NewHalfOpenRangeOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HalfOpenRangeOperatorContext {
	var p = new(HalfOpenRangeOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_halfOpenRangeOperator

	return p
}

func (s *HalfOpenRangeOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *HalfOpenRangeOperatorContext) DOT_DOT_LT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT_DOT_LT, 0)
}

func (s *HalfOpenRangeOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HalfOpenRangeOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HalfOpenRangeOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitHalfOpenRangeOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) HalfOpenRangeOperator() (localctx IHalfOpenRangeOperatorContext) {
	this := p
	_ = this

	localctx = NewHalfOpenRangeOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, MojoParserRULE_halfOpenRangeOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2215)
		p.Match(MojoParserDOT_DOT_LT)
	}

	return localctx
}

// IBinaryOperatorContext is an interface to support dynamic dispatch.
type IBinaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinaryOperatorContext differentiates from other interfaces.
	IsBinaryOperatorContext()
}

type BinaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinaryOperatorContext() *BinaryOperatorContext {
	var p = new(BinaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_binaryOperator
	return p
}

func (*BinaryOperatorContext) IsBinaryOperatorContext() {}

func NewBinaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinaryOperatorContext {
	var p = new(BinaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_binaryOperator

	return p
}

func (s *BinaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *BinaryOperatorContext) RangeOperator() IRangeOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRangeOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRangeOperatorContext)
}

func (s *BinaryOperatorContext) HalfOpenRangeOperator() IHalfOpenRangeOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IHalfOpenRangeOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IHalfOpenRangeOperatorContext)
}

func (s *BinaryOperatorContext) Operator() IOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *BinaryOperatorContext) KEYWORD_AND() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AND, 0)
}

func (s *BinaryOperatorContext) KEYWORD_OR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_OR, 0)
}

func (s *BinaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBinaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BinaryOperator() (localctx IBinaryOperatorContext) {
	this := p
	_ = this

	localctx = NewBinaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, MojoParserRULE_binaryOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2222)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserDOT_DOT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2217)
			p.RangeOperator()
		}

	case MojoParserDOT_DOT_LT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2218)
			p.HalfOpenRangeOperator()
		}

	case MojoParserDOT, MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserOPERATOR_HEAD_OTHER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2219)
			p.Operator()
		}

	case MojoParserKEYWORD_AND:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2220)
			p.Match(MojoParserKEYWORD_AND)
		}

	case MojoParserKEYWORD_OR:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(2221)
			p.Match(MojoParserKEYWORD_OR)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrefixOperatorContext is an interface to support dynamic dispatch.
type IPrefixOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixOperatorContext differentiates from other interfaces.
	IsPrefixOperatorContext()
}

type PrefixOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixOperatorContext() *PrefixOperatorContext {
	var p = new(PrefixOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_prefixOperator
	return p
}

func (*PrefixOperatorContext) IsPrefixOperatorContext() {}

func NewPrefixOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixOperatorContext {
	var p = new(PrefixOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_prefixOperator

	return p
}

func (s *PrefixOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixOperatorContext) Operator() IOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *PrefixOperatorContext) KEYWORD_NOT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NOT, 0)
}

func (s *PrefixOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrefixOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrefixOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrefixOperator() (localctx IPrefixOperatorContext) {
	this := p
	_ = this

	localctx = NewPrefixOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, MojoParserRULE_prefixOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2226)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserDOT, MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserOPERATOR_HEAD_OTHER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2224)
			p.Operator()
		}

	case MojoParserKEYWORD_NOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2225)
			p.Match(MojoParserKEYWORD_NOT)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPostfixOperatorContext is an interface to support dynamic dispatch.
type IPostfixOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixOperatorContext differentiates from other interfaces.
	IsPostfixOperatorContext()
}

type PostfixOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixOperatorContext() *PostfixOperatorContext {
	var p = new(PostfixOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_postfixOperator
	return p
}

func (*PostfixOperatorContext) IsPostfixOperatorContext() {}

func NewPostfixOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixOperatorContext {
	var p = new(PostfixOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_postfixOperator

	return p
}

func (s *PostfixOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixOperatorContext) PLUS_PLUS() antlr.TerminalNode {
	return s.GetToken(MojoParserPLUS_PLUS, 0)
}

func (s *PostfixOperatorContext) MINUS_MINUS() antlr.TerminalNode {
	return s.GetToken(MojoParserMINUS_MINUS, 0)
}

func (s *PostfixOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPostfixOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PostfixOperator() (localctx IPostfixOperatorContext) {
	this := p
	_ = this

	localctx = NewPostfixOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, MojoParserRULE_postfixOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2228)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserPLUS_PLUS || _la == MojoParserMINUS_MINUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOperatorContext is an interface to support dynamic dispatch.
type IOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperatorContext differentiates from other interfaces.
	IsOperatorContext()
}

type OperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorContext() *OperatorContext {
	var p = new(OperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_operator
	return p
}

func (*OperatorContext) IsOperatorContext() {}

func NewOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorContext {
	var p = new(OperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_operator

	return p
}

func (s *OperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *OperatorContext) Operator_head() IOperator_headContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperator_headContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperator_headContext)
}

func (s *OperatorContext) Operator_characters() IOperator_charactersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperator_charactersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperator_charactersContext)
}

func (s *OperatorContext) Dot_operator_head() IDot_operator_headContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDot_operator_headContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDot_operator_headContext)
}

func (s *OperatorContext) AllDot_operator_character() []IDot_operator_characterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDot_operator_characterContext); ok {
			len++
		}
	}

	tst := make([]IDot_operator_characterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDot_operator_characterContext); ok {
			tst[i] = t.(IDot_operator_characterContext)
			i++
		}
	}

	return tst
}

func (s *OperatorContext) Dot_operator_character(i int) IDot_operator_characterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDot_operator_characterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDot_operator_characterContext)
}

func (s *OperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Operator() (localctx IOperatorContext) {
	this := p
	_ = this

	localctx = NewOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, MojoParserRULE_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2241)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserOPERATOR_HEAD_OTHER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2230)
			p.Operator_head()
		}
		p.SetState(2232)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 305, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2231)
				p.Operator_characters()
			}

		}

	case MojoParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2234)
			p.Dot_operator_head()
		}
		p.SetState(2238)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 306, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2235)
					p.Dot_operator_character()
				}

			}
			p.SetState(2240)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 306, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOperator_charactersContext is an interface to support dynamic dispatch.
type IOperator_charactersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_charactersContext differentiates from other interfaces.
	IsOperator_charactersContext()
}

type Operator_charactersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_charactersContext() *Operator_charactersContext {
	var p = new(Operator_charactersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_operator_characters
	return p
}

func (*Operator_charactersContext) IsOperator_charactersContext() {}

func NewOperator_charactersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_charactersContext {
	var p = new(Operator_charactersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_operator_characters

	return p
}

func (s *Operator_charactersContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_charactersContext) AllOperator_character() []IOperator_characterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IOperator_characterContext); ok {
			len++
		}
	}

	tst := make([]IOperator_characterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IOperator_characterContext); ok {
			tst[i] = t.(IOperator_characterContext)
			i++
		}
	}

	return tst
}

func (s *Operator_charactersContext) Operator_character(i int) IOperator_characterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperator_characterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperator_characterContext)
}

func (s *Operator_charactersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_charactersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_charactersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOperator_characters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Operator_characters() (localctx IOperator_charactersContext) {
	this := p
	_ = this

	localctx = NewOperator_charactersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, MojoParserRULE_operator_characters)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2245)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(2243)

			if !(p.GetTokenStream().Get(p.GetTokenStream().Index()-1).GetTokenType() != MojoParserWS) {
				panic(antlr.NewFailedPredicateException(p, "p.GetTokenStream().Get(p.GetTokenStream().Index()-1).GetTokenType() != MojoParserWS", ""))
			}
			{
				p.SetState(2244)
				p.Operator_character()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2247)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 308, p.GetParserRuleContext())
	}

	return localctx
}

// IOperator_characterContext is an interface to support dynamic dispatch.
type IOperator_characterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_characterContext differentiates from other interfaces.
	IsOperator_characterContext()
}

type Operator_characterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_characterContext() *Operator_characterContext {
	var p = new(Operator_characterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_operator_character
	return p
}

func (*Operator_characterContext) IsOperator_characterContext() {}

func NewOperator_characterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_characterContext {
	var p = new(Operator_characterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_operator_character

	return p
}

func (s *Operator_characterContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_characterContext) Operator_head() IOperator_headContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperator_headContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperator_headContext)
}

func (s *Operator_characterContext) OPERATOR_FOLLOWING_CHARACTER() antlr.TerminalNode {
	return s.GetToken(MojoParserOPERATOR_FOLLOWING_CHARACTER, 0)
}

func (s *Operator_characterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_characterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_characterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOperator_character(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Operator_character() (localctx IOperator_characterContext) {
	this := p
	_ = this

	localctx = NewOperator_characterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, MojoParserRULE_operator_character)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2251)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserOPERATOR_HEAD_OTHER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2249)
			p.Operator_head()
		}

	case MojoParserOPERATOR_FOLLOWING_CHARACTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2250)
			p.Match(MojoParserOPERATOR_FOLLOWING_CHARACTER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOperator_headContext is an interface to support dynamic dispatch.
type IOperator_headContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_headContext differentiates from other interfaces.
	IsOperator_headContext()
}

type Operator_headContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_headContext() *Operator_headContext {
	var p = new(Operator_headContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_operator_head
	return p
}

func (*Operator_headContext) IsOperator_headContext() {}

func NewOperator_headContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_headContext {
	var p = new(Operator_headContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_operator_head

	return p
}

func (s *Operator_headContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_headContext) SLASH() antlr.TerminalNode {
	return s.GetToken(MojoParserSLASH, 0)
}

func (s *Operator_headContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(MojoParserEQUAL, 0)
}

func (s *Operator_headContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MojoParserMINUS, 0)
}

func (s *Operator_headContext) PLUS() antlr.TerminalNode {
	return s.GetToken(MojoParserPLUS, 0)
}

func (s *Operator_headContext) BANG() antlr.TerminalNode {
	return s.GetToken(MojoParserBANG, 0)
}

func (s *Operator_headContext) STAR() antlr.TerminalNode {
	return s.GetToken(MojoParserSTAR, 0)
}

func (s *Operator_headContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(MojoParserPERCENT, 0)
}

func (s *Operator_headContext) AND() antlr.TerminalNode {
	return s.GetToken(MojoParserAND, 0)
}

func (s *Operator_headContext) PIPE() antlr.TerminalNode {
	return s.GetToken(MojoParserPIPE, 0)
}

func (s *Operator_headContext) LT() antlr.TerminalNode {
	return s.GetToken(MojoParserLT, 0)
}

func (s *Operator_headContext) GT() antlr.TerminalNode {
	return s.GetToken(MojoParserGT, 0)
}

func (s *Operator_headContext) CARET() antlr.TerminalNode {
	return s.GetToken(MojoParserCARET, 0)
}

func (s *Operator_headContext) TILDE() antlr.TerminalNode {
	return s.GetToken(MojoParserTILDE, 0)
}

func (s *Operator_headContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *Operator_headContext) OPERATOR_HEAD_OTHER() antlr.TerminalNode {
	return s.GetToken(MojoParserOPERATOR_HEAD_OTHER, 0)
}

func (s *Operator_headContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_headContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_headContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOperator_head(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Operator_head() (localctx IOperator_headContext) {
	this := p
	_ = this

	localctx = NewOperator_headContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, MojoParserRULE_operator_head)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2255)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2253)
			_la = p.GetTokenStream().LA(1)

			if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&36010105321291776) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MojoParserOPERATOR_HEAD_OTHER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2254)
			p.Match(MojoParserOPERATOR_HEAD_OTHER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDot_operator_headContext is an interface to support dynamic dispatch.
type IDot_operator_headContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDot_operator_headContext differentiates from other interfaces.
	IsDot_operator_headContext()
}

type Dot_operator_headContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDot_operator_headContext() *Dot_operator_headContext {
	var p = new(Dot_operator_headContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_dot_operator_head
	return p
}

func (*Dot_operator_headContext) IsDot_operator_headContext() {}

func NewDot_operator_headContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dot_operator_headContext {
	var p = new(Dot_operator_headContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_dot_operator_head

	return p
}

func (s *Dot_operator_headContext) GetParser() antlr.Parser { return s.parser }

func (s *Dot_operator_headContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *Dot_operator_headContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dot_operator_headContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dot_operator_headContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDot_operator_head(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Dot_operator_head() (localctx IDot_operator_headContext) {
	this := p
	_ = this

	localctx = NewDot_operator_headContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, MojoParserRULE_dot_operator_head)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2257)
		p.Match(MojoParserDOT)
	}

	return localctx
}

// IDot_operator_characterContext is an interface to support dynamic dispatch.
type IDot_operator_characterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDot_operator_characterContext differentiates from other interfaces.
	IsDot_operator_characterContext()
}

type Dot_operator_characterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDot_operator_characterContext() *Dot_operator_characterContext {
	var p = new(Dot_operator_characterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_dot_operator_character
	return p
}

func (*Dot_operator_characterContext) IsDot_operator_characterContext() {}

func NewDot_operator_characterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dot_operator_characterContext {
	var p = new(Dot_operator_characterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_dot_operator_character

	return p
}

func (s *Dot_operator_characterContext) GetParser() antlr.Parser { return s.parser }

func (s *Dot_operator_characterContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *Dot_operator_characterContext) Operator_character() IOperator_characterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IOperator_characterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IOperator_characterContext)
}

func (s *Dot_operator_characterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dot_operator_characterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dot_operator_characterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDot_operator_character(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Dot_operator_character() (localctx IDot_operator_characterContext) {
	this := p
	_ = this

	localctx = NewDot_operator_characterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, MojoParserRULE_dot_operator_character)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2261)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserDOT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2259)
			p.Match(MojoParserDOT)
		}

	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserOPERATOR_HEAD_OTHER, MojoParserOPERATOR_FOLLOWING_CHARACTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2260)
			p.Operator_character()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) NumericLiteral() INumericLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumericLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumericLiteralContext)
}

func (s *LiteralContext) StringLiteral() IStringLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStringLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *LiteralContext) BoolLiteral() IBoolLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBoolLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBoolLiteralContext)
}

func (s *LiteralContext) NullLiteral() INullLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INullLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INullLiteralContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Literal() (localctx ILiteralContext) {
	this := p
	_ = this

	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, MojoParserRULE_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2267)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserMINUS, MojoParserBINARY_LITERAL, MojoParserOCTAL_LITERAL, MojoParserDECIMAL_LITERAL, MojoParserPURE_DECIMAL_DIGITS, MojoParserHEXADECIMAL_LITERAL, MojoParserFLOAT_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2263)
			p.NumericLiteral()
		}

	case MojoParserSTATIC_STRING_LITERAL, MojoParserINTERPOLATED_STRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2264)
			p.StringLiteral()
		}

	case MojoParserKEYWORD_FALSE, MojoParserKEYWORD_TRUE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2265)
			p.BoolLiteral()
		}

	case MojoParserKEYWORD_NULL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2266)
			p.NullLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBoolLiteralContext is an interface to support dynamic dispatch.
type IBoolLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolLiteralContext differentiates from other interfaces.
	IsBoolLiteralContext()
}

type BoolLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolLiteralContext() *BoolLiteralContext {
	var p = new(BoolLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_boolLiteral
	return p
}

func (*BoolLiteralContext) IsBoolLiteralContext() {}

func NewBoolLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoolLiteralContext {
	var p = new(BoolLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_boolLiteral

	return p
}

func (s *BoolLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *BoolLiteralContext) KEYWORD_TRUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TRUE, 0)
}

func (s *BoolLiteralContext) KEYWORD_FALSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FALSE, 0)
}

func (s *BoolLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoolLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBoolLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BoolLiteral() (localctx IBoolLiteralContext) {
	this := p
	_ = this

	localctx = NewBoolLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, MojoParserRULE_boolLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2269)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserKEYWORD_FALSE || _la == MojoParserKEYWORD_TRUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INullLiteralContext is an interface to support dynamic dispatch.
type INullLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNullLiteralContext differentiates from other interfaces.
	IsNullLiteralContext()
}

type NullLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNullLiteralContext() *NullLiteralContext {
	var p = new(NullLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_nullLiteral
	return p
}

func (*NullLiteralContext) IsNullLiteralContext() {}

func NewNullLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NullLiteralContext {
	var p = new(NullLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_nullLiteral

	return p
}

func (s *NullLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NullLiteralContext) KEYWORD_NULL() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NULL, 0)
}

func (s *NullLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NullLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitNullLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) NullLiteral() (localctx INullLiteralContext) {
	this := p
	_ = this

	localctx = NewNullLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, MojoParserRULE_nullLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2271)
		p.Match(MojoParserKEYWORD_NULL)
	}

	return localctx
}

// INumericLiteralContext is an interface to support dynamic dispatch.
type INumericLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumericLiteralContext differentiates from other interfaces.
	IsNumericLiteralContext()
}

type NumericLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericLiteralContext() *NumericLiteralContext {
	var p = new(NumericLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_numericLiteral
	return p
}

func (*NumericLiteralContext) IsNumericLiteralContext() {}

func NewNumericLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericLiteralContext {
	var p = new(NumericLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_numericLiteral

	return p
}

func (s *NumericLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericLiteralContext) IntegerLiteral() IIntegerLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIntegerLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIntegerLiteralContext)
}

func (s *NumericLiteralContext) NegatePrefixOperator() INegatePrefixOperatorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INegatePrefixOperatorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INegatePrefixOperatorContext)
}

func (s *NumericLiteralContext) FLOAT_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserFLOAT_LITERAL, 0)
}

func (s *NumericLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitNumericLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) NumericLiteral() (localctx INumericLiteralContext) {
	this := p
	_ = this

	localctx = NewNumericLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, MojoParserRULE_numericLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2281)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 315, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2274)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserMINUS {
			{
				p.SetState(2273)
				p.NegatePrefixOperator()
			}

		}
		{
			p.SetState(2276)
			p.IntegerLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2278)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserMINUS {
			{
				p.SetState(2277)
				p.NegatePrefixOperator()
			}

		}
		{
			p.SetState(2280)
			p.Match(MojoParserFLOAT_LITERAL)
		}

	}

	return localctx
}

// IIntegerLiteralContext is an interface to support dynamic dispatch.
type IIntegerLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntegerLiteralContext differentiates from other interfaces.
	IsIntegerLiteralContext()
}

type IntegerLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerLiteralContext() *IntegerLiteralContext {
	var p = new(IntegerLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_integerLiteral
	return p
}

func (*IntegerLiteralContext) IsIntegerLiteralContext() {}

func NewIntegerLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerLiteralContext {
	var p = new(IntegerLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_integerLiteral

	return p
}

func (s *IntegerLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerLiteralContext) BINARY_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserBINARY_LITERAL, 0)
}

func (s *IntegerLiteralContext) OCTAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserOCTAL_LITERAL, 0)
}

func (s *IntegerLiteralContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserDECIMAL_LITERAL, 0)
}

func (s *IntegerLiteralContext) PURE_DECIMAL_DIGITS() antlr.TerminalNode {
	return s.GetToken(MojoParserPURE_DECIMAL_DIGITS, 0)
}

func (s *IntegerLiteralContext) HEXADECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserHEXADECIMAL_LITERAL, 0)
}

func (s *IntegerLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIntegerLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) IntegerLiteral() (localctx IIntegerLiteralContext) {
	this := p
	_ = this

	localctx = NewIntegerLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 368, MojoParserRULE_integerLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2283)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-77)) & ^0x3f) == 0 && ((int64(1)<<(_la-77))&31) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStringLiteralContext is an interface to support dynamic dispatch.
type IStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralContext differentiates from other interfaces.
	IsStringLiteralContext()
}

type StringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralContext() *StringLiteralContext {
	var p = new(StringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_stringLiteral
	return p
}

func (*StringLiteralContext) IsStringLiteralContext() {}

func NewStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_stringLiteral

	return p
}

func (s *StringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralContext) STATIC_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserSTATIC_STRING_LITERAL, 0)
}

func (s *StringLiteralContext) INTERPOLATED_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserINTERPOLATED_STRING_LITERAL, 0)
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StringLiteral() (localctx IStringLiteralContext) {
	this := p
	_ = this

	localctx = NewStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 370, MojoParserRULE_stringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2285)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserSTATIC_STRING_LITERAL || _la == MojoParserINTERPOLATED_STRING_LITERAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IEosContext is an interface to support dynamic dispatch.
type IEosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEosContext differentiates from other interfaces.
	IsEosContext()
}

type EosContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEosContext() *EosContext {
	var p = new(EosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eos
	return p
}

func (*EosContext) IsEosContext() {}

func NewEosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosContext {
	var p = new(EosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eos

	return p
}

func (s *EosContext) GetParser() antlr.Parser { return s.parser }

func (s *EosContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MojoParserSEMI, 0)
}

func (s *EosContext) EOL() antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, 0)
}

func (s *EosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEos(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Eos() (localctx IEosContext) {
	this := p
	_ = this

	localctx = NewEosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 372, MojoParserRULE_eos)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2287)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserSEMI || _la == MojoParserEOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IEovContext is an interface to support dynamic dispatch.
type IEovContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEovContext differentiates from other interfaces.
	IsEovContext()
}

type EovContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEovContext() *EovContext {
	var p = new(EovContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eov
	return p
}

func (*EovContext) IsEovContext() {}

func NewEovContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EovContext {
	var p = new(EovContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eov

	return p
}

func (s *EovContext) GetParser() antlr.Parser { return s.parser }

func (s *EovContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, 0)
}

func (s *EovContext) EOL() antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, 0)
}

func (s *EovContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EovContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EovContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEov(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Eov() (localctx IEovContext) {
	this := p
	_ = this

	localctx = NewEovContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 374, MojoParserRULE_eov)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2289)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserCOMMA || _la == MojoParserEOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IEosWithDocumentContext is an interface to support dynamic dispatch.
type IEosWithDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEosWithDocumentContext differentiates from other interfaces.
	IsEosWithDocumentContext()
}

type EosWithDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEosWithDocumentContext() *EosWithDocumentContext {
	var p = new(EosWithDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eosWithDocument
	return p
}

func (*EosWithDocumentContext) IsEosWithDocumentContext() {}

func NewEosWithDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosWithDocumentContext {
	var p = new(EosWithDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eosWithDocument

	return p
}

func (s *EosWithDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *EosWithDocumentContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MojoParserSEMI, 0)
}

func (s *EosWithDocumentContext) FollowingDocument() IFollowingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *EosWithDocumentContext) EOL() antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, 0)
}

func (s *EosWithDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EosWithDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EosWithDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEosWithDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EosWithDocument() (localctx IEosWithDocumentContext) {
	this := p
	_ = this

	localctx = NewEosWithDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 376, MojoParserRULE_eosWithDocument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2301)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserSEMI:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2291)
			p.Match(MojoParserSEMI)
		}
		p.SetState(2295)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
			{
				p.SetState(2292)
				p.FollowingDocument()
			}
			{
				p.SetState(2293)
				p.Match(MojoParserEOL)
			}

		}

	case MojoParserEOL, MojoParserFOLLOWING_LINE_DOCUMENT:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2298)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
			{
				p.SetState(2297)
				p.FollowingDocument()
			}

		}
		{
			p.SetState(2300)
			p.Match(MojoParserEOL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEovWithDocumentContext is an interface to support dynamic dispatch.
type IEovWithDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEovWithDocumentContext differentiates from other interfaces.
	IsEovWithDocumentContext()
}

type EovWithDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEovWithDocumentContext() *EovWithDocumentContext {
	var p = new(EovWithDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eovWithDocument
	return p
}

func (*EovWithDocumentContext) IsEovWithDocumentContext() {}

func NewEovWithDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EovWithDocumentContext {
	var p = new(EovWithDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eovWithDocument

	return p
}

func (s *EovWithDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *EovWithDocumentContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, 0)
}

func (s *EovWithDocumentContext) FollowingDocument() IFollowingDocumentContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFollowingDocumentContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *EovWithDocumentContext) EOL() antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, 0)
}

func (s *EovWithDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EovWithDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EovWithDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEovWithDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EovWithDocument() (localctx IEovWithDocumentContext) {
	this := p
	_ = this

	localctx = NewEovWithDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 378, MojoParserRULE_eovWithDocument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2313)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserCOMMA:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2303)
			p.Match(MojoParserCOMMA)
		}
		p.SetState(2307)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 319, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2304)
				p.FollowingDocument()
			}
			{
				p.SetState(2305)
				p.Match(MojoParserEOL)
			}

		}

	case MojoParserEOL, MojoParserFOLLOWING_LINE_DOCUMENT:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2310)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
			{
				p.SetState(2309)
				p.FollowingDocument()
			}

		}
		{
			p.SetState(2312)
			p.Match(MojoParserEOL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

func (p *MojoParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 81:
		var t *PatternContext = nil
		if localctx != nil {
			t = localctx.(*PatternContext)
		}
		return p.Pattern_Sempred(t, predIndex)

	case 141:
		var t *Type_Context = nil
		if localctx != nil {
			t = localctx.(*Type_Context)
		}
		return p.Type__Sempred(t, predIndex)

	case 142:
		var t *BasicTypeContext = nil
		if localctx != nil {
			t = localctx.(*BasicTypeContext)
		}
		return p.BasicType_Sempred(t, predIndex)

	case 175:
		var t *Operator_charactersContext = nil
		if localctx != nil {
			t = localctx.(*Operator_charactersContext)
		}
		return p.Operator_characters_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *MojoParser) Pattern_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MojoParser) Type__Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MojoParser) BasicType_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MojoParser) Operator_characters_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 6:
		return p.GetTokenStream().Get(p.GetTokenStream().Index()-1).GetTokenType() != MojoParserWS

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
