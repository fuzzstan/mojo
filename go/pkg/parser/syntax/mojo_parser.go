// Code generated from MojoParser.g4 by ANTLR 4.9.2. DO NOT EDIT.

package syntax // MojoParser
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 94, 2159,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 4, 106, 9, 106,
	4, 107, 9, 107, 4, 108, 9, 108, 4, 109, 9, 109, 4, 110, 9, 110, 4, 111,
	9, 111, 4, 112, 9, 112, 4, 113, 9, 113, 4, 114, 9, 114, 4, 115, 9, 115,
	4, 116, 9, 116, 4, 117, 9, 117, 4, 118, 9, 118, 4, 119, 9, 119, 4, 120,
	9, 120, 4, 121, 9, 121, 4, 122, 9, 122, 4, 123, 9, 123, 4, 124, 9, 124,
	4, 125, 9, 125, 4, 126, 9, 126, 4, 127, 9, 127, 4, 128, 9, 128, 4, 129,
	9, 129, 4, 130, 9, 130, 4, 131, 9, 131, 4, 132, 9, 132, 4, 133, 9, 133,
	4, 134, 9, 134, 4, 135, 9, 135, 4, 136, 9, 136, 4, 137, 9, 137, 4, 138,
	9, 138, 4, 139, 9, 139, 4, 140, 9, 140, 4, 141, 9, 141, 4, 142, 9, 142,
	4, 143, 9, 143, 4, 144, 9, 144, 4, 145, 9, 145, 4, 146, 9, 146, 4, 147,
	9, 147, 4, 148, 9, 148, 4, 149, 9, 149, 4, 150, 9, 150, 4, 151, 9, 151,
	4, 152, 9, 152, 4, 153, 9, 153, 4, 154, 9, 154, 4, 155, 9, 155, 4, 156,
	9, 156, 4, 157, 9, 157, 4, 158, 9, 158, 4, 159, 9, 159, 4, 160, 9, 160,
	4, 161, 9, 161, 4, 162, 9, 162, 4, 163, 9, 163, 4, 164, 9, 164, 4, 165,
	9, 165, 4, 166, 9, 166, 4, 167, 9, 167, 4, 168, 9, 168, 4, 169, 9, 169,
	4, 170, 9, 170, 4, 171, 9, 171, 4, 172, 9, 172, 4, 173, 9, 173, 4, 174,
	9, 174, 4, 175, 9, 175, 4, 176, 9, 176, 4, 177, 9, 177, 4, 178, 9, 178,
	4, 179, 9, 179, 4, 180, 9, 180, 4, 181, 9, 181, 4, 182, 9, 182, 4, 183,
	9, 183, 4, 184, 9, 184, 4, 185, 9, 185, 3, 2, 7, 2, 372, 10, 2, 12, 2,
	14, 2, 375, 11, 2, 3, 2, 5, 2, 378, 10, 2, 3, 2, 7, 2, 381, 10, 2, 12,
	2, 14, 2, 384, 11, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	3, 394, 10, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 7, 5, 401, 10, 5, 12, 5, 14,
	5, 404, 11, 5, 3, 5, 3, 5, 7, 5, 408, 10, 5, 12, 5, 14, 5, 411, 11, 5,
	3, 5, 5, 5, 414, 10, 5, 3, 6, 3, 6, 5, 6, 418, 10, 6, 3, 7, 3, 7, 3, 7,
	7, 7, 423, 10, 7, 12, 7, 14, 7, 426, 11, 7, 3, 7, 3, 7, 3, 7, 7, 7, 431,
	10, 7, 12, 7, 14, 7, 434, 11, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 7, 8, 441,
	10, 8, 12, 8, 14, 8, 444, 11, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 7, 9, 451,
	10, 9, 12, 9, 14, 9, 454, 11, 9, 3, 9, 3, 9, 7, 9, 458, 10, 9, 12, 9, 14,
	9, 461, 11, 9, 3, 10, 3, 10, 5, 10, 465, 10, 10, 3, 11, 3, 11, 3, 11, 7,
	11, 470, 10, 11, 12, 11, 14, 11, 473, 11, 11, 3, 11, 3, 11, 3, 12, 3, 12,
	5, 12, 479, 10, 12, 3, 13, 3, 13, 3, 13, 7, 13, 484, 10, 13, 12, 13, 14,
	13, 487, 11, 13, 3, 13, 3, 13, 7, 13, 491, 10, 13, 12, 13, 14, 13, 494,
	11, 13, 3, 13, 5, 13, 497, 10, 13, 3, 14, 3, 14, 7, 14, 501, 10, 14, 12,
	14, 14, 14, 504, 11, 14, 3, 14, 3, 14, 3, 14, 7, 14, 509, 10, 14, 12, 14,
	14, 14, 512, 11, 14, 3, 14, 5, 14, 515, 10, 14, 3, 15, 3, 15, 3, 15, 7,
	15, 520, 10, 15, 12, 15, 14, 15, 523, 11, 15, 3, 15, 3, 15, 7, 15, 527,
	10, 15, 12, 15, 14, 15, 530, 11, 15, 3, 15, 5, 15, 533, 10, 15, 3, 15,
	7, 15, 536, 10, 15, 12, 15, 14, 15, 539, 11, 15, 3, 15, 3, 15, 3, 16, 3,
	16, 3, 16, 7, 16, 546, 10, 16, 12, 16, 14, 16, 549, 11, 16, 3, 16, 3, 16,
	7, 16, 553, 10, 16, 12, 16, 14, 16, 556, 11, 16, 3, 16, 3, 16, 3, 17, 3,
	17, 7, 17, 562, 10, 17, 12, 17, 14, 17, 565, 11, 17, 3, 17, 3, 17, 7, 17,
	569, 10, 17, 12, 17, 14, 17, 572, 11, 17, 3, 17, 3, 17, 5, 17, 576, 10,
	17, 3, 18, 3, 18, 3, 18, 5, 18, 581, 10, 18, 3, 19, 3, 19, 3, 20, 3, 20,
	3, 21, 3, 21, 5, 21, 589, 10, 21, 3, 22, 3, 22, 7, 22, 593, 10, 22, 12,
	22, 14, 22, 596, 11, 22, 3, 22, 3, 22, 7, 22, 600, 10, 22, 12, 22, 14,
	22, 603, 11, 22, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 7, 23, 610, 10, 23,
	12, 23, 14, 23, 613, 11, 23, 3, 23, 3, 23, 7, 23, 617, 10, 23, 12, 23,
	14, 23, 620, 11, 23, 3, 23, 5, 23, 623, 10, 23, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 5, 24, 632, 10, 24, 3, 25, 3, 25, 7, 25, 636,
	10, 25, 12, 25, 14, 25, 639, 11, 25, 3, 25, 3, 25, 7, 25, 643, 10, 25,
	12, 25, 14, 25, 646, 11, 25, 3, 25, 3, 25, 3, 26, 3, 26, 3, 26, 7, 26,
	653, 10, 26, 12, 26, 14, 26, 656, 11, 26, 3, 26, 3, 26, 7, 26, 660, 10,
	26, 12, 26, 14, 26, 663, 11, 26, 3, 27, 3, 27, 5, 27, 667, 10, 27, 3, 28,
	5, 28, 670, 10, 28, 3, 28, 3, 28, 3, 28, 5, 28, 675, 10, 28, 3, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 687,
	10, 28, 3, 29, 3, 29, 7, 29, 691, 10, 29, 12, 29, 14, 29, 694, 11, 29,
	3, 29, 5, 29, 697, 10, 29, 3, 29, 7, 29, 700, 10, 29, 12, 29, 14, 29, 703,
	11, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 7, 30, 710, 10, 30, 12, 30,
	14, 30, 713, 11, 30, 3, 30, 5, 30, 716, 10, 30, 3, 31, 3, 31, 3, 31, 7,
	31, 721, 10, 31, 12, 31, 14, 31, 724, 11, 31, 3, 32, 3, 32, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 33, 3, 33, 5, 33, 734, 10, 33, 3, 34, 3, 34, 3, 34, 7,
	34, 739, 10, 34, 12, 34, 14, 34, 742, 11, 34, 3, 35, 3, 35, 3, 36, 3, 36,
	3, 36, 3, 37, 3, 37, 3, 37, 3, 38, 3, 38, 3, 38, 5, 38, 755, 10, 38, 3,
	39, 3, 39, 3, 39, 3, 40, 3, 40, 3, 40, 7, 40, 763, 10, 40, 12, 40, 14,
	40, 766, 11, 40, 3, 40, 3, 40, 7, 40, 770, 10, 40, 12, 40, 14, 40, 773,
	11, 40, 3, 40, 3, 40, 3, 41, 3, 41, 5, 41, 779, 10, 41, 3, 41, 3, 41, 7,
	41, 783, 10, 41, 12, 41, 14, 41, 786, 11, 41, 3, 41, 3, 41, 5, 41, 790,
	10, 41, 7, 41, 792, 10, 41, 12, 41, 14, 41, 795, 11, 41, 3, 41, 5, 41,
	798, 10, 41, 3, 42, 3, 42, 5, 42, 802, 10, 42, 3, 43, 3, 43, 5, 43, 806,
	10, 43, 3, 44, 3, 44, 3, 44, 3, 45, 3, 45, 3, 45, 7, 45, 814, 10, 45, 12,
	45, 14, 45, 817, 11, 45, 3, 45, 3, 45, 7, 45, 821, 10, 45, 12, 45, 14,
	45, 824, 11, 45, 3, 45, 3, 45, 3, 45, 7, 45, 829, 10, 45, 12, 45, 14, 45,
	832, 11, 45, 3, 45, 7, 45, 835, 10, 45, 12, 45, 14, 45, 838, 11, 45, 3,
	45, 3, 45, 5, 45, 842, 10, 45, 3, 46, 3, 46, 5, 46, 846, 10, 46, 3, 47,
	3, 47, 7, 47, 850, 10, 47, 12, 47, 14, 47, 853, 11, 47, 3, 47, 3, 47, 3,
	48, 3, 48, 3, 48, 3, 48, 3, 48, 3, 48, 5, 48, 863, 10, 48, 3, 49, 3, 49,
	3, 49, 5, 49, 868, 10, 49, 3, 49, 7, 49, 871, 10, 49, 12, 49, 14, 49, 874,
	11, 49, 3, 49, 3, 49, 3, 50, 3, 50, 3, 51, 3, 51, 7, 51, 882, 10, 51, 12,
	51, 14, 51, 885, 11, 51, 3, 51, 3, 51, 5, 51, 889, 10, 51, 3, 52, 3, 52,
	3, 52, 5, 52, 894, 10, 52, 3, 52, 3, 52, 7, 52, 898, 10, 52, 12, 52, 14,
	52, 901, 11, 52, 3, 52, 5, 52, 904, 10, 52, 3, 53, 3, 53, 3, 54, 3, 54,
	5, 54, 910, 10, 54, 3, 55, 3, 55, 5, 55, 914, 10, 55, 3, 55, 7, 55, 917,
	10, 55, 12, 55, 14, 55, 920, 11, 55, 3, 55, 5, 55, 923, 10, 55, 3, 56,
	3, 56, 3, 56, 3, 56, 5, 56, 929, 10, 56, 3, 56, 3, 56, 5, 56, 933, 10,
	56, 3, 56, 7, 56, 936, 10, 56, 12, 56, 14, 56, 939, 11, 56, 3, 56, 5, 56,
	942, 10, 56, 3, 57, 3, 57, 5, 57, 946, 10, 57, 3, 57, 7, 57, 949, 10, 57,
	12, 57, 14, 57, 952, 11, 57, 3, 57, 5, 57, 955, 10, 57, 3, 57, 7, 57, 958,
	10, 57, 12, 57, 14, 57, 961, 11, 57, 3, 57, 3, 57, 3, 58, 3, 58, 3, 58,
	3, 58, 7, 58, 969, 10, 58, 12, 58, 14, 58, 972, 11, 58, 3, 58, 3, 58, 7,
	58, 976, 10, 58, 12, 58, 14, 58, 979, 11, 58, 3, 58, 3, 58, 5, 58, 983,
	10, 58, 3, 59, 3, 59, 3, 59, 7, 59, 988, 10, 59, 12, 59, 14, 59, 991, 11,
	59, 3, 59, 3, 59, 7, 59, 995, 10, 59, 12, 59, 14, 59, 998, 11, 59, 3, 59,
	5, 59, 1001, 10, 59, 3, 60, 3, 60, 3, 60, 7, 60, 1006, 10, 60, 12, 60,
	14, 60, 1009, 11, 60, 3, 60, 5, 60, 1012, 10, 60, 3, 60, 3, 60, 3, 60,
	3, 60, 3, 60, 5, 60, 1019, 10, 60, 5, 60, 1021, 10, 60, 3, 61, 3, 61, 3,
	61, 5, 61, 1026, 10, 61, 3, 61, 7, 61, 1029, 10, 61, 12, 61, 14, 61, 1032,
	11, 61, 3, 61, 5, 61, 1035, 10, 61, 3, 61, 7, 61, 1038, 10, 61, 12, 61,
	14, 61, 1041, 11, 61, 3, 61, 3, 61, 3, 62, 3, 62, 5, 62, 1047, 10, 62,
	3, 62, 7, 62, 1050, 10, 62, 12, 62, 14, 62, 1053, 11, 62, 3, 62, 5, 62,
	1056, 10, 62, 3, 62, 7, 62, 1059, 10, 62, 12, 62, 14, 62, 1062, 11, 62,
	3, 62, 3, 62, 3, 63, 3, 63, 3, 64, 3, 64, 3, 64, 7, 64, 1071, 10, 64, 12,
	64, 14, 64, 1074, 11, 64, 3, 64, 3, 64, 7, 64, 1078, 10, 64, 12, 64, 14,
	64, 1081, 11, 64, 3, 64, 5, 64, 1084, 10, 64, 3, 65, 5, 65, 1087, 10, 65,
	3, 65, 3, 65, 3, 65, 5, 65, 1092, 10, 65, 3, 65, 3, 65, 5, 65, 1096, 10,
	65, 3, 65, 7, 65, 1099, 10, 65, 12, 65, 14, 65, 1102, 11, 65, 3, 65, 5,
	65, 1105, 10, 65, 3, 66, 3, 66, 3, 66, 5, 66, 1110, 10, 66, 3, 66, 3, 66,
	3, 67, 3, 67, 3, 68, 7, 68, 1117, 10, 68, 12, 68, 14, 68, 1120, 11, 68,
	3, 68, 5, 68, 1123, 10, 68, 3, 68, 7, 68, 1126, 10, 68, 12, 68, 14, 68,
	1129, 11, 68, 3, 68, 5, 68, 1132, 10, 68, 3, 69, 3, 69, 5, 69, 1136, 10,
	69, 3, 69, 7, 69, 1139, 10, 69, 12, 69, 14, 69, 1142, 11, 69, 3, 69, 5,
	69, 1145, 10, 69, 3, 69, 7, 69, 1148, 10, 69, 12, 69, 14, 69, 1151, 11,
	69, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 7, 70, 1158, 10, 70, 12, 70, 14,
	70, 1161, 11, 70, 3, 70, 3, 70, 7, 70, 1165, 10, 70, 12, 70, 14, 70, 1168,
	11, 70, 3, 70, 5, 70, 1171, 10, 70, 3, 71, 5, 71, 1174, 10, 71, 3, 71,
	3, 71, 3, 71, 5, 71, 1179, 10, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 5,
	71, 1186, 10, 71, 3, 72, 3, 72, 3, 72, 7, 72, 1191, 10, 72, 12, 72, 14,
	72, 1194, 11, 72, 3, 72, 5, 72, 1197, 10, 72, 3, 73, 3, 73, 3, 73, 5, 73,
	1202, 10, 73, 3, 73, 7, 73, 1205, 10, 73, 12, 73, 14, 73, 1208, 11, 73,
	3, 73, 5, 73, 1211, 10, 73, 3, 73, 7, 73, 1214, 10, 73, 12, 73, 14, 73,
	1217, 11, 73, 3, 73, 3, 73, 3, 74, 3, 74, 3, 75, 3, 75, 5, 75, 1225, 10,
	75, 3, 75, 7, 75, 1228, 10, 75, 12, 75, 14, 75, 1231, 11, 75, 3, 75, 5,
	75, 1234, 10, 75, 3, 75, 7, 75, 1237, 10, 75, 12, 75, 14, 75, 1240, 11,
	75, 3, 75, 3, 75, 3, 76, 3, 76, 3, 76, 7, 76, 1247, 10, 76, 12, 76, 14,
	76, 1250, 11, 76, 3, 76, 3, 76, 7, 76, 1254, 10, 76, 12, 76, 14, 76, 1257,
	11, 76, 3, 76, 5, 76, 1260, 10, 76, 3, 77, 5, 77, 1263, 10, 77, 3, 77,
	3, 77, 3, 77, 5, 77, 1268, 10, 77, 3, 77, 3, 77, 5, 77, 1272, 10, 77, 3,
	78, 3, 78, 5, 78, 1276, 10, 78, 3, 78, 7, 78, 1279, 10, 78, 12, 78, 14,
	78, 1282, 11, 78, 3, 78, 3, 78, 3, 79, 5, 79, 1287, 10, 79, 3, 79, 7, 79,
	1290, 10, 79, 12, 79, 14, 79, 1293, 11, 79, 3, 79, 5, 79, 1296, 10, 79,
	3, 79, 3, 79, 3, 79, 5, 79, 1301, 10, 79, 3, 79, 3, 79, 5, 79, 1305, 10,
	79, 3, 80, 3, 80, 3, 80, 5, 80, 1310, 10, 80, 3, 80, 3, 80, 5, 80, 1314,
	10, 80, 3, 80, 3, 80, 5, 80, 1318, 10, 80, 3, 80, 3, 80, 3, 80, 3, 80,
	5, 80, 1324, 10, 80, 3, 80, 3, 80, 3, 80, 7, 80, 1329, 10, 80, 12, 80,
	14, 80, 1332, 11, 80, 3, 81, 3, 81, 3, 82, 3, 82, 3, 83, 3, 83, 5, 83,
	1340, 10, 83, 3, 83, 3, 83, 3, 84, 3, 84, 3, 84, 7, 84, 1347, 10, 84, 12,
	84, 14, 84, 1350, 11, 84, 3, 85, 3, 85, 3, 86, 3, 86, 3, 86, 3, 87, 3,
	87, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 5, 88, 1364, 10, 88, 3, 88, 5, 88,
	1367, 10, 88, 5, 88, 1369, 10, 88, 3, 89, 3, 89, 3, 89, 5, 89, 1374, 10,
	89, 3, 89, 3, 89, 3, 90, 3, 90, 5, 90, 1380, 10, 90, 3, 91, 3, 91, 7, 91,
	1384, 10, 91, 12, 91, 14, 91, 1387, 11, 91, 3, 91, 5, 91, 1390, 10, 91,
	3, 91, 7, 91, 1393, 10, 91, 12, 91, 14, 91, 1396, 11, 91, 3, 91, 3, 91,
	3, 92, 3, 92, 7, 92, 1402, 10, 92, 12, 92, 14, 92, 1405, 11, 92, 3, 92,
	7, 92, 1408, 10, 92, 12, 92, 14, 92, 1411, 11, 92, 3, 93, 3, 93, 5, 93,
	1415, 10, 93, 3, 94, 3, 94, 3, 94, 7, 94, 1420, 10, 94, 12, 94, 14, 94,
	1423, 11, 94, 3, 94, 3, 94, 7, 94, 1427, 10, 94, 12, 94, 14, 94, 1430,
	11, 94, 3, 94, 5, 94, 1433, 10, 94, 3, 95, 3, 95, 3, 95, 3, 95, 5, 95,
	1439, 10, 95, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96, 3,
	96, 3, 96, 5, 96, 1451, 10, 96, 3, 97, 6, 97, 1454, 10, 97, 13, 97, 14,
	97, 1455, 3, 98, 3, 98, 3, 98, 3, 98, 3, 99, 3, 99, 3, 99, 3, 99, 5, 99,
	1466, 10, 99, 3, 100, 3, 100, 5, 100, 1470, 10, 100, 3, 100, 3, 100, 3,
	100, 3, 100, 3, 100, 5, 100, 1477, 10, 100, 3, 100, 3, 100, 3, 100, 3,
	100, 3, 100, 3, 100, 5, 100, 1485, 10, 100, 3, 101, 3, 101, 3, 101, 3,
	101, 3, 101, 3, 101, 3, 101, 5, 101, 1494, 10, 101, 3, 102, 3, 102, 3,
	102, 3, 103, 3, 103, 3, 103, 3, 104, 3, 104, 3, 105, 3, 105, 3, 106, 3,
	106, 7, 106, 1508, 10, 106, 12, 106, 14, 106, 1511, 11, 106, 3, 106, 5,
	106, 1514, 10, 106, 3, 106, 7, 106, 1517, 10, 106, 12, 106, 14, 106, 1520,
	11, 106, 3, 106, 3, 106, 3, 107, 3, 107, 3, 107, 7, 107, 1527, 10, 107,
	12, 107, 14, 107, 1530, 11, 107, 3, 107, 3, 107, 7, 107, 1534, 10, 107,
	12, 107, 14, 107, 1537, 11, 107, 3, 107, 5, 107, 1540, 10, 107, 3, 108,
	3, 108, 3, 109, 3, 109, 7, 109, 1546, 10, 109, 12, 109, 14, 109, 1549,
	11, 109, 3, 109, 5, 109, 1552, 10, 109, 3, 109, 7, 109, 1555, 10, 109,
	12, 109, 14, 109, 1558, 11, 109, 3, 109, 3, 109, 3, 110, 3, 110, 3, 110,
	7, 110, 1565, 10, 110, 12, 110, 14, 110, 1568, 11, 110, 3, 110, 3, 110,
	7, 110, 1572, 10, 110, 12, 110, 14, 110, 1575, 11, 110, 3, 110, 5, 110,
	1578, 10, 110, 3, 111, 3, 111, 5, 111, 1582, 10, 111, 3, 111, 3, 111, 3,
	111, 3, 112, 3, 112, 7, 112, 1589, 10, 112, 12, 112, 14, 112, 1592, 11,
	112, 3, 112, 5, 112, 1595, 10, 112, 3, 112, 7, 112, 1598, 10, 112, 12,
	112, 14, 112, 1601, 11, 112, 3, 112, 3, 112, 3, 113, 3, 113, 3, 113, 7,
	113, 1608, 10, 113, 12, 113, 14, 113, 1611, 11, 113, 3, 113, 3, 113, 7,
	113, 1615, 10, 113, 12, 113, 14, 113, 1618, 11, 113, 3, 113, 5, 113, 1621,
	10, 113, 3, 114, 3, 114, 3, 114, 5, 114, 1626, 10, 114, 3, 115, 3, 115,
	3, 115, 3, 116, 3, 116, 3, 116, 3, 117, 3, 117, 3, 117, 3, 117, 3, 117,
	3, 117, 3, 117, 7, 117, 1641, 10, 117, 12, 117, 14, 117, 1644, 11, 117,
	3, 117, 3, 117, 7, 117, 1648, 10, 117, 12, 117, 14, 117, 1651, 11, 117,
	3, 117, 5, 117, 1654, 10, 117, 3, 117, 7, 117, 1657, 10, 117, 12, 117,
	14, 117, 1660, 11, 117, 3, 117, 3, 117, 3, 117, 5, 117, 1665, 10, 117,
	3, 118, 3, 118, 3, 118, 7, 118, 1670, 10, 118, 12, 118, 14, 118, 1673,
	11, 118, 3, 118, 3, 118, 7, 118, 1677, 10, 118, 12, 118, 14, 118, 1680,
	11, 118, 3, 118, 5, 118, 1683, 10, 118, 3, 119, 3, 119, 5, 119, 1687, 10,
	119, 3, 120, 3, 120, 3, 120, 3, 121, 3, 121, 7, 121, 1694, 10, 121, 12,
	121, 14, 121, 1697, 11, 121, 3, 121, 3, 121, 7, 121, 1701, 10, 121, 12,
	121, 14, 121, 1704, 11, 121, 3, 121, 3, 121, 3, 122, 3, 122, 3, 122, 3,
	122, 3, 122, 3, 122, 6, 122, 1714, 10, 122, 13, 122, 14, 122, 1715, 3,
	122, 3, 122, 5, 122, 1720, 10, 122, 3, 123, 3, 123, 3, 123, 3, 123, 3,
	123, 5, 123, 1727, 10, 123, 3, 124, 3, 124, 3, 125, 3, 125, 7, 125, 1733,
	10, 125, 12, 125, 14, 125, 1736, 11, 125, 3, 125, 5, 125, 1739, 10, 125,
	3, 126, 3, 126, 3, 126, 5, 126, 1744, 10, 126, 3, 127, 3, 127, 3, 127,
	3, 127, 3, 127, 3, 127, 3, 127, 3, 127, 5, 127, 1754, 10, 127, 5, 127,
	1756, 10, 127, 3, 128, 3, 128, 3, 128, 3, 128, 3, 129, 5, 129, 1763, 10,
	129, 3, 129, 3, 129, 5, 129, 1767, 10, 129, 3, 130, 3, 130, 3, 130, 3,
	130, 3, 130, 3, 130, 5, 130, 1775, 10, 130, 3, 131, 3, 131, 3, 131, 7,
	131, 1780, 10, 131, 12, 131, 14, 131, 1783, 11, 131, 3, 132, 3, 132, 3,
	132, 3, 132, 3, 132, 3, 132, 3, 132, 3, 132, 3, 132, 3, 132, 5, 132, 1795,
	10, 132, 3, 133, 3, 133, 5, 133, 1799, 10, 133, 3, 134, 6, 134, 1802, 10,
	134, 13, 134, 14, 134, 1803, 3, 135, 3, 135, 3, 135, 3, 135, 3, 136, 3,
	136, 7, 136, 1812, 10, 136, 12, 136, 14, 136, 1815, 11, 136, 3, 137, 3,
	137, 3, 137, 3, 138, 3, 138, 3, 138, 5, 138, 1823, 10, 138, 3, 138, 3,
	138, 3, 138, 3, 138, 3, 138, 3, 138, 7, 138, 1831, 10, 138, 12, 138, 14,
	138, 1834, 11, 138, 3, 139, 3, 139, 3, 139, 3, 139, 3, 139, 5, 139, 1841,
	10, 139, 3, 139, 7, 139, 1844, 10, 139, 12, 139, 14, 139, 1847, 11, 139,
	3, 139, 3, 139, 7, 139, 1851, 10, 139, 12, 139, 14, 139, 1854, 11, 139,
	3, 139, 3, 139, 5, 139, 1858, 10, 139, 3, 139, 3, 139, 5, 139, 1862, 10,
	139, 3, 139, 7, 139, 1865, 10, 139, 12, 139, 14, 139, 1868, 11, 139, 3,
	139, 3, 139, 7, 139, 1872, 10, 139, 12, 139, 14, 139, 1875, 11, 139, 3,
	139, 3, 139, 5, 139, 1879, 10, 139, 7, 139, 1881, 10, 139, 12, 139, 14,
	139, 1884, 11, 139, 3, 140, 3, 140, 3, 140, 3, 140, 5, 140, 1890, 10, 140,
	3, 141, 3, 141, 3, 141, 5, 141, 1895, 10, 141, 3, 142, 3, 142, 3, 142,
	5, 142, 1900, 10, 142, 3, 142, 3, 142, 3, 142, 7, 142, 1905, 10, 142, 12,
	142, 14, 142, 1908, 11, 142, 3, 143, 3, 143, 5, 143, 1912, 10, 143, 3,
	144, 3, 144, 3, 145, 3, 145, 7, 145, 1918, 10, 145, 12, 145, 14, 145, 1921,
	11, 145, 3, 145, 5, 145, 1924, 10, 145, 3, 145, 7, 145, 1927, 10, 145,
	12, 145, 14, 145, 1930, 11, 145, 3, 145, 3, 145, 3, 146, 3, 146, 3, 146,
	7, 146, 1937, 10, 146, 12, 146, 14, 146, 1940, 11, 146, 3, 146, 3, 146,
	7, 146, 1944, 10, 146, 12, 146, 14, 146, 1947, 11, 146, 3, 146, 5, 146,
	1950, 10, 146, 3, 147, 3, 147, 3, 147, 5, 147, 1955, 10, 147, 3, 147, 3,
	147, 5, 147, 1959, 10, 147, 3, 148, 3, 148, 3, 148, 3, 148, 3, 149, 3,
	149, 3, 149, 5, 149, 1968, 10, 149, 3, 149, 3, 149, 3, 150, 3, 150, 3,
	150, 5, 150, 1975, 10, 150, 3, 150, 3, 150, 3, 150, 5, 150, 1980, 10, 150,
	3, 150, 3, 150, 3, 151, 3, 151, 7, 151, 1986, 10, 151, 12, 151, 14, 151,
	1989, 11, 151, 3, 151, 3, 151, 3, 152, 3, 152, 3, 152, 7, 152, 1996, 10,
	152, 12, 152, 14, 152, 1999, 11, 152, 3, 152, 3, 152, 7, 152, 2003, 10,
	152, 12, 152, 14, 152, 2006, 11, 152, 3, 152, 5, 152, 2009, 10, 152, 3,
	153, 3, 153, 5, 153, 2013, 10, 153, 3, 154, 3, 154, 5, 154, 2017, 10, 154,
	3, 155, 3, 155, 5, 155, 2021, 10, 155, 3, 156, 3, 156, 3, 156, 7, 156,
	2026, 10, 156, 12, 156, 14, 156, 2029, 11, 156, 3, 157, 3, 157, 3, 158,
	3, 158, 3, 159, 3, 159, 3, 160, 3, 160, 3, 160, 7, 160, 2040, 10, 160,
	12, 160, 14, 160, 2043, 11, 160, 3, 160, 3, 160, 3, 161, 3, 161, 3, 161,
	7, 161, 2050, 10, 161, 12, 161, 14, 161, 2053, 11, 161, 3, 162, 3, 162,
	3, 163, 3, 163, 3, 164, 3, 164, 3, 165, 3, 165, 3, 166, 3, 166, 3, 167,
	3, 167, 3, 167, 5, 167, 2068, 10, 167, 3, 168, 3, 168, 3, 169, 3, 169,
	3, 170, 3, 170, 5, 170, 2076, 10, 170, 3, 170, 3, 170, 7, 170, 2080, 10,
	170, 12, 170, 14, 170, 2083, 11, 170, 5, 170, 2085, 10, 170, 3, 171, 3,
	171, 6, 171, 2089, 10, 171, 13, 171, 14, 171, 2090, 3, 172, 3, 172, 5,
	172, 2095, 10, 172, 3, 173, 3, 173, 5, 173, 2099, 10, 173, 3, 174, 3, 174,
	3, 175, 3, 175, 5, 175, 2105, 10, 175, 3, 176, 3, 176, 3, 176, 3, 176,
	5, 176, 2111, 10, 176, 3, 177, 3, 177, 3, 178, 3, 178, 3, 179, 5, 179,
	2118, 10, 179, 3, 179, 3, 179, 5, 179, 2122, 10, 179, 3, 179, 5, 179, 2125,
	10, 179, 3, 180, 3, 180, 3, 181, 3, 181, 3, 182, 3, 182, 3, 183, 3, 183,
	3, 184, 3, 184, 3, 184, 3, 184, 5, 184, 2139, 10, 184, 3, 184, 5, 184,
	2142, 10, 184, 3, 184, 5, 184, 2145, 10, 184, 3, 185, 3, 185, 3, 185, 3,
	185, 5, 185, 2151, 10, 185, 3, 185, 5, 185, 2154, 10, 185, 3, 185, 5, 185,
	2157, 10, 185, 3, 185, 2, 5, 158, 274, 276, 186, 2, 4, 6, 8, 10, 12, 14,
	16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50,
	52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86,
	88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118,
	120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148,
	150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178,
	180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208,
	210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238,
	240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268,
	270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298,
	300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328,
	330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358,
	360, 362, 364, 366, 368, 2, 13, 3, 2, 75, 76, 4, 2, 76, 76, 78, 78, 8,
	2, 3, 7, 10, 10, 13, 21, 23, 26, 28, 29, 31, 31, 3, 2, 3, 31, 3, 2, 60,
	61, 4, 2, 42, 45, 47, 56, 4, 2, 11, 11, 27, 27, 3, 2, 79, 83, 3, 2, 85,
	86, 4, 2, 41, 41, 91, 91, 4, 2, 39, 39, 91, 91, 2, 2311, 2, 373, 3, 2,
	2, 2, 4, 393, 3, 2, 2, 2, 6, 395, 3, 2, 2, 2, 8, 397, 3, 2, 2, 2, 10, 417,
	3, 2, 2, 2, 12, 419, 3, 2, 2, 2, 14, 437, 3, 2, 2, 2, 16, 447, 3, 2, 2,
	2, 18, 464, 3, 2, 2, 2, 20, 466, 3, 2, 2, 2, 22, 478, 3, 2, 2, 2, 24, 480,
	3, 2, 2, 2, 26, 514, 3, 2, 2, 2, 28, 516, 3, 2, 2, 2, 30, 542, 3, 2, 2,
	2, 32, 559, 3, 2, 2, 2, 34, 580, 3, 2, 2, 2, 36, 582, 3, 2, 2, 2, 38, 584,
	3, 2, 2, 2, 40, 586, 3, 2, 2, 2, 42, 590, 3, 2, 2, 2, 44, 606, 3, 2, 2,
	2, 46, 631, 3, 2, 2, 2, 48, 633, 3, 2, 2, 2, 50, 649, 3, 2, 2, 2, 52, 664,
	3, 2, 2, 2, 54, 669, 3, 2, 2, 2, 56, 688, 3, 2, 2, 2, 58, 706, 3, 2, 2,
	2, 60, 717, 3, 2, 2, 2, 62, 725, 3, 2, 2, 2, 64, 727, 3, 2, 2, 2, 66, 735,
	3, 2, 2, 2, 68, 743, 3, 2, 2, 2, 70, 745, 3, 2, 2, 2, 72, 748, 3, 2, 2,
	2, 74, 751, 3, 2, 2, 2, 76, 756, 3, 2, 2, 2, 78, 759, 3, 2, 2, 2, 80, 778,
	3, 2, 2, 2, 82, 799, 3, 2, 2, 2, 84, 803, 3, 2, 2, 2, 86, 807, 3, 2, 2,
	2, 88, 841, 3, 2, 2, 2, 90, 843, 3, 2, 2, 2, 92, 847, 3, 2, 2, 2, 94, 862,
	3, 2, 2, 2, 96, 864, 3, 2, 2, 2, 98, 877, 3, 2, 2, 2, 100, 879, 3, 2, 2,
	2, 102, 890, 3, 2, 2, 2, 104, 905, 3, 2, 2, 2, 106, 909, 3, 2, 2, 2, 108,
	911, 3, 2, 2, 2, 110, 924, 3, 2, 2, 2, 112, 943, 3, 2, 2, 2, 114, 982,
	3, 2, 2, 2, 116, 984, 3, 2, 2, 2, 118, 1020, 3, 2, 2, 2, 120, 1022, 3,
	2, 2, 2, 122, 1044, 3, 2, 2, 2, 124, 1065, 3, 2, 2, 2, 126, 1067, 3, 2,
	2, 2, 128, 1086, 3, 2, 2, 2, 130, 1106, 3, 2, 2, 2, 132, 1113, 3, 2, 2,
	2, 134, 1122, 3, 2, 2, 2, 136, 1133, 3, 2, 2, 2, 138, 1154, 3, 2, 2, 2,
	140, 1173, 3, 2, 2, 2, 142, 1187, 3, 2, 2, 2, 144, 1198, 3, 2, 2, 2, 146,
	1220, 3, 2, 2, 2, 148, 1222, 3, 2, 2, 2, 150, 1243, 3, 2, 2, 2, 152, 1262,
	3, 2, 2, 2, 154, 1273, 3, 2, 2, 2, 156, 1286, 3, 2, 2, 2, 158, 1323, 3,
	2, 2, 2, 160, 1333, 3, 2, 2, 2, 162, 1335, 3, 2, 2, 2, 164, 1337, 3, 2,
	2, 2, 166, 1343, 3, 2, 2, 2, 168, 1351, 3, 2, 2, 2, 170, 1353, 3, 2, 2,
	2, 172, 1356, 3, 2, 2, 2, 174, 1368, 3, 2, 2, 2, 176, 1373, 3, 2, 2, 2,
	178, 1379, 3, 2, 2, 2, 180, 1381, 3, 2, 2, 2, 182, 1399, 3, 2, 2, 2, 184,
	1412, 3, 2, 2, 2, 186, 1416, 3, 2, 2, 2, 188, 1438, 3, 2, 2, 2, 190, 1450,
	3, 2, 2, 2, 192, 1453, 3, 2, 2, 2, 194, 1457, 3, 2, 2, 2, 196, 1465, 3,
	2, 2, 2, 198, 1484, 3, 2, 2, 2, 200, 1493, 3, 2, 2, 2, 202, 1495, 3, 2,
	2, 2, 204, 1498, 3, 2, 2, 2, 206, 1501, 3, 2, 2, 2, 208, 1503, 3, 2, 2,
	2, 210, 1505, 3, 2, 2, 2, 212, 1523, 3, 2, 2, 2, 214, 1541, 3, 2, 2, 2,
	216, 1543, 3, 2, 2, 2, 218, 1561, 3, 2, 2, 2, 220, 1581, 3, 2, 2, 2, 222,
	1586, 3, 2, 2, 2, 224, 1604, 3, 2, 2, 2, 226, 1622, 3, 2, 2, 2, 228, 1627,
	3, 2, 2, 2, 230, 1630, 3, 2, 2, 2, 232, 1664, 3, 2, 2, 2, 234, 1666, 3,
	2, 2, 2, 236, 1686, 3, 2, 2, 2, 238, 1688, 3, 2, 2, 2, 240, 1691, 3, 2,
	2, 2, 242, 1719, 3, 2, 2, 2, 244, 1726, 3, 2, 2, 2, 246, 1728, 3, 2, 2,
	2, 248, 1730, 3, 2, 2, 2, 250, 1743, 3, 2, 2, 2, 252, 1745, 3, 2, 2, 2,
	254, 1757, 3, 2, 2, 2, 256, 1766, 3, 2, 2, 2, 258, 1774, 3, 2, 2, 2, 260,
	1776, 3, 2, 2, 2, 262, 1794, 3, 2, 2, 2, 264, 1796, 3, 2, 2, 2, 266, 1801,
	3, 2, 2, 2, 268, 1805, 3, 2, 2, 2, 270, 1809, 3, 2, 2, 2, 272, 1816, 3,
	2, 2, 2, 274, 1822, 3, 2, 2, 2, 276, 1835, 3, 2, 2, 2, 278, 1889, 3, 2,
	2, 2, 280, 1891, 3, 2, 2, 2, 282, 1899, 3, 2, 2, 2, 284, 1909, 3, 2, 2,
	2, 286, 1913, 3, 2, 2, 2, 288, 1915, 3, 2, 2, 2, 290, 1933, 3, 2, 2, 2,
	292, 1954, 3, 2, 2, 2, 294, 1960, 3, 2, 2, 2, 296, 1964, 3, 2, 2, 2, 298,
	1971, 3, 2, 2, 2, 300, 1983, 3, 2, 2, 2, 302, 1992, 3, 2, 2, 2, 304, 2010,
	3, 2, 2, 2, 306, 2016, 3, 2, 2, 2, 308, 2020, 3, 2, 2, 2, 310, 2022, 3,
	2, 2, 2, 312, 2030, 3, 2, 2, 2, 314, 2032, 3, 2, 2, 2, 316, 2034, 3, 2,
	2, 2, 318, 2036, 3, 2, 2, 2, 320, 2046, 3, 2, 2, 2, 322, 2054, 3, 2, 2,
	2, 324, 2056, 3, 2, 2, 2, 326, 2058, 3, 2, 2, 2, 328, 2060, 3, 2, 2, 2,
	330, 2062, 3, 2, 2, 2, 332, 2067, 3, 2, 2, 2, 334, 2069, 3, 2, 2, 2, 336,
	2071, 3, 2, 2, 2, 338, 2084, 3, 2, 2, 2, 340, 2088, 3, 2, 2, 2, 342, 2094,
	3, 2, 2, 2, 344, 2098, 3, 2, 2, 2, 346, 2100, 3, 2, 2, 2, 348, 2104, 3,
	2, 2, 2, 350, 2110, 3, 2, 2, 2, 352, 2112, 3, 2, 2, 2, 354, 2114, 3, 2,
	2, 2, 356, 2124, 3, 2, 2, 2, 358, 2126, 3, 2, 2, 2, 360, 2128, 3, 2, 2,
	2, 362, 2130, 3, 2, 2, 2, 364, 2132, 3, 2, 2, 2, 366, 2144, 3, 2, 2, 2,
	368, 2156, 3, 2, 2, 2, 370, 372, 7, 91, 2, 2, 371, 370, 3, 2, 2, 2, 372,
	375, 3, 2, 2, 2, 373, 371, 3, 2, 2, 2, 373, 374, 3, 2, 2, 2, 374, 377,
	3, 2, 2, 2, 375, 373, 3, 2, 2, 2, 376, 378, 5, 8, 5, 2, 377, 376, 3, 2,
	2, 2, 377, 378, 3, 2, 2, 2, 378, 382, 3, 2, 2, 2, 379, 381, 7, 91, 2, 2,
	380, 379, 3, 2, 2, 2, 381, 384, 3, 2, 2, 2, 382, 380, 3, 2, 2, 2, 382,
	383, 3, 2, 2, 2, 383, 385, 3, 2, 2, 2, 384, 382, 3, 2, 2, 2, 385, 386,
	7, 2, 2, 3, 386, 3, 3, 2, 2, 2, 387, 394, 5, 54, 28, 2, 388, 394, 5, 184,
	93, 2, 389, 394, 5, 10, 6, 2, 390, 394, 5, 22, 12, 2, 391, 394, 5, 34,
	18, 2, 392, 394, 5, 6, 4, 2, 393, 387, 3, 2, 2, 2, 393, 388, 3, 2, 2, 2,
	393, 389, 3, 2, 2, 2, 393, 390, 3, 2, 2, 2, 393, 391, 3, 2, 2, 2, 393,
	392, 3, 2, 2, 2, 394, 5, 3, 2, 2, 2, 395, 396, 5, 318, 160, 2, 396, 7,
	3, 2, 2, 2, 397, 409, 5, 4, 3, 2, 398, 402, 5, 362, 182, 2, 399, 401, 7,
	91, 2, 2, 400, 399, 3, 2, 2, 2, 401, 404, 3, 2, 2, 2, 402, 400, 3, 2, 2,
	2, 402, 403, 3, 2, 2, 2, 403, 405, 3, 2, 2, 2, 404, 402, 3, 2, 2, 2, 405,
	406, 5, 4, 3, 2, 406, 408, 3, 2, 2, 2, 407, 398, 3, 2, 2, 2, 408, 411,
	3, 2, 2, 2, 409, 407, 3, 2, 2, 2, 409, 410, 3, 2, 2, 2, 410, 413, 3, 2,
	2, 2, 411, 409, 3, 2, 2, 2, 412, 414, 7, 41, 2, 2, 413, 412, 3, 2, 2, 2,
	413, 414, 3, 2, 2, 2, 414, 9, 3, 2, 2, 2, 415, 418, 5, 12, 7, 2, 416, 418,
	5, 14, 8, 2, 417, 415, 3, 2, 2, 2, 417, 416, 3, 2, 2, 2, 418, 11, 3, 2,
	2, 2, 419, 420, 7, 12, 2, 2, 420, 424, 5, 158, 80, 2, 421, 423, 7, 91,
	2, 2, 422, 421, 3, 2, 2, 2, 423, 426, 3, 2, 2, 2, 424, 422, 3, 2, 2, 2,
	424, 425, 3, 2, 2, 2, 425, 427, 3, 2, 2, 2, 426, 424, 3, 2, 2, 2, 427,
	428, 7, 16, 2, 2, 428, 432, 5, 184, 93, 2, 429, 431, 7, 91, 2, 2, 430,
	429, 3, 2, 2, 2, 431, 434, 3, 2, 2, 2, 432, 430, 3, 2, 2, 2, 432, 433,
	3, 2, 2, 2, 433, 435, 3, 2, 2, 2, 434, 432, 3, 2, 2, 2, 435, 436, 5, 56,
	29, 2, 436, 13, 3, 2, 2, 2, 437, 438, 7, 30, 2, 2, 438, 442, 5, 16, 9,
	2, 439, 441, 7, 91, 2, 2, 440, 439, 3, 2, 2, 2, 441, 444, 3, 2, 2, 2, 442,
	440, 3, 2, 2, 2, 442, 443, 3, 2, 2, 2, 443, 445, 3, 2, 2, 2, 444, 442,
	3, 2, 2, 2, 445, 446, 5, 56, 29, 2, 446, 15, 3, 2, 2, 2, 447, 459, 5, 18,
	10, 2, 448, 452, 5, 364, 183, 2, 449, 451, 7, 91, 2, 2, 450, 449, 3, 2,
	2, 2, 451, 454, 3, 2, 2, 2, 452, 450, 3, 2, 2, 2, 452, 453, 3, 2, 2, 2,
	453, 455, 3, 2, 2, 2, 454, 452, 3, 2, 2, 2, 455, 456, 5, 18, 10, 2, 456,
	458, 3, 2, 2, 2, 457, 448, 3, 2, 2, 2, 458, 461, 3, 2, 2, 2, 459, 457,
	3, 2, 2, 2, 459, 460, 3, 2, 2, 2, 460, 17, 3, 2, 2, 2, 461, 459, 3, 2,
	2, 2, 462, 465, 5, 184, 93, 2, 463, 465, 5, 20, 11, 2, 464, 462, 3, 2,
	2, 2, 464, 463, 3, 2, 2, 2, 465, 19, 3, 2, 2, 2, 466, 467, 7, 29, 2, 2,
	467, 471, 5, 158, 80, 2, 468, 470, 7, 91, 2, 2, 469, 468, 3, 2, 2, 2, 470,
	473, 3, 2, 2, 2, 471, 469, 3, 2, 2, 2, 471, 472, 3, 2, 2, 2, 472, 474,
	3, 2, 2, 2, 473, 471, 3, 2, 2, 2, 474, 475, 5, 92, 47, 2, 475, 21, 3, 2,
	2, 2, 476, 479, 5, 24, 13, 2, 477, 479, 5, 28, 15, 2, 478, 476, 3, 2, 2,
	2, 478, 477, 3, 2, 2, 2, 479, 23, 3, 2, 2, 2, 480, 481, 7, 14, 2, 2, 481,
	485, 5, 16, 9, 2, 482, 484, 7, 91, 2, 2, 483, 482, 3, 2, 2, 2, 484, 487,
	3, 2, 2, 2, 485, 483, 3, 2, 2, 2, 485, 486, 3, 2, 2, 2, 486, 488, 3, 2,
	2, 2, 487, 485, 3, 2, 2, 2, 488, 492, 5, 56, 29, 2, 489, 491, 7, 91, 2,
	2, 490, 489, 3, 2, 2, 2, 491, 494, 3, 2, 2, 2, 492, 490, 3, 2, 2, 2, 492,
	493, 3, 2, 2, 2, 493, 496, 3, 2, 2, 2, 494, 492, 3, 2, 2, 2, 495, 497,
	5, 26, 14, 2, 496, 495, 3, 2, 2, 2, 496, 497, 3, 2, 2, 2, 497, 25, 3, 2,
	2, 2, 498, 502, 7, 9, 2, 2, 499, 501, 7, 91, 2, 2, 500, 499, 3, 2, 2, 2,
	501, 504, 3, 2, 2, 2, 502, 500, 3, 2, 2, 2, 502, 503, 3, 2, 2, 2, 503,
	505, 3, 2, 2, 2, 504, 502, 3, 2, 2, 2, 505, 515, 5, 56, 29, 2, 506, 510,
	7, 9, 2, 2, 507, 509, 7, 91, 2, 2, 508, 507, 3, 2, 2, 2, 509, 512, 3, 2,
	2, 2, 510, 508, 3, 2, 2, 2, 510, 511, 3, 2, 2, 2, 511, 513, 3, 2, 2, 2,
	512, 510, 3, 2, 2, 2, 513, 515, 5, 24, 13, 2, 514, 498, 3, 2, 2, 2, 514,
	506, 3, 2, 2, 2, 515, 27, 3, 2, 2, 2, 516, 517, 7, 19, 2, 2, 517, 521,
	5, 184, 93, 2, 518, 520, 7, 91, 2, 2, 519, 518, 3, 2, 2, 2, 520, 523, 3,
	2, 2, 2, 521, 519, 3, 2, 2, 2, 521, 522, 3, 2, 2, 2, 522, 524, 3, 2, 2,
	2, 523, 521, 3, 2, 2, 2, 524, 532, 7, 33, 2, 2, 525, 527, 7, 91, 2, 2,
	526, 525, 3, 2, 2, 2, 527, 530, 3, 2, 2, 2, 528, 526, 3, 2, 2, 2, 528,
	529, 3, 2, 2, 2, 529, 531, 3, 2, 2, 2, 530, 528, 3, 2, 2, 2, 531, 533,
	5, 30, 16, 2, 532, 528, 3, 2, 2, 2, 532, 533, 3, 2, 2, 2, 533, 537, 3,
	2, 2, 2, 534, 536, 7, 91, 2, 2, 535, 534, 3, 2, 2, 2, 536, 539, 3, 2, 2,
	2, 537, 535, 3, 2, 2, 2, 537, 538, 3, 2, 2, 2, 538, 540, 3, 2, 2, 2, 539,
	537, 3, 2, 2, 2, 540, 541, 7, 36, 2, 2, 541, 29, 3, 2, 2, 2, 542, 554,
	5, 32, 17, 2, 543, 547, 5, 362, 182, 2, 544, 546, 7, 91, 2, 2, 545, 544,
	3, 2, 2, 2, 546, 549, 3, 2, 2, 2, 547, 545, 3, 2, 2, 2, 547, 548, 3, 2,
	2, 2, 548, 550, 3, 2, 2, 2, 549, 547, 3, 2, 2, 2, 550, 551, 5, 32, 17,
	2, 551, 553, 3, 2, 2, 2, 552, 543, 3, 2, 2, 2, 553, 556, 3, 2, 2, 2, 554,
	552, 3, 2, 2, 2, 554, 555, 3, 2, 2, 2, 555, 557, 3, 2, 2, 2, 556, 554,
	3, 2, 2, 2, 557, 558, 5, 362, 182, 2, 558, 31, 3, 2, 2, 2, 559, 563, 5,
	158, 80, 2, 560, 562, 7, 91, 2, 2, 561, 560, 3, 2, 2, 2, 562, 565, 3, 2,
	2, 2, 563, 561, 3, 2, 2, 2, 563, 564, 3, 2, 2, 2, 564, 566, 3, 2, 2, 2,
	565, 563, 3, 2, 2, 2, 566, 570, 7, 63, 2, 2, 567, 569, 7, 91, 2, 2, 568,
	567, 3, 2, 2, 2, 569, 572, 3, 2, 2, 2, 570, 568, 3, 2, 2, 2, 570, 571,
	3, 2, 2, 2, 571, 575, 3, 2, 2, 2, 572, 570, 3, 2, 2, 2, 573, 576, 5, 56,
	29, 2, 574, 576, 5, 184, 93, 2, 575, 573, 3, 2, 2, 2, 575, 574, 3, 2, 2,
	2, 576, 33, 3, 2, 2, 2, 577, 581, 5, 36, 19, 2, 578, 581, 5, 38, 20, 2,
	579, 581, 5, 40, 21, 2, 580, 577, 3, 2, 2, 2, 580, 578, 3, 2, 2, 2, 580,
	579, 3, 2, 2, 2, 581, 35, 3, 2, 2, 2, 582, 583, 7, 6, 2, 2, 583, 37, 3,
	2, 2, 2, 584, 585, 7, 8, 2, 2, 585, 39, 3, 2, 2, 2, 586, 588, 7, 25, 2,
	2, 587, 589, 5, 184, 93, 2, 588, 587, 3, 2, 2, 2, 588, 589, 3, 2, 2, 2,
	589, 41, 3, 2, 2, 2, 590, 594, 7, 42, 2, 2, 591, 593, 7, 91, 2, 2, 592,
	591, 3, 2, 2, 2, 593, 596, 3, 2, 2, 2, 594, 592, 3, 2, 2, 2, 594, 595,
	3, 2, 2, 2, 595, 597, 3, 2, 2, 2, 596, 594, 3, 2, 2, 2, 597, 601, 5, 44,
	23, 2, 598, 600, 7, 91, 2, 2, 599, 598, 3, 2, 2, 2, 600, 603, 3, 2, 2,
	2, 601, 599, 3, 2, 2, 2, 601, 602, 3, 2, 2, 2, 602, 604, 3, 2, 2, 2, 603,
	601, 3, 2, 2, 2, 604, 605, 7, 43, 2, 2, 605, 43, 3, 2, 2, 2, 606, 618,
	5, 46, 24, 2, 607, 611, 5, 368, 185, 2, 608, 610, 7, 91, 2, 2, 609, 608,
	3, 2, 2, 2, 610, 613, 3, 2, 2, 2, 611, 609, 3, 2, 2, 2, 611, 612, 3, 2,
	2, 2, 612, 614, 3, 2, 2, 2, 613, 611, 3, 2, 2, 2, 614, 615, 5, 46, 24,
	2, 615, 617, 3, 2, 2, 2, 616, 607, 3, 2, 2, 2, 617, 620, 3, 2, 2, 2, 618,
	616, 3, 2, 2, 2, 618, 619, 3, 2, 2, 2, 619, 622, 3, 2, 2, 2, 620, 618,
	3, 2, 2, 2, 621, 623, 5, 368, 185, 2, 622, 621, 3, 2, 2, 2, 622, 623, 3,
	2, 2, 2, 623, 45, 3, 2, 2, 2, 624, 632, 5, 286, 144, 2, 625, 626, 5, 286,
	144, 2, 626, 627, 7, 67, 2, 2, 627, 632, 3, 2, 2, 2, 628, 629, 5, 286,
	144, 2, 629, 630, 5, 280, 141, 2, 630, 632, 3, 2, 2, 2, 631, 624, 3, 2,
	2, 2, 631, 625, 3, 2, 2, 2, 631, 628, 3, 2, 2, 2, 632, 47, 3, 2, 2, 2,
	633, 637, 7, 42, 2, 2, 634, 636, 7, 91, 2, 2, 635, 634, 3, 2, 2, 2, 636,
	639, 3, 2, 2, 2, 637, 635, 3, 2, 2, 2, 637, 638, 3, 2, 2, 2, 638, 640,
	3, 2, 2, 2, 639, 637, 3, 2, 2, 2, 640, 644, 5, 50, 26, 2, 641, 643, 7,
	91, 2, 2, 642, 641, 3, 2, 2, 2, 643, 646, 3, 2, 2, 2, 644, 642, 3, 2, 2,
	2, 644, 645, 3, 2, 2, 2, 645, 647, 3, 2, 2, 2, 646, 644, 3, 2, 2, 2, 647,
	648, 7, 43, 2, 2, 648, 49, 3, 2, 2, 2, 649, 661, 5, 52, 27, 2, 650, 654,
	5, 364, 183, 2, 651, 653, 7, 91, 2, 2, 652, 651, 3, 2, 2, 2, 653, 656,
	3, 2, 2, 2, 654, 652, 3, 2, 2, 2, 654, 655, 3, 2, 2, 2, 655, 657, 3, 2,
	2, 2, 656, 654, 3, 2, 2, 2, 657, 658, 5, 52, 27, 2, 658, 660, 3, 2, 2,
	2, 659, 650, 3, 2, 2, 2, 660, 663, 3, 2, 2, 2, 661, 659, 3, 2, 2, 2, 661,
	662, 3, 2, 2, 2, 662, 51, 3, 2, 2, 2, 663, 661, 3, 2, 2, 2, 664, 666, 5,
	274, 138, 2, 665, 667, 5, 182, 92, 2, 666, 665, 3, 2, 2, 2, 666, 667, 3,
	2, 2, 2, 667, 53, 3, 2, 2, 2, 668, 670, 5, 318, 160, 2, 669, 668, 3, 2,
	2, 2, 669, 670, 3, 2, 2, 2, 670, 674, 3, 2, 2, 2, 671, 672, 5, 182, 92,
	2, 672, 673, 7, 91, 2, 2, 673, 675, 3, 2, 2, 2, 674, 671, 3, 2, 2, 2, 674,
	675, 3, 2, 2, 2, 675, 686, 3, 2, 2, 2, 676, 687, 5, 58, 30, 2, 677, 687,
	5, 64, 33, 2, 678, 687, 5, 86, 44, 2, 679, 687, 5, 94, 48, 2, 680, 687,
	5, 96, 49, 2, 681, 687, 5, 102, 52, 2, 682, 687, 5, 120, 61, 2, 683, 687,
	5, 130, 66, 2, 684, 687, 5, 144, 73, 2, 685, 687, 5, 156, 79, 2, 686, 676,
	3, 2, 2, 2, 686, 677, 3, 2, 2, 2, 686, 678, 3, 2, 2, 2, 686, 679, 3, 2,
	2, 2, 686, 680, 3, 2, 2, 2, 686, 681, 3, 2, 2, 2, 686, 682, 3, 2, 2, 2,
	686, 683, 3, 2, 2, 2, 686, 684, 3, 2, 2, 2, 686, 685, 3, 2, 2, 2, 687,
	55, 3, 2, 2, 2, 688, 696, 7, 33, 2, 2, 689, 691, 7, 91, 2, 2, 690, 689,
	3, 2, 2, 2, 691, 694, 3, 2, 2, 2, 692, 690, 3, 2, 2, 2, 692, 693, 3, 2,
	2, 2, 693, 695, 3, 2, 2, 2, 694, 692, 3, 2, 2, 2, 695, 697, 5, 8, 5, 2,
	696, 692, 3, 2, 2, 2, 696, 697, 3, 2, 2, 2, 697, 701, 3, 2, 2, 2, 698,
	700, 7, 91, 2, 2, 699, 698, 3, 2, 2, 2, 700, 703, 3, 2, 2, 2, 701, 699,
	3, 2, 2, 2, 701, 702, 3, 2, 2, 2, 702, 704, 3, 2, 2, 2, 703, 701, 3, 2,
	2, 2, 704, 705, 7, 36, 2, 2, 705, 57, 3, 2, 2, 2, 706, 707, 7, 23, 2, 2,
	707, 715, 5, 60, 31, 2, 708, 710, 7, 91, 2, 2, 709, 708, 3, 2, 2, 2, 710,
	713, 3, 2, 2, 2, 711, 709, 3, 2, 2, 2, 711, 712, 3, 2, 2, 2, 712, 714,
	3, 2, 2, 2, 713, 711, 3, 2, 2, 2, 714, 716, 5, 222, 112, 2, 715, 711, 3,
	2, 2, 2, 715, 716, 3, 2, 2, 2, 716, 59, 3, 2, 2, 2, 717, 722, 5, 62, 32,
	2, 718, 719, 7, 32, 2, 2, 719, 721, 5, 62, 32, 2, 720, 718, 3, 2, 2, 2,
	721, 724, 3, 2, 2, 2, 722, 720, 3, 2, 2, 2, 722, 723, 3, 2, 2, 2, 723,
	61, 3, 2, 2, 2, 724, 722, 3, 2, 2, 2, 725, 726, 7, 76, 2, 2, 726, 63, 3,
	2, 2, 2, 727, 728, 7, 15, 2, 2, 728, 733, 5, 66, 34, 2, 729, 734, 5, 70,
	36, 2, 730, 734, 5, 72, 37, 2, 731, 734, 5, 74, 38, 2, 732, 734, 5, 78,
	40, 2, 733, 729, 3, 2, 2, 2, 733, 730, 3, 2, 2, 2, 733, 731, 3, 2, 2, 2,
	733, 732, 3, 2, 2, 2, 733, 734, 3, 2, 2, 2, 734, 65, 3, 2, 2, 2, 735, 740,
	5, 68, 35, 2, 736, 737, 7, 32, 2, 2, 737, 739, 5, 68, 35, 2, 738, 736,
	3, 2, 2, 2, 739, 742, 3, 2, 2, 2, 740, 738, 3, 2, 2, 2, 740, 741, 3, 2,
	2, 2, 741, 67, 3, 2, 2, 2, 742, 740, 3, 2, 2, 2, 743, 744, 5, 306, 154,
	2, 744, 69, 3, 2, 2, 2, 745, 746, 7, 32, 2, 2, 746, 747, 7, 53, 2, 2, 747,
	71, 3, 2, 2, 2, 748, 749, 7, 4, 2, 2, 749, 750, 5, 306, 154, 2, 750, 73,
	3, 2, 2, 2, 751, 752, 7, 32, 2, 2, 752, 754, 5, 286, 144, 2, 753, 755,
	5, 76, 39, 2, 754, 753, 3, 2, 2, 2, 754, 755, 3, 2, 2, 2, 755, 75, 3, 2,
	2, 2, 756, 757, 7, 4, 2, 2, 757, 758, 5, 286, 144, 2, 758, 77, 3, 2, 2,
	2, 759, 760, 7, 32, 2, 2, 760, 764, 7, 33, 2, 2, 761, 763, 7, 91, 2, 2,
	762, 761, 3, 2, 2, 2, 763, 766, 3, 2, 2, 2, 764, 762, 3, 2, 2, 2, 764,
	765, 3, 2, 2, 2, 765, 767, 3, 2, 2, 2, 766, 764, 3, 2, 2, 2, 767, 771,
	5, 80, 41, 2, 768, 770, 7, 91, 2, 2, 769, 768, 3, 2, 2, 2, 770, 773, 3,
	2, 2, 2, 771, 769, 3, 2, 2, 2, 771, 772, 3, 2, 2, 2, 772, 774, 3, 2, 2,
	2, 773, 771, 3, 2, 2, 2, 774, 775, 7, 36, 2, 2, 775, 79, 3, 2, 2, 2, 776,
	779, 5, 82, 42, 2, 777, 779, 5, 84, 43, 2, 778, 776, 3, 2, 2, 2, 778, 777,
	3, 2, 2, 2, 779, 793, 3, 2, 2, 2, 780, 784, 5, 364, 183, 2, 781, 783, 7,
	91, 2, 2, 782, 781, 3, 2, 2, 2, 783, 786, 3, 2, 2, 2, 784, 782, 3, 2, 2,
	2, 784, 785, 3, 2, 2, 2, 785, 789, 3, 2, 2, 2, 786, 784, 3, 2, 2, 2, 787,
	790, 5, 82, 42, 2, 788, 790, 5, 84, 43, 2, 789, 787, 3, 2, 2, 2, 789, 788,
	3, 2, 2, 2, 790, 792, 3, 2, 2, 2, 791, 780, 3, 2, 2, 2, 792, 795, 3, 2,
	2, 2, 793, 791, 3, 2, 2, 2, 793, 794, 3, 2, 2, 2, 794, 797, 3, 2, 2, 2,
	795, 793, 3, 2, 2, 2, 796, 798, 5, 364, 183, 2, 797, 796, 3, 2, 2, 2, 797,
	798, 3, 2, 2, 2, 798, 81, 3, 2, 2, 2, 799, 801, 5, 306, 154, 2, 800, 802,
	5, 72, 37, 2, 801, 800, 3, 2, 2, 2, 801, 802, 3, 2, 2, 2, 802, 83, 3, 2,
	2, 2, 803, 805, 5, 286, 144, 2, 804, 806, 5, 76, 39, 2, 805, 804, 3, 2,
	2, 2, 805, 806, 3, 2, 2, 2, 806, 85, 3, 2, 2, 2, 807, 808, 7, 7, 2, 2,
	808, 809, 5, 88, 45, 2, 809, 87, 3, 2, 2, 2, 810, 815, 5, 90, 46, 2, 811,
	812, 7, 39, 2, 2, 812, 814, 5, 90, 46, 2, 813, 811, 3, 2, 2, 2, 814, 817,
	3, 2, 2, 2, 815, 813, 3, 2, 2, 2, 815, 816, 3, 2, 2, 2, 816, 842, 3, 2,
	2, 2, 817, 815, 3, 2, 2, 2, 818, 822, 7, 33, 2, 2, 819, 821, 7, 91, 2,
	2, 820, 819, 3, 2, 2, 2, 821, 824, 3, 2, 2, 2, 822, 820, 3, 2, 2, 2, 822,
	823, 3, 2, 2, 2, 823, 825, 3, 2, 2, 2, 824, 822, 3, 2, 2, 2, 825, 830,
	5, 90, 46, 2, 826, 827, 7, 39, 2, 2, 827, 829, 5, 90, 46, 2, 828, 826,
	3, 2, 2, 2, 829, 832, 3, 2, 2, 2, 830, 828, 3, 2, 2, 2, 830, 831, 3, 2,
	2, 2, 831, 836, 3, 2, 2, 2, 832, 830, 3, 2, 2, 2, 833, 835, 7, 91, 2, 2,
	834, 833, 3, 2, 2, 2, 835, 838, 3, 2, 2, 2, 836, 834, 3, 2, 2, 2, 836,
	837, 3, 2, 2, 2, 837, 839, 3, 2, 2, 2, 838, 836, 3, 2, 2, 2, 839, 840,
	7, 36, 2, 2, 840, 842, 3, 2, 2, 2, 841, 810, 3, 2, 2, 2, 841, 818, 3, 2,
	2, 2, 842, 89, 3, 2, 2, 2, 843, 845, 5, 158, 80, 2, 844, 846, 5, 92, 47,
	2, 845, 844, 3, 2, 2, 2, 845, 846, 3, 2, 2, 2, 846, 91, 3, 2, 2, 2, 847,
	851, 5, 322, 162, 2, 848, 850, 7, 91, 2, 2, 849, 848, 3, 2, 2, 2, 850,
	853, 3, 2, 2, 2, 851, 849, 3, 2, 2, 2, 851, 852, 3, 2, 2, 2, 852, 854,
	3, 2, 2, 2, 853, 851, 3, 2, 2, 2, 854, 855, 5, 184, 93, 2, 855, 93, 3,
	2, 2, 2, 856, 857, 7, 29, 2, 2, 857, 863, 5, 88, 45, 2, 858, 859, 5, 162,
	82, 2, 859, 860, 7, 62, 2, 2, 860, 861, 5, 184, 93, 2, 861, 863, 3, 2,
	2, 2, 862, 856, 3, 2, 2, 2, 862, 858, 3, 2, 2, 2, 863, 95, 3, 2, 2, 2,
	864, 865, 7, 28, 2, 2, 865, 867, 5, 98, 50, 2, 866, 868, 5, 42, 22, 2,
	867, 866, 3, 2, 2, 2, 867, 868, 3, 2, 2, 2, 868, 872, 3, 2, 2, 2, 869,
	871, 7, 91, 2, 2, 870, 869, 3, 2, 2, 2, 871, 874, 3, 2, 2, 2, 872, 870,
	3, 2, 2, 2, 872, 873, 3, 2, 2, 2, 873, 875, 3, 2, 2, 2, 874, 872, 3, 2,
	2, 2, 875, 876, 5, 100, 51, 2, 876, 97, 3, 2, 2, 2, 877, 878, 5, 286, 144,
	2, 878, 99, 3, 2, 2, 2, 879, 883, 5, 322, 162, 2, 880, 882, 7, 91, 2, 2,
	881, 880, 3, 2, 2, 2, 882, 885, 3, 2, 2, 2, 883, 881, 3, 2, 2, 2, 883,
	884, 3, 2, 2, 2, 884, 886, 3, 2, 2, 2, 885, 883, 3, 2, 2, 2, 886, 888,
	5, 274, 138, 2, 887, 889, 5, 182, 92, 2, 888, 887, 3, 2, 2, 2, 888, 889,
	3, 2, 2, 2, 889, 101, 3, 2, 2, 2, 890, 891, 5, 104, 53, 2, 891, 893, 5,
	106, 54, 2, 892, 894, 5, 42, 22, 2, 893, 892, 3, 2, 2, 2, 893, 894, 3,
	2, 2, 2, 894, 895, 3, 2, 2, 2, 895, 903, 5, 108, 55, 2, 896, 898, 7, 91,
	2, 2, 897, 896, 3, 2, 2, 2, 898, 901, 3, 2, 2, 2, 899, 897, 3, 2, 2, 2,
	899, 900, 3, 2, 2, 2, 900, 902, 3, 2, 2, 2, 901, 899, 3, 2, 2, 2, 902,
	904, 5, 112, 57, 2, 903, 899, 3, 2, 2, 2, 903, 904, 3, 2, 2, 2, 904, 103,
	3, 2, 2, 2, 905, 906, 7, 13, 2, 2, 906, 105, 3, 2, 2, 2, 907, 910, 5, 306,
	154, 2, 908, 910, 5, 338, 170, 2, 909, 907, 3, 2, 2, 2, 909, 908, 3, 2,
	2, 2, 910, 107, 3, 2, 2, 2, 911, 913, 5, 114, 58, 2, 912, 914, 5, 320,
	161, 2, 913, 912, 3, 2, 2, 2, 913, 914, 3, 2, 2, 2, 914, 922, 3, 2, 2,
	2, 915, 917, 7, 91, 2, 2, 916, 915, 3, 2, 2, 2, 917, 920, 3, 2, 2, 2, 918,
	916, 3, 2, 2, 2, 918, 919, 3, 2, 2, 2, 919, 921, 3, 2, 2, 2, 920, 918,
	3, 2, 2, 2, 921, 923, 5, 110, 56, 2, 922, 918, 3, 2, 2, 2, 922, 923, 3,
	2, 2, 2, 923, 109, 3, 2, 2, 2, 924, 928, 5, 326, 164, 2, 925, 926, 5, 308,
	155, 2, 926, 927, 7, 40, 2, 2, 927, 929, 3, 2, 2, 2, 928, 925, 3, 2, 2,
	2, 928, 929, 3, 2, 2, 2, 929, 930, 3, 2, 2, 2, 930, 932, 5, 274, 138, 2,
	931, 933, 5, 182, 92, 2, 932, 931, 3, 2, 2, 2, 932, 933, 3, 2, 2, 2, 933,
	941, 3, 2, 2, 2, 934, 936, 7, 91, 2, 2, 935, 934, 3, 2, 2, 2, 936, 939,
	3, 2, 2, 2, 937, 935, 3, 2, 2, 2, 937, 938, 3, 2, 2, 2, 938, 940, 3, 2,
	2, 2, 939, 937, 3, 2, 2, 2, 940, 942, 5, 320, 161, 2, 941, 937, 3, 2, 2,
	2, 941, 942, 3, 2, 2, 2, 942, 111, 3, 2, 2, 2, 943, 945, 7, 33, 2, 2, 944,
	946, 5, 320, 161, 2, 945, 944, 3, 2, 2, 2, 945, 946, 3, 2, 2, 2, 946, 954,
	3, 2, 2, 2, 947, 949, 7, 91, 2, 2, 948, 947, 3, 2, 2, 2, 949, 952, 3, 2,
	2, 2, 950, 948, 3, 2, 2, 2, 950, 951, 3, 2, 2, 2, 951, 953, 3, 2, 2, 2,
	952, 950, 3, 2, 2, 2, 953, 955, 5, 8, 5, 2, 954, 950, 3, 2, 2, 2, 954,
	955, 3, 2, 2, 2, 955, 959, 3, 2, 2, 2, 956, 958, 7, 91, 2, 2, 957, 956,
	3, 2, 2, 2, 958, 961, 3, 2, 2, 2, 959, 957, 3, 2, 2, 2, 959, 960, 3, 2,
	2, 2, 960, 962, 3, 2, 2, 2, 961, 959, 3, 2, 2, 2, 962, 963, 7, 36, 2, 2,
	963, 113, 3, 2, 2, 2, 964, 965, 7, 34, 2, 2, 965, 983, 7, 37, 2, 2, 966,
	970, 7, 34, 2, 2, 967, 969, 7, 91, 2, 2, 968, 967, 3, 2, 2, 2, 969, 972,
	3, 2, 2, 2, 970, 968, 3, 2, 2, 2, 970, 971, 3, 2, 2, 2, 971, 973, 3, 2,
	2, 2, 972, 970, 3, 2, 2, 2, 973, 977, 5, 116, 59, 2, 974, 976, 7, 91, 2,
	2, 975, 974, 3, 2, 2, 2, 976, 979, 3, 2, 2, 2, 977, 975, 3, 2, 2, 2, 977,
	978, 3, 2, 2, 2, 978, 980, 3, 2, 2, 2, 979, 977, 3, 2, 2, 2, 980, 981,
	7, 37, 2, 2, 981, 983, 3, 2, 2, 2, 982, 964, 3, 2, 2, 2, 982, 966, 3, 2,
	2, 2, 983, 115, 3, 2, 2, 2, 984, 996, 5, 118, 60, 2, 985, 989, 5, 368,
	185, 2, 986, 988, 7, 91, 2, 2, 987, 986, 3, 2, 2, 2, 988, 991, 3, 2, 2,
	2, 989, 987, 3, 2, 2, 2, 989, 990, 3, 2, 2, 2, 990, 992, 3, 2, 2, 2, 991,
	989, 3, 2, 2, 2, 992, 993, 5, 118, 60, 2, 993, 995, 3, 2, 2, 2, 994, 985,
	3, 2, 2, 2, 995, 998, 3, 2, 2, 2, 996, 994, 3, 2, 2, 2, 996, 997, 3, 2,
	2, 2, 997, 1000, 3, 2, 2, 2, 998, 996, 3, 2, 2, 2, 999, 1001, 5, 368, 185,
	2, 1000, 999, 3, 2, 2, 2, 1000, 1001, 3, 2, 2, 2, 1001, 117, 3, 2, 2, 2,
	1002, 1003, 5, 308, 155, 2, 1003, 1011, 5, 280, 141, 2, 1004, 1006, 7,
	91, 2, 2, 1005, 1004, 3, 2, 2, 2, 1006, 1009, 3, 2, 2, 2, 1007, 1005, 3,
	2, 2, 2, 1007, 1008, 3, 2, 2, 2, 1008, 1010, 3, 2, 2, 2, 1009, 1007, 3,
	2, 2, 2, 1010, 1012, 5, 92, 47, 2, 1011, 1007, 3, 2, 2, 2, 1011, 1012,
	3, 2, 2, 2, 1012, 1021, 3, 2, 2, 2, 1013, 1014, 5, 308, 155, 2, 1014, 1015,
	7, 40, 2, 2, 1015, 1016, 5, 274, 138, 2, 1016, 1018, 7, 67, 2, 2, 1017,
	1019, 5, 182, 92, 2, 1018, 1017, 3, 2, 2, 2, 1018, 1019, 3, 2, 2, 2, 1019,
	1021, 3, 2, 2, 2, 1020, 1002, 3, 2, 2, 2, 1020, 1013, 3, 2, 2, 2, 1021,
	119, 3, 2, 2, 2, 1022, 1023, 7, 10, 2, 2, 1023, 1025, 5, 124, 63, 2, 1024,
	1026, 5, 42, 22, 2, 1025, 1024, 3, 2, 2, 2, 1025, 1026, 3, 2, 2, 2, 1026,
	1034, 3, 2, 2, 2, 1027, 1029, 7, 91, 2, 2, 1028, 1027, 3, 2, 2, 2, 1029,
	1032, 3, 2, 2, 2, 1030, 1028, 3, 2, 2, 2, 1030, 1031, 3, 2, 2, 2, 1031,
	1033, 3, 2, 2, 2, 1032, 1030, 3, 2, 2, 2, 1033, 1035, 5, 300, 151, 2, 1034,
	1030, 3, 2, 2, 2, 1034, 1035, 3, 2, 2, 2, 1035, 1039, 3, 2, 2, 2, 1036,
	1038, 7, 91, 2, 2, 1037, 1036, 3, 2, 2, 2, 1038, 1041, 3, 2, 2, 2, 1039,
	1037, 3, 2, 2, 2, 1039, 1040, 3, 2, 2, 2, 1040, 1042, 3, 2, 2, 2, 1041,
	1039, 3, 2, 2, 2, 1042, 1043, 5, 122, 62, 2, 1043, 121, 3, 2, 2, 2, 1044,
	1046, 7, 33, 2, 2, 1045, 1047, 5, 320, 161, 2, 1046, 1045, 3, 2, 2, 2,
	1046, 1047, 3, 2, 2, 2, 1047, 1055, 3, 2, 2, 2, 1048, 1050, 7, 91, 2, 2,
	1049, 1048, 3, 2, 2, 2, 1050, 1053, 3, 2, 2, 2, 1051, 1049, 3, 2, 2, 2,
	1051, 1052, 3, 2, 2, 2, 1052, 1054, 3, 2, 2, 2, 1053, 1051, 3, 2, 2, 2,
	1054, 1056, 5, 126, 64, 2, 1055, 1051, 3, 2, 2, 2, 1055, 1056, 3, 2, 2,
	2, 1056, 1060, 3, 2, 2, 2, 1057, 1059, 7, 91, 2, 2, 1058, 1057, 3, 2, 2,
	2, 1059, 1062, 3, 2, 2, 2, 1060, 1058, 3, 2, 2, 2, 1060, 1061, 3, 2, 2,
	2, 1061, 1063, 3, 2, 2, 2, 1062, 1060, 3, 2, 2, 2, 1063, 1064, 7, 36, 2,
	2, 1064, 123, 3, 2, 2, 2, 1065, 1066, 5, 286, 144, 2, 1066, 125, 3, 2,
	2, 2, 1067, 1079, 5, 128, 65, 2, 1068, 1072, 5, 368, 185, 2, 1069, 1071,
	7, 91, 2, 2, 1070, 1069, 3, 2, 2, 2, 1071, 1074, 3, 2, 2, 2, 1072, 1070,
	3, 2, 2, 2, 1072, 1073, 3, 2, 2, 2, 1073, 1075, 3, 2, 2, 2, 1074, 1072,
	3, 2, 2, 2, 1075, 1076, 5, 128, 65, 2, 1076, 1078, 3, 2, 2, 2, 1077, 1068,
	3, 2, 2, 2, 1078, 1081, 3, 2, 2, 2, 1079, 1077, 3, 2, 2, 2, 1079, 1080,
	3, 2, 2, 2, 1080, 1083, 3, 2, 2, 2, 1081, 1079, 3, 2, 2, 2, 1082, 1084,
	5, 368, 185, 2, 1083, 1082, 3, 2, 2, 2, 1083, 1084, 3, 2, 2, 2, 1084, 127,
	3, 2, 2, 2, 1085, 1087, 5, 318, 160, 2, 1086, 1085, 3, 2, 2, 2, 1086, 1087,
	3, 2, 2, 2, 1087, 1091, 3, 2, 2, 2, 1088, 1089, 5, 182, 92, 2, 1089, 1090,
	7, 91, 2, 2, 1090, 1092, 3, 2, 2, 2, 1091, 1088, 3, 2, 2, 2, 1091, 1092,
	3, 2, 2, 2, 1092, 1093, 3, 2, 2, 2, 1093, 1095, 5, 306, 154, 2, 1094, 1096,
	5, 182, 92, 2, 1095, 1094, 3, 2, 2, 2, 1095, 1096, 3, 2, 2, 2, 1096, 1104,
	3, 2, 2, 2, 1097, 1099, 7, 91, 2, 2, 1098, 1097, 3, 2, 2, 2, 1099, 1102,
	3, 2, 2, 2, 1100, 1098, 3, 2, 2, 2, 1100, 1101, 3, 2, 2, 2, 1101, 1103,
	3, 2, 2, 2, 1102, 1100, 3, 2, 2, 2, 1103, 1105, 5, 92, 47, 2, 1104, 1100,
	3, 2, 2, 2, 1104, 1105, 3, 2, 2, 2, 1105, 129, 3, 2, 2, 2, 1106, 1107,
	7, 28, 2, 2, 1107, 1109, 5, 132, 67, 2, 1108, 1110, 5, 42, 22, 2, 1109,
	1108, 3, 2, 2, 2, 1109, 1110, 3, 2, 2, 2, 1110, 1111, 3, 2, 2, 2, 1111,
	1112, 5, 134, 68, 2, 1112, 131, 3, 2, 2, 2, 1113, 1114, 5, 286, 144, 2,
	1114, 133, 3, 2, 2, 2, 1115, 1117, 7, 91, 2, 2, 1116, 1115, 3, 2, 2, 2,
	1117, 1120, 3, 2, 2, 2, 1118, 1116, 3, 2, 2, 2, 1118, 1119, 3, 2, 2, 2,
	1119, 1121, 3, 2, 2, 2, 1120, 1118, 3, 2, 2, 2, 1121, 1123, 5, 300, 151,
	2, 1122, 1118, 3, 2, 2, 2, 1122, 1123, 3, 2, 2, 2, 1123, 1131, 3, 2, 2,
	2, 1124, 1126, 7, 91, 2, 2, 1125, 1124, 3, 2, 2, 2, 1126, 1129, 3, 2, 2,
	2, 1127, 1125, 3, 2, 2, 2, 1127, 1128, 3, 2, 2, 2, 1128, 1130, 3, 2, 2,
	2, 1129, 1127, 3, 2, 2, 2, 1130, 1132, 5, 136, 69, 2, 1131, 1127, 3, 2,
	2, 2, 1131, 1132, 3, 2, 2, 2, 1132, 135, 3, 2, 2, 2, 1133, 1135, 7, 33,
	2, 2, 1134, 1136, 5, 320, 161, 2, 1135, 1134, 3, 2, 2, 2, 1135, 1136, 3,
	2, 2, 2, 1136, 1144, 3, 2, 2, 2, 1137, 1139, 7, 91, 2, 2, 1138, 1137, 3,
	2, 2, 2, 1139, 1142, 3, 2, 2, 2, 1140, 1138, 3, 2, 2, 2, 1140, 1141, 3,
	2, 2, 2, 1141, 1143, 3, 2, 2, 2, 1142, 1140, 3, 2, 2, 2, 1143, 1145, 5,
	138, 70, 2, 1144, 1140, 3, 2, 2, 2, 1144, 1145, 3, 2, 2, 2, 1145, 1149,
	3, 2, 2, 2, 1146, 1148, 7, 91, 2, 2, 1147, 1146, 3, 2, 2, 2, 1148, 1151,
	3, 2, 2, 2, 1149, 1147, 3, 2, 2, 2, 1149, 1150, 3, 2, 2, 2, 1150, 1152,
	3, 2, 2, 2, 1151, 1149, 3, 2, 2, 2, 1152, 1153, 7, 36, 2, 2, 1153, 137,
	3, 2, 2, 2, 1154, 1166, 5, 140, 71, 2, 1155, 1159, 5, 366, 184, 2, 1156,
	1158, 7, 91, 2, 2, 1157, 1156, 3, 2, 2, 2, 1158, 1161, 3, 2, 2, 2, 1159,
	1157, 3, 2, 2, 2, 1159, 1160, 3, 2, 2, 2, 1160, 1162, 3, 2, 2, 2, 1161,
	1159, 3, 2, 2, 2, 1162, 1163, 5, 140, 71, 2, 1163, 1165, 3, 2, 2, 2, 1164,
	1155, 3, 2, 2, 2, 1165, 1168, 3, 2, 2, 2, 1166, 1164, 3, 2, 2, 2, 1166,
	1167, 3, 2, 2, 2, 1167, 1170, 3, 2, 2, 2, 1168, 1166, 3, 2, 2, 2, 1169,
	1171, 5, 366, 184, 2, 1170, 1169, 3, 2, 2, 2, 1170, 1171, 3, 2, 2, 2, 1171,
	139, 3, 2, 2, 2, 1172, 1174, 5, 318, 160, 2, 1173, 1172, 3, 2, 2, 2, 1173,
	1174, 3, 2, 2, 2, 1174, 1178, 3, 2, 2, 2, 1175, 1176, 5, 182, 92, 2, 1176,
	1177, 7, 91, 2, 2, 1177, 1179, 3, 2, 2, 2, 1178, 1175, 3, 2, 2, 2, 1178,
	1179, 3, 2, 2, 2, 1179, 1185, 3, 2, 2, 2, 1180, 1186, 5, 130, 66, 2, 1181,
	1186, 5, 120, 61, 2, 1182, 1186, 5, 86, 44, 2, 1183, 1186, 5, 96, 49, 2,
	1184, 1186, 5, 142, 72, 2, 1185, 1180, 3, 2, 2, 2, 1185, 1181, 3, 2, 2,
	2, 1185, 1182, 3, 2, 2, 2, 1185, 1183, 3, 2, 2, 2, 1185, 1184, 3, 2, 2,
	2, 1186, 141, 3, 2, 2, 2, 1187, 1188, 5, 306, 154, 2, 1188, 1196, 5, 280,
	141, 2, 1189, 1191, 7, 91, 2, 2, 1190, 1189, 3, 2, 2, 2, 1191, 1194, 3,
	2, 2, 2, 1192, 1190, 3, 2, 2, 2, 1192, 1193, 3, 2, 2, 2, 1193, 1195, 3,
	2, 2, 2, 1194, 1192, 3, 2, 2, 2, 1195, 1197, 5, 92, 47, 2, 1196, 1192,
	3, 2, 2, 2, 1196, 1197, 3, 2, 2, 2, 1197, 143, 3, 2, 2, 2, 1198, 1199,
	7, 17, 2, 2, 1199, 1201, 5, 146, 74, 2, 1200, 1202, 5, 42, 22, 2, 1201,
	1200, 3, 2, 2, 2, 1201, 1202, 3, 2, 2, 2, 1202, 1210, 3, 2, 2, 2, 1203,
	1205, 7, 91, 2, 2, 1204, 1203, 3, 2, 2, 2, 1205, 1208, 3, 2, 2, 2, 1206,
	1204, 3, 2, 2, 2, 1206, 1207, 3, 2, 2, 2, 1207, 1209, 3, 2, 2, 2, 1208,
	1206, 3, 2, 2, 2, 1209, 1211, 5, 300, 151, 2, 1210, 1206, 3, 2, 2, 2, 1210,
	1211, 3, 2, 2, 2, 1211, 1215, 3, 2, 2, 2, 1212, 1214, 7, 91, 2, 2, 1213,
	1212, 3, 2, 2, 2, 1214, 1217, 3, 2, 2, 2, 1215, 1213, 3, 2, 2, 2, 1215,
	1216, 3, 2, 2, 2, 1216, 1218, 3, 2, 2, 2, 1217, 1215, 3, 2, 2, 2, 1218,
	1219, 5, 148, 75, 2, 1219, 145, 3, 2, 2, 2, 1220, 1221, 5, 286, 144, 2,
	1221, 147, 3, 2, 2, 2, 1222, 1224, 7, 33, 2, 2, 1223, 1225, 5, 320, 161,
	2, 1224, 1223, 3, 2, 2, 2, 1224, 1225, 3, 2, 2, 2, 1225, 1233, 3, 2, 2,
	2, 1226, 1228, 7, 91, 2, 2, 1227, 1226, 3, 2, 2, 2, 1228, 1231, 3, 2, 2,
	2, 1229, 1227, 3, 2, 2, 2, 1229, 1230, 3, 2, 2, 2, 1230, 1232, 3, 2, 2,
	2, 1231, 1229, 3, 2, 2, 2, 1232, 1234, 5, 150, 76, 2, 1233, 1229, 3, 2,
	2, 2, 1233, 1234, 3, 2, 2, 2, 1234, 1238, 3, 2, 2, 2, 1235, 1237, 7, 91,
	2, 2, 1236, 1235, 3, 2, 2, 2, 1237, 1240, 3, 2, 2, 2, 1238, 1236, 3, 2,
	2, 2, 1238, 1239, 3, 2, 2, 2, 1239, 1241, 3, 2, 2, 2, 1240, 1238, 3, 2,
	2, 2, 1241, 1242, 7, 36, 2, 2, 1242, 149, 3, 2, 2, 2, 1243, 1255, 5, 152,
	77, 2, 1244, 1248, 5, 366, 184, 2, 1245, 1247, 7, 91, 2, 2, 1246, 1245,
	3, 2, 2, 2, 1247, 1250, 3, 2, 2, 2, 1248, 1246, 3, 2, 2, 2, 1248, 1249,
	3, 2, 2, 2, 1249, 1251, 3, 2, 2, 2, 1250, 1248, 3, 2, 2, 2, 1251, 1252,
	5, 152, 77, 2, 1252, 1254, 3, 2, 2, 2, 1253, 1244, 3, 2, 2, 2, 1254, 1257,
	3, 2, 2, 2, 1255, 1253, 3, 2, 2, 2, 1255, 1256, 3, 2, 2, 2, 1256, 1259,
	3, 2, 2, 2, 1257, 1255, 3, 2, 2, 2, 1258, 1260, 5, 366, 184, 2, 1259, 1258,
	3, 2, 2, 2, 1259, 1260, 3, 2, 2, 2, 1260, 151, 3, 2, 2, 2, 1261, 1263,
	5, 318, 160, 2, 1262, 1261, 3, 2, 2, 2, 1262, 1263, 3, 2, 2, 2, 1263, 1267,
	3, 2, 2, 2, 1264, 1265, 5, 182, 92, 2, 1265, 1266, 7, 91, 2, 2, 1266, 1268,
	3, 2, 2, 2, 1267, 1264, 3, 2, 2, 2, 1267, 1268, 3, 2, 2, 2, 1268, 1271,
	3, 2, 2, 2, 1269, 1272, 5, 96, 49, 2, 1270, 1272, 5, 154, 78, 2, 1271,
	1269, 3, 2, 2, 2, 1271, 1270, 3, 2, 2, 2, 1272, 153, 3, 2, 2, 2, 1273,
	1275, 5, 106, 54, 2, 1274, 1276, 5, 42, 22, 2, 1275, 1274, 3, 2, 2, 2,
	1275, 1276, 3, 2, 2, 2, 1276, 1280, 3, 2, 2, 2, 1277, 1279, 7, 91, 2, 2,
	1278, 1277, 3, 2, 2, 2, 1279, 1282, 3, 2, 2, 2, 1280, 1278, 3, 2, 2, 2,
	1280, 1281, 3, 2, 2, 2, 1281, 1283, 3, 2, 2, 2, 1282, 1280, 3, 2, 2, 2,
	1283, 1284, 5, 108, 55, 2, 1284, 155, 3, 2, 2, 2, 1285, 1287, 5, 318, 160,
	2, 1286, 1285, 3, 2, 2, 2, 1286, 1287, 3, 2, 2, 2, 1287, 1295, 3, 2, 2,
	2, 1288, 1290, 7, 91, 2, 2, 1289, 1288, 3, 2, 2, 2, 1290, 1293, 3, 2, 2,
	2, 1291, 1289, 3, 2, 2, 2, 1291, 1292, 3, 2, 2, 2, 1292, 1294, 3, 2, 2,
	2, 1293, 1291, 3, 2, 2, 2, 1294, 1296, 5, 174, 88, 2, 1295, 1291, 3, 2,
	2, 2, 1295, 1296, 3, 2, 2, 2, 1296, 1297, 3, 2, 2, 2, 1297, 1298, 7, 5,
	2, 2, 1298, 1300, 5, 178, 90, 2, 1299, 1301, 5, 42, 22, 2, 1300, 1299,
	3, 2, 2, 2, 1300, 1301, 3, 2, 2, 2, 1301, 1304, 3, 2, 2, 2, 1302, 1305,
	5, 134, 68, 2, 1303, 1305, 5, 280, 141, 2, 1304, 1302, 3, 2, 2, 2, 1304,
	1303, 3, 2, 2, 2, 1305, 157, 3, 2, 2, 2, 1306, 1307, 8, 80, 1, 2, 1307,
	1309, 5, 160, 81, 2, 1308, 1310, 5, 280, 141, 2, 1309, 1308, 3, 2, 2, 2,
	1309, 1310, 3, 2, 2, 2, 1310, 1324, 3, 2, 2, 2, 1311, 1313, 5, 162, 82,
	2, 1312, 1314, 5, 280, 141, 2, 1313, 1312, 3, 2, 2, 2, 1313, 1314, 3, 2,
	2, 2, 1314, 1324, 3, 2, 2, 2, 1315, 1317, 5, 164, 83, 2, 1316, 1318, 5,
	280, 141, 2, 1317, 1316, 3, 2, 2, 2, 1317, 1318, 3, 2, 2, 2, 1318, 1324,
	3, 2, 2, 2, 1319, 1324, 5, 170, 86, 2, 1320, 1321, 7, 18, 2, 2, 1321, 1324,
	5, 274, 138, 2, 1322, 1324, 5, 172, 87, 2, 1323, 1306, 3, 2, 2, 2, 1323,
	1311, 3, 2, 2, 2, 1323, 1315, 3, 2, 2, 2, 1323, 1319, 3, 2, 2, 2, 1323,
	1320, 3, 2, 2, 2, 1323, 1322, 3, 2, 2, 2, 1324, 1330, 3, 2, 2, 2, 1325,
	1326, 12, 4, 2, 2, 1326, 1327, 7, 4, 2, 2, 1327, 1329, 5, 274, 138, 2,
	1328, 1325, 3, 2, 2, 2, 1329, 1332, 3, 2, 2, 2, 1330, 1328, 3, 2, 2, 2,
	1330, 1331, 3, 2, 2, 2, 1331, 159, 3, 2, 2, 2, 1332, 1330, 3, 2, 2, 2,
	1333, 1334, 7, 59, 2, 2, 1334, 161, 3, 2, 2, 2, 1335, 1336, 5, 306, 154,
	2, 1336, 163, 3, 2, 2, 2, 1337, 1339, 7, 34, 2, 2, 1338, 1340, 5, 166,
	84, 2, 1339, 1338, 3, 2, 2, 2, 1339, 1340, 3, 2, 2, 2, 1340, 1341, 3, 2,
	2, 2, 1341, 1342, 7, 37, 2, 2, 1342, 165, 3, 2, 2, 2, 1343, 1348, 5, 168,
	85, 2, 1344, 1345, 7, 39, 2, 2, 1345, 1347, 5, 168, 85, 2, 1346, 1344,
	3, 2, 2, 2, 1347, 1350, 3, 2, 2, 2, 1348, 1346, 3, 2, 2, 2, 1348, 1349,
	3, 2, 2, 2, 1349, 167, 3, 2, 2, 2, 1350, 1348, 3, 2, 2, 2, 1351, 1352,
	5, 158, 80, 2, 1352, 169, 3, 2, 2, 2, 1353, 1354, 5, 162, 82, 2, 1354,
	1355, 7, 45, 2, 2, 1355, 171, 3, 2, 2, 2, 1356, 1357, 5, 184, 93, 2, 1357,
	173, 3, 2, 2, 2, 1358, 1359, 7, 46, 2, 2, 1359, 1369, 7, 81, 2, 2, 1360,
	1361, 7, 46, 2, 2, 1361, 1363, 5, 176, 89, 2, 1362, 1364, 5, 48, 25, 2,
	1363, 1362, 3, 2, 2, 2, 1363, 1364, 3, 2, 2, 2, 1364, 1366, 3, 2, 2, 2,
	1365, 1367, 5, 180, 91, 2, 1366, 1365, 3, 2, 2, 2, 1366, 1367, 3, 2, 2,
	2, 1367, 1369, 3, 2, 2, 2, 1368, 1358, 3, 2, 2, 2, 1368, 1360, 3, 2, 2,
	2, 1369, 175, 3, 2, 2, 2, 1370, 1371, 5, 60, 31, 2, 1371, 1372, 7, 32,
	2, 2, 1372, 1374, 3, 2, 2, 2, 1373, 1370, 3, 2, 2, 2, 1373, 1374, 3, 2,
	2, 2, 1374, 1375, 3, 2, 2, 2, 1375, 1376, 5, 178, 90, 2, 1376, 177, 3,
	2, 2, 2, 1377, 1380, 7, 76, 2, 2, 1378, 1380, 5, 316, 159, 2, 1379, 1377,
	3, 2, 2, 2, 1379, 1378, 3, 2, 2, 2, 1380, 179, 3, 2, 2, 2, 1381, 1389,
	7, 34, 2, 2, 1382, 1384, 7, 91, 2, 2, 1383, 1382, 3, 2, 2, 2, 1384, 1387,
	3, 2, 2, 2, 1385, 1383, 3, 2, 2, 2, 1385, 1386, 3, 2, 2, 2, 1386, 1388,
	3, 2, 2, 2, 1387, 1385, 3, 2, 2, 2, 1388, 1390, 5, 186, 94, 2, 1389, 1385,
	3, 2, 2, 2, 1389, 1390, 3, 2, 2, 2, 1390, 1394, 3, 2, 2, 2, 1391, 1393,
	7, 91, 2, 2, 1392, 1391, 3, 2, 2, 2, 1393, 1396, 3, 2, 2, 2, 1394, 1392,
	3, 2, 2, 2, 1394, 1395, 3, 2, 2, 2, 1395, 1397, 3, 2, 2, 2, 1396, 1394,
	3, 2, 2, 2, 1397, 1398, 7, 37, 2, 2, 1398, 181, 3, 2, 2, 2, 1399, 1409,
	5, 174, 88, 2, 1400, 1402, 7, 91, 2, 2, 1401, 1400, 3, 2, 2, 2, 1402, 1405,
	3, 2, 2, 2, 1403, 1401, 3, 2, 2, 2, 1403, 1404, 3, 2, 2, 2, 1404, 1406,
	3, 2, 2, 2, 1405, 1403, 3, 2, 2, 2, 1406, 1408, 5, 174, 88, 2, 1407, 1403,
	3, 2, 2, 2, 1408, 1411, 3, 2, 2, 2, 1409, 1407, 3, 2, 2, 2, 1409, 1410,
	3, 2, 2, 2, 1410, 183, 3, 2, 2, 2, 1411, 1409, 3, 2, 2, 2, 1412, 1414,
	5, 188, 95, 2, 1413, 1415, 5, 192, 97, 2, 1414, 1413, 3, 2, 2, 2, 1414,
	1415, 3, 2, 2, 2, 1415, 185, 3, 2, 2, 2, 1416, 1428, 5, 184, 93, 2, 1417,
	1421, 5, 364, 183, 2, 1418, 1420, 7, 91, 2, 2, 1419, 1418, 3, 2, 2, 2,
	1420, 1423, 3, 2, 2, 2, 1421, 1419, 3, 2, 2, 2, 1421, 1422, 3, 2, 2, 2,
	1422, 1424, 3, 2, 2, 2, 1423, 1421, 3, 2, 2, 2, 1424, 1425, 5, 184, 93,
	2, 1425, 1427, 3, 2, 2, 2, 1426, 1417, 3, 2, 2, 2, 1427, 1430, 3, 2, 2,
	2, 1428, 1426, 3, 2, 2, 2, 1428, 1429, 3, 2, 2, 2, 1429, 1432, 3, 2, 2,
	2, 1430, 1428, 3, 2, 2, 2, 1431, 1433, 5, 364, 183, 2, 1432, 1431, 3, 2,
	2, 2, 1432, 1433, 3, 2, 2, 2, 1433, 187, 3, 2, 2, 2, 1434, 1435, 5, 334,
	168, 2, 1435, 1436, 5, 248, 125, 2, 1436, 1439, 3, 2, 2, 2, 1437, 1439,
	5, 248, 125, 2, 1438, 1434, 3, 2, 2, 2, 1438, 1437, 3, 2, 2, 2, 1439, 189,
	3, 2, 2, 2, 1440, 1441, 5, 332, 167, 2, 1441, 1442, 5, 188, 95, 2, 1442,
	1451, 3, 2, 2, 2, 1443, 1444, 5, 322, 162, 2, 1444, 1445, 5, 188, 95, 2,
	1445, 1451, 3, 2, 2, 2, 1446, 1447, 5, 194, 98, 2, 1447, 1448, 5, 188,
	95, 2, 1448, 1451, 3, 2, 2, 2, 1449, 1451, 5, 196, 99, 2, 1450, 1440, 3,
	2, 2, 2, 1450, 1443, 3, 2, 2, 2, 1450, 1446, 3, 2, 2, 2, 1450, 1449, 3,
	2, 2, 2, 1451, 191, 3, 2, 2, 2, 1452, 1454, 5, 190, 96, 2, 1453, 1452,
	3, 2, 2, 2, 1454, 1455, 3, 2, 2, 2, 1455, 1453, 3, 2, 2, 2, 1455, 1456,
	3, 2, 2, 2, 1456, 193, 3, 2, 2, 2, 1457, 1458, 7, 45, 2, 2, 1458, 1459,
	5, 184, 93, 2, 1459, 1460, 7, 40, 2, 2, 1460, 195, 3, 2, 2, 2, 1461, 1462,
	7, 18, 2, 2, 1462, 1466, 5, 274, 138, 2, 1463, 1464, 7, 4, 2, 2, 1464,
	1466, 5, 274, 138, 2, 1465, 1461, 3, 2, 2, 2, 1465, 1463, 3, 2, 2, 2, 1466,
	197, 3, 2, 2, 2, 1467, 1469, 5, 306, 154, 2, 1468, 1470, 5, 48, 25, 2,
	1469, 1468, 3, 2, 2, 2, 1469, 1470, 3, 2, 2, 2, 1470, 1485, 3, 2, 2, 2,
	1471, 1485, 5, 200, 101, 2, 1472, 1473, 5, 282, 142, 2, 1473, 1474, 7,
	32, 2, 2, 1474, 1476, 5, 306, 154, 2, 1475, 1477, 5, 48, 25, 2, 1476, 1475,
	3, 2, 2, 2, 1476, 1477, 3, 2, 2, 2, 1477, 1485, 3, 2, 2, 2, 1478, 1485,
	5, 232, 117, 2, 1479, 1485, 5, 240, 121, 2, 1480, 1485, 5, 242, 122, 2,
	1481, 1485, 5, 238, 120, 2, 1482, 1485, 5, 246, 124, 2, 1483, 1485, 5,
	230, 116, 2, 1484, 1467, 3, 2, 2, 2, 1484, 1471, 3, 2, 2, 2, 1484, 1472,
	3, 2, 2, 2, 1484, 1478, 3, 2, 2, 2, 1484, 1479, 3, 2, 2, 2, 1484, 1480,
	3, 2, 2, 2, 1484, 1481, 3, 2, 2, 2, 1484, 1482, 3, 2, 2, 2, 1484, 1483,
	3, 2, 2, 2, 1485, 199, 3, 2, 2, 2, 1486, 1494, 5, 202, 102, 2, 1487, 1494,
	5, 204, 103, 2, 1488, 1494, 5, 350, 176, 2, 1489, 1494, 5, 210, 106, 2,
	1490, 1494, 5, 216, 109, 2, 1491, 1494, 5, 222, 112, 2, 1492, 1494, 5,
	228, 115, 2, 1493, 1486, 3, 2, 2, 2, 1493, 1487, 3, 2, 2, 2, 1493, 1488,
	3, 2, 2, 2, 1493, 1489, 3, 2, 2, 2, 1493, 1490, 3, 2, 2, 2, 1493, 1491,
	3, 2, 2, 2, 1493, 1492, 3, 2, 2, 2, 1494, 201, 3, 2, 2, 2, 1495, 1496,
	5, 356, 179, 2, 1496, 1497, 5, 206, 104, 2, 1497, 203, 3, 2, 2, 2, 1498,
	1499, 5, 208, 105, 2, 1499, 1500, 5, 360, 181, 2, 1500, 205, 3, 2, 2, 2,
	1501, 1502, 9, 2, 2, 2, 1502, 207, 3, 2, 2, 2, 1503, 1504, 7, 76, 2, 2,
	1504, 209, 3, 2, 2, 2, 1505, 1513, 7, 35, 2, 2, 1506, 1508, 7, 91, 2, 2,
	1507, 1506, 3, 2, 2, 2, 1508, 1511, 3, 2, 2, 2, 1509, 1507, 3, 2, 2, 2,
	1509, 1510, 3, 2, 2, 2, 1510, 1512, 3, 2, 2, 2, 1511, 1509, 3, 2, 2, 2,
	1512, 1514, 5, 212, 107, 2, 1513, 1509, 3, 2, 2, 2, 1513, 1514, 3, 2, 2,
	2, 1514, 1518, 3, 2, 2, 2, 1515, 1517, 7, 91, 2, 2, 1516, 1515, 3, 2, 2,
	2, 1517, 1520, 3, 2, 2, 2, 1518, 1516, 3, 2, 2, 2, 1518, 1519, 3, 2, 2,
	2, 1519, 1521, 3, 2, 2, 2, 1520, 1518, 3, 2, 2, 2, 1521, 1522, 7, 38, 2,
	2, 1522, 211, 3, 2, 2, 2, 1523, 1535, 5, 214, 108, 2, 1524, 1528, 5, 364,
	183, 2, 1525, 1527, 7, 91, 2, 2, 1526, 1525, 3, 2, 2, 2, 1527, 1530, 3,
	2, 2, 2, 1528, 1526, 3, 2, 2, 2, 1528, 1529, 3, 2, 2, 2, 1529, 1531, 3,
	2, 2, 2, 1530, 1528, 3, 2, 2, 2, 1531, 1532, 5, 214, 108, 2, 1532, 1534,
	3, 2, 2, 2, 1533, 1524, 3, 2, 2, 2, 1534, 1537, 3, 2, 2, 2, 1535, 1533,
	3, 2, 2, 2, 1535, 1536, 3, 2, 2, 2, 1536, 1539, 3, 2, 2, 2, 1537, 1535,
	3, 2, 2, 2, 1538, 1540, 5, 364, 183, 2, 1539, 1538, 3, 2, 2, 2, 1539, 1540,
	3, 2, 2, 2, 1540, 213, 3, 2, 2, 2, 1541, 1542, 5, 184, 93, 2, 1542, 215,
	3, 2, 2, 2, 1543, 1551, 7, 33, 2, 2, 1544, 1546, 7, 91, 2, 2, 1545, 1544,
	3, 2, 2, 2, 1546, 1549, 3, 2, 2, 2, 1547, 1545, 3, 2, 2, 2, 1547, 1548,
	3, 2, 2, 2, 1548, 1550, 3, 2, 2, 2, 1549, 1547, 3, 2, 2, 2, 1550, 1552,
	5, 218, 110, 2, 1551, 1547, 3, 2, 2, 2, 1551, 1552, 3, 2, 2, 2, 1552, 1556,
	3, 2, 2, 2, 1553, 1555, 7, 91, 2, 2, 1554, 1553, 3, 2, 2, 2, 1555, 1558,
	3, 2, 2, 2, 1556, 1554, 3, 2, 2, 2, 1556, 1557, 3, 2, 2, 2, 1557, 1559,
	3, 2, 2, 2, 1558, 1556, 3, 2, 2, 2, 1559, 1560, 7, 36, 2, 2, 1560, 217,
	3, 2, 2, 2, 1561, 1573, 5, 220, 111, 2, 1562, 1566, 5, 364, 183, 2, 1563,
	1565, 7, 91, 2, 2, 1564, 1563, 3, 2, 2, 2, 1565, 1568, 3, 2, 2, 2, 1566,
	1564, 3, 2, 2, 2, 1566, 1567, 3, 2, 2, 2, 1567, 1569, 3, 2, 2, 2, 1568,
	1566, 3, 2, 2, 2, 1569, 1570, 5, 220, 111, 2, 1570, 1572, 3, 2, 2, 2, 1571,
	1562, 3, 2, 2, 2, 1572, 1575, 3, 2, 2, 2, 1573, 1571, 3, 2, 2, 2, 1573,
	1574, 3, 2, 2, 2, 1574, 1577, 3, 2, 2, 2, 1575, 1573, 3, 2, 2, 2, 1576,
	1578, 5, 364, 183, 2, 1577, 1576, 3, 2, 2, 2, 1577, 1578, 3, 2, 2, 2, 1578,
	219, 3, 2, 2, 2, 1579, 1582, 5, 360, 181, 2, 1580, 1582, 5, 358, 180, 2,
	1581, 1579, 3, 2, 2, 2, 1581, 1580, 3, 2, 2, 2, 1582, 1583, 3, 2, 2, 2,
	1583, 1584, 7, 40, 2, 2, 1584, 1585, 5, 184, 93, 2, 1585, 221, 3, 2, 2,
	2, 1586, 1594, 7, 33, 2, 2, 1587, 1589, 7, 91, 2, 2, 1588, 1587, 3, 2,
	2, 2, 1589, 1592, 3, 2, 2, 2, 1590, 1588, 3, 2, 2, 2, 1590, 1591, 3, 2,
	2, 2, 1591, 1593, 3, 2, 2, 2, 1592, 1590, 3, 2, 2, 2, 1593, 1595, 5, 224,
	113, 2, 1594, 1590, 3, 2, 2, 2, 1594, 1595, 3, 2, 2, 2, 1595, 1599, 3,
	2, 2, 2, 1596, 1598, 7, 91, 2, 2, 1597, 1596, 3, 2, 2, 2, 1598, 1601, 3,
	2, 2, 2, 1599, 1597, 3, 2, 2, 2, 1599, 1600, 3, 2, 2, 2, 1600, 1602, 3,
	2, 2, 2, 1601, 1599, 3, 2, 2, 2, 1602, 1603, 7, 36, 2, 2, 1603, 223, 3,
	2, 2, 2, 1604, 1616, 5, 226, 114, 2, 1605, 1609, 5, 364, 183, 2, 1606,
	1608, 7, 91, 2, 2, 1607, 1606, 3, 2, 2, 2, 1608, 1611, 3, 2, 2, 2, 1609,
	1607, 3, 2, 2, 2, 1609, 1610, 3, 2, 2, 2, 1610, 1612, 3, 2, 2, 2, 1611,
	1609, 3, 2, 2, 2, 1612, 1613, 5, 226, 114, 2, 1613, 1615, 3, 2, 2, 2, 1614,
	1605, 3, 2, 2, 2, 1615, 1618, 3, 2, 2, 2, 1616, 1614, 3, 2, 2, 2, 1616,
	1617, 3, 2, 2, 2, 1617, 1620, 3, 2, 2, 2, 1618, 1616, 3, 2, 2, 2, 1619,
	1621, 5, 364, 183, 2, 1620, 1619, 3, 2, 2, 2, 1620, 1621, 3, 2, 2, 2, 1621,
	225, 3, 2, 2, 2, 1622, 1625, 5, 310, 156, 2, 1623, 1624, 7, 40, 2, 2, 1624,
	1626, 5, 184, 93, 2, 1625, 1623, 3, 2, 2, 2, 1625, 1626, 3, 2, 2, 2, 1626,
	227, 3, 2, 2, 2, 1627, 1628, 5, 282, 142, 2, 1628, 1629, 5, 222, 112, 2,
	1629, 229, 3, 2, 2, 2, 1630, 1631, 5, 282, 142, 2, 1631, 1632, 5, 256,
	129, 2, 1632, 231, 3, 2, 2, 2, 1633, 1634, 7, 33, 2, 2, 1634, 1635, 5,
	8, 5, 2, 1635, 1636, 7, 36, 2, 2, 1636, 1665, 3, 2, 2, 2, 1637, 1638, 7,
	33, 2, 2, 1638, 1642, 5, 234, 118, 2, 1639, 1641, 7, 91, 2, 2, 1640, 1639,
	3, 2, 2, 2, 1641, 1644, 3, 2, 2, 2, 1642, 1640, 3, 2, 2, 2, 1642, 1643,
	3, 2, 2, 2, 1643, 1645, 3, 2, 2, 2, 1644, 1642, 3, 2, 2, 2, 1645, 1653,
	7, 64, 2, 2, 1646, 1648, 7, 91, 2, 2, 1647, 1646, 3, 2, 2, 2, 1648, 1651,
	3, 2, 2, 2, 1649, 1647, 3, 2, 2, 2, 1649, 1650, 3, 2, 2, 2, 1650, 1652,
	3, 2, 2, 2, 1651, 1649, 3, 2, 2, 2, 1652, 1654, 5, 274, 138, 2, 1653, 1649,
	3, 2, 2, 2, 1653, 1654, 3, 2, 2, 2, 1654, 1658, 3, 2, 2, 2, 1655, 1657,
	7, 91, 2, 2, 1656, 1655, 3, 2, 2, 2, 1657, 1660, 3, 2, 2, 2, 1658, 1656,
	3, 2, 2, 2, 1658, 1659, 3, 2, 2, 2, 1659, 1661, 3, 2, 2, 2, 1660, 1658,
	3, 2, 2, 2, 1661, 1662, 5, 8, 5, 2, 1662, 1663, 7, 36, 2, 2, 1663, 1665,
	3, 2, 2, 2, 1664, 1633, 3, 2, 2, 2, 1664, 1637, 3, 2, 2, 2, 1665, 233,
	3, 2, 2, 2, 1666, 1678, 5, 236, 119, 2, 1667, 1671, 5, 364, 183, 2, 1668,
	1670, 7, 91, 2, 2, 1669, 1668, 3, 2, 2, 2, 1670, 1673, 3, 2, 2, 2, 1671,
	1669, 3, 2, 2, 2, 1671, 1672, 3, 2, 2, 2, 1672, 1674, 3, 2, 2, 2, 1673,
	1671, 3, 2, 2, 2, 1674, 1675, 5, 236, 119, 2, 1675, 1677, 3, 2, 2, 2, 1676,
	1667, 3, 2, 2, 2, 1677, 1680, 3, 2, 2, 2, 1678, 1676, 3, 2, 2, 2, 1678,
	1679, 3, 2, 2, 2, 1679, 1682, 3, 2, 2, 2, 1680, 1678, 3, 2, 2, 2, 1681,
	1683, 5, 364, 183, 2, 1682, 1681, 3, 2, 2, 2, 1682, 1683, 3, 2, 2, 2, 1683,
	235, 3, 2, 2, 2, 1684, 1687, 5, 118, 60, 2, 1685, 1687, 5, 308, 155, 2,
	1686, 1684, 3, 2, 2, 2, 1686, 1685, 3, 2, 2, 2, 1687, 237, 3, 2, 2, 2,
	1688, 1689, 7, 32, 2, 2, 1689, 1690, 5, 308, 155, 2, 1690, 239, 3, 2, 2,
	2, 1691, 1695, 7, 34, 2, 2, 1692, 1694, 7, 91, 2, 2, 1693, 1692, 3, 2,
	2, 2, 1694, 1697, 3, 2, 2, 2, 1695, 1693, 3, 2, 2, 2, 1695, 1696, 3, 2,
	2, 2, 1696, 1698, 3, 2, 2, 2, 1697, 1695, 3, 2, 2, 2, 1698, 1702, 5, 184,
	93, 2, 1699, 1701, 7, 91, 2, 2, 1700, 1699, 3, 2, 2, 2, 1701, 1704, 3,
	2, 2, 2, 1702, 1700, 3, 2, 2, 2, 1702, 1703, 3, 2, 2, 2, 1703, 1705, 3,
	2, 2, 2, 1704, 1702, 3, 2, 2, 2, 1705, 1706, 7, 37, 2, 2, 1706, 241, 3,
	2, 2, 2, 1707, 1708, 7, 34, 2, 2, 1708, 1720, 7, 37, 2, 2, 1709, 1710,
	7, 34, 2, 2, 1710, 1713, 5, 244, 123, 2, 1711, 1712, 7, 39, 2, 2, 1712,
	1714, 5, 244, 123, 2, 1713, 1711, 3, 2, 2, 2, 1714, 1715, 3, 2, 2, 2, 1715,
	1713, 3, 2, 2, 2, 1715, 1716, 3, 2, 2, 2, 1716, 1717, 3, 2, 2, 2, 1717,
	1718, 7, 37, 2, 2, 1718, 1720, 3, 2, 2, 2, 1719, 1707, 3, 2, 2, 2, 1719,
	1709, 3, 2, 2, 2, 1720, 243, 3, 2, 2, 2, 1721, 1727, 5, 184, 93, 2, 1722,
	1723, 5, 308, 155, 2, 1723, 1724, 7, 40, 2, 2, 1724, 1725, 5, 184, 93,
	2, 1725, 1727, 3, 2, 2, 2, 1726, 1721, 3, 2, 2, 2, 1726, 1722, 3, 2, 2,
	2, 1727, 245, 3, 2, 2, 2, 1728, 1729, 7, 59, 2, 2, 1729, 247, 3, 2, 2,
	2, 1730, 1734, 5, 198, 100, 2, 1731, 1733, 5, 250, 126, 2, 1732, 1731,
	3, 2, 2, 2, 1733, 1736, 3, 2, 2, 2, 1734, 1732, 3, 2, 2, 2, 1734, 1735,
	3, 2, 2, 2, 1735, 1738, 3, 2, 2, 2, 1736, 1734, 3, 2, 2, 2, 1737, 1739,
	5, 336, 169, 2, 1738, 1737, 3, 2, 2, 2, 1738, 1739, 3, 2, 2, 2, 1739, 249,
	3, 2, 2, 2, 1740, 1744, 5, 256, 129, 2, 1741, 1744, 5, 252, 127, 2, 1742,
	1744, 5, 254, 128, 2, 1743, 1740, 3, 2, 2, 2, 1743, 1741, 3, 2, 2, 2, 1743,
	1742, 3, 2, 2, 2, 1744, 251, 3, 2, 2, 2, 1745, 1755, 7, 32, 2, 2, 1746,
	1756, 7, 82, 2, 2, 1747, 1753, 5, 312, 157, 2, 1748, 1754, 5, 48, 25, 2,
	1749, 1750, 7, 34, 2, 2, 1750, 1751, 5, 270, 136, 2, 1751, 1752, 7, 37,
	2, 2, 1752, 1754, 3, 2, 2, 2, 1753, 1748, 3, 2, 2, 2, 1753, 1749, 3, 2,
	2, 2, 1753, 1754, 3, 2, 2, 2, 1754, 1756, 3, 2, 2, 2, 1755, 1746, 3, 2,
	2, 2, 1755, 1747, 3, 2, 2, 2, 1756, 253, 3, 2, 2, 2, 1757, 1758, 7, 35,
	2, 2, 1758, 1759, 5, 260, 131, 2, 1759, 1760, 7, 38, 2, 2, 1760, 255, 3,
	2, 2, 2, 1761, 1763, 5, 258, 130, 2, 1762, 1761, 3, 2, 2, 2, 1762, 1763,
	3, 2, 2, 2, 1763, 1764, 3, 2, 2, 2, 1764, 1767, 5, 264, 133, 2, 1765, 1767,
	5, 258, 130, 2, 1766, 1762, 3, 2, 2, 2, 1766, 1765, 3, 2, 2, 2, 1767, 257,
	3, 2, 2, 2, 1768, 1769, 7, 34, 2, 2, 1769, 1775, 7, 37, 2, 2, 1770, 1771,
	7, 34, 2, 2, 1771, 1772, 5, 260, 131, 2, 1772, 1773, 7, 37, 2, 2, 1773,
	1775, 3, 2, 2, 2, 1774, 1768, 3, 2, 2, 2, 1774, 1770, 3, 2, 2, 2, 1775,
	259, 3, 2, 2, 2, 1776, 1781, 5, 262, 132, 2, 1777, 1778, 7, 39, 2, 2, 1778,
	1780, 5, 262, 132, 2, 1779, 1777, 3, 2, 2, 2, 1780, 1783, 3, 2, 2, 2, 1781,
	1779, 3, 2, 2, 2, 1781, 1782, 3, 2, 2, 2, 1782, 261, 3, 2, 2, 2, 1783,
	1781, 3, 2, 2, 2, 1784, 1795, 5, 184, 93, 2, 1785, 1786, 5, 308, 155, 2,
	1786, 1787, 7, 40, 2, 2, 1787, 1788, 5, 184, 93, 2, 1788, 1795, 3, 2, 2,
	2, 1789, 1795, 5, 338, 170, 2, 1790, 1791, 5, 308, 155, 2, 1791, 1792,
	7, 40, 2, 2, 1792, 1793, 5, 338, 170, 2, 1793, 1795, 3, 2, 2, 2, 1794,
	1784, 3, 2, 2, 2, 1794, 1785, 3, 2, 2, 2, 1794, 1789, 3, 2, 2, 2, 1794,
	1790, 3, 2, 2, 2, 1795, 263, 3, 2, 2, 2, 1796, 1798, 5, 232, 117, 2, 1797,
	1799, 5, 266, 134, 2, 1798, 1797, 3, 2, 2, 2, 1798, 1799, 3, 2, 2, 2, 1799,
	265, 3, 2, 2, 2, 1800, 1802, 5, 268, 135, 2, 1801, 1800, 3, 2, 2, 2, 1802,
	1803, 3, 2, 2, 2, 1803, 1801, 3, 2, 2, 2, 1803, 1804, 3, 2, 2, 2, 1804,
	267, 3, 2, 2, 2, 1805, 1806, 5, 312, 157, 2, 1806, 1807, 7, 40, 2, 2, 1807,
	1808, 5, 232, 117, 2, 1808, 269, 3, 2, 2, 2, 1809, 1813, 5, 272, 137, 2,
	1810, 1812, 5, 272, 137, 2, 1811, 1810, 3, 2, 2, 2, 1812, 1815, 3, 2, 2,
	2, 1813, 1811, 3, 2, 2, 2, 1813, 1814, 3, 2, 2, 2, 1814, 271, 3, 2, 2,
	2, 1815, 1813, 3, 2, 2, 2, 1816, 1817, 5, 308, 155, 2, 1817, 1818, 7, 40,
	2, 2, 1818, 273, 3, 2, 2, 2, 1819, 1820, 8, 138, 1, 2, 1820, 1823, 5, 276,
	139, 2, 1821, 1823, 5, 294, 148, 2, 1822, 1819, 3, 2, 2, 2, 1822, 1821,
	3, 2, 2, 2, 1823, 1832, 3, 2, 2, 2, 1824, 1825, 12, 5, 2, 2, 1825, 1831,
	7, 44, 2, 2, 1826, 1827, 12, 4, 2, 2, 1827, 1831, 7, 45, 2, 2, 1828, 1829,
	12, 3, 2, 2, 1829, 1831, 7, 67, 2, 2, 1830, 1824, 3, 2, 2, 2, 1830, 1826,
	3, 2, 2, 2, 1830, 1828, 3, 2, 2, 2, 1831, 1834, 3, 2, 2, 2, 1832, 1830,
	3, 2, 2, 2, 1832, 1833, 3, 2, 2, 2, 1833, 275, 3, 2, 2, 2, 1834, 1832,
	3, 2, 2, 2, 1835, 1836, 8, 139, 1, 2, 1836, 1837, 5, 278, 140, 2, 1837,
	1882, 3, 2, 2, 2, 1838, 1840, 12, 5, 2, 2, 1839, 1841, 5, 182, 92, 2, 1840,
	1839, 3, 2, 2, 2, 1840, 1841, 3, 2, 2, 2, 1841, 1845, 3, 2, 2, 2, 1842,
	1844, 7, 91, 2, 2, 1843, 1842, 3, 2, 2, 2, 1844, 1847, 3, 2, 2, 2, 1845,
	1843, 3, 2, 2, 2, 1845, 1846, 3, 2, 2, 2, 1846, 1848, 3, 2, 2, 2, 1847,
	1845, 3, 2, 2, 2, 1848, 1852, 7, 50, 2, 2, 1849, 1851, 7, 91, 2, 2, 1850,
	1849, 3, 2, 2, 2, 1851, 1854, 3, 2, 2, 2, 1852, 1850, 3, 2, 2, 2, 1852,
	1853, 3, 2, 2, 2, 1853, 1855, 3, 2, 2, 2, 1854, 1852, 3, 2, 2, 2, 1855,
	1857, 5, 276, 139, 2, 1856, 1858, 5, 182, 92, 2, 1857, 1856, 3, 2, 2, 2,
	1857, 1858, 3, 2, 2, 2, 1858, 1881, 3, 2, 2, 2, 1859, 1861, 12, 4, 2, 2,
	1860, 1862, 5, 182, 92, 2, 1861, 1860, 3, 2, 2, 2, 1861, 1862, 3, 2, 2,
	2, 1862, 1866, 3, 2, 2, 2, 1863, 1865, 7, 91, 2, 2, 1864, 1863, 3, 2, 2,
	2, 1865, 1868, 3, 2, 2, 2, 1866, 1864, 3, 2, 2, 2, 1866, 1867, 3, 2, 2,
	2, 1867, 1869, 3, 2, 2, 2, 1868, 1866, 3, 2, 2, 2, 1869, 1873, 7, 47, 2,
	2, 1870, 1872, 7, 91, 2, 2, 1871, 1870, 3, 2, 2, 2, 1872, 1875, 3, 2, 2,
	2, 1873, 1871, 3, 2, 2, 2, 1873, 1874, 3, 2, 2, 2, 1874, 1876, 3, 2, 2,
	2, 1875, 1873, 3, 2, 2, 2, 1876, 1878, 5, 276, 139, 2, 1877, 1879, 5, 182,
	92, 2, 1878, 1877, 3, 2, 2, 2, 1878, 1879, 3, 2, 2, 2, 1879, 1881, 3, 2,
	2, 2, 1880, 1838, 3, 2, 2, 2, 1880, 1859, 3, 2, 2, 2, 1881, 1884, 3, 2,
	2, 2, 1882, 1880, 3, 2, 2, 2, 1882, 1883, 3, 2, 2, 2, 1883, 277, 3, 2,
	2, 2, 1884, 1882, 3, 2, 2, 2, 1885, 1890, 5, 296, 149, 2, 1886, 1890, 5,
	298, 150, 2, 1887, 1890, 5, 288, 145, 2, 1888, 1890, 5, 282, 142, 2, 1889,
	1885, 3, 2, 2, 2, 1889, 1886, 3, 2, 2, 2, 1889, 1887, 3, 2, 2, 2, 1889,
	1888, 3, 2, 2, 2, 1890, 279, 3, 2, 2, 2, 1891, 1892, 7, 40, 2, 2, 1892,
	1894, 5, 274, 138, 2, 1893, 1895, 5, 182, 92, 2, 1894, 1893, 3, 2, 2, 2,
	1894, 1895, 3, 2, 2, 2, 1895, 281, 3, 2, 2, 2, 1896, 1897, 5, 60, 31, 2,
	1897, 1898, 7, 32, 2, 2, 1898, 1900, 3, 2, 2, 2, 1899, 1896, 3, 2, 2, 2,
	1899, 1900, 3, 2, 2, 2, 1900, 1901, 3, 2, 2, 2, 1901, 1906, 5, 284, 143,
	2, 1902, 1903, 7, 32, 2, 2, 1903, 1905, 5, 284, 143, 2, 1904, 1902, 3,
	2, 2, 2, 1905, 1908, 3, 2, 2, 2, 1906, 1904, 3, 2, 2, 2, 1906, 1907, 3,
	2, 2, 2, 1907, 283, 3, 2, 2, 2, 1908, 1906, 3, 2, 2, 2, 1909, 1911, 5,
	286, 144, 2, 1910, 1912, 5, 48, 25, 2, 1911, 1910, 3, 2, 2, 2, 1911, 1912,
	3, 2, 2, 2, 1912, 285, 3, 2, 2, 2, 1913, 1914, 7, 75, 2, 2, 1914, 287,
	3, 2, 2, 2, 1915, 1923, 7, 34, 2, 2, 1916, 1918, 7, 91, 2, 2, 1917, 1916,
	3, 2, 2, 2, 1918, 1921, 3, 2, 2, 2, 1919, 1917, 3, 2, 2, 2, 1919, 1920,
	3, 2, 2, 2, 1920, 1922, 3, 2, 2, 2, 1921, 1919, 3, 2, 2, 2, 1922, 1924,
	5, 290, 146, 2, 1923, 1919, 3, 2, 2, 2, 1923, 1924, 3, 2, 2, 2, 1924, 1928,
	3, 2, 2, 2, 1925, 1927, 7, 91, 2, 2, 1926, 1925, 3, 2, 2, 2, 1927, 1930,
	3, 2, 2, 2, 1928, 1926, 3, 2, 2, 2, 1928, 1929, 3, 2, 2, 2, 1929, 1931,
	3, 2, 2, 2, 1930, 1928, 3, 2, 2, 2, 1931, 1932, 7, 37, 2, 2, 1932, 289,
	3, 2, 2, 2, 1933, 1945, 5, 292, 147, 2, 1934, 1938, 5, 368, 185, 2, 1935,
	1937, 7, 91, 2, 2, 1936, 1935, 3, 2, 2, 2, 1937, 1940, 3, 2, 2, 2, 1938,
	1936, 3, 2, 2, 2, 1938, 1939, 3, 2, 2, 2, 1939, 1941, 3, 2, 2, 2, 1940,
	1938, 3, 2, 2, 2, 1941, 1942, 5, 292, 147, 2, 1942, 1944, 3, 2, 2, 2, 1943,
	1934, 3, 2, 2, 2, 1944, 1947, 3, 2, 2, 2, 1945, 1943, 3, 2, 2, 2, 1945,
	1946, 3, 2, 2, 2, 1946, 1949, 3, 2, 2, 2, 1947, 1945, 3, 2, 2, 2, 1948,
	1950, 5, 368, 185, 2, 1949, 1948, 3, 2, 2, 2, 1949, 1950, 3, 2, 2, 2, 1950,
	291, 3, 2, 2, 2, 1951, 1952, 5, 306, 154, 2, 1952, 1953, 7, 40, 2, 2, 1953,
	1955, 3, 2, 2, 2, 1954, 1951, 3, 2, 2, 2, 1954, 1955, 3, 2, 2, 2, 1955,
	1956, 3, 2, 2, 2, 1956, 1958, 5, 274, 138, 2, 1957, 1959, 5, 182, 92, 2,
	1958, 1957, 3, 2, 2, 2, 1958, 1959, 3, 2, 2, 2, 1959, 293, 3, 2, 2, 2,
	1960, 1961, 5, 114, 58, 2, 1961, 1962, 5, 326, 164, 2, 1962, 1963, 5, 274,
	138, 2, 1963, 295, 3, 2, 2, 2, 1964, 1965, 7, 35, 2, 2, 1965, 1967, 5,
	274, 138, 2, 1966, 1968, 5, 182, 92, 2, 1967, 1966, 3, 2, 2, 2, 1967, 1968,
	3, 2, 2, 2, 1968, 1969, 3, 2, 2, 2, 1969, 1970, 7, 38, 2, 2, 1970, 297,
	3, 2, 2, 2, 1971, 1972, 7, 33, 2, 2, 1972, 1974, 5, 274, 138, 2, 1973,
	1975, 5, 182, 92, 2, 1974, 1973, 3, 2, 2, 2, 1974, 1975, 3, 2, 2, 2, 1975,
	1976, 3, 2, 2, 2, 1976, 1977, 7, 40, 2, 2, 1977, 1979, 5, 274, 138, 2,
	1978, 1980, 5, 182, 92, 2, 1979, 1978, 3, 2, 2, 2, 1979, 1980, 3, 2, 2,
	2, 1980, 1981, 3, 2, 2, 2, 1981, 1982, 7, 36, 2, 2, 1982, 299, 3, 2, 2,
	2, 1983, 1987, 7, 40, 2, 2, 1984, 1986, 7, 91, 2, 2, 1985, 1984, 3, 2,
	2, 2, 1986, 1989, 3, 2, 2, 2, 1987, 1985, 3, 2, 2, 2, 1987, 1988, 3, 2,
	2, 2, 1988, 1990, 3, 2, 2, 2, 1989, 1987, 3, 2, 2, 2, 1990, 1991, 5, 302,
	152, 2, 1991, 301, 3, 2, 2, 2, 1992, 2004, 5, 304, 153, 2, 1993, 1997,
	5, 368, 185, 2, 1994, 1996, 7, 91, 2, 2, 1995, 1994, 3, 2, 2, 2, 1996,
	1999, 3, 2, 2, 2, 1997, 1995, 3, 2, 2, 2, 1997, 1998, 3, 2, 2, 2, 1998,
	2000, 3, 2, 2, 2, 1999, 1997, 3, 2, 2, 2, 2000, 2001, 5, 304, 153, 2, 2001,
	2003, 3, 2, 2, 2, 2002, 1993, 3, 2, 2, 2, 2003, 2006, 3, 2, 2, 2, 2004,
	2002, 3, 2, 2, 2, 2004, 2005, 3, 2, 2, 2, 2005, 2008, 3, 2, 2, 2, 2006,
	2004, 3, 2, 2, 2, 2007, 2009, 5, 368, 185, 2, 2008, 2007, 3, 2, 2, 2, 2008,
	2009, 3, 2, 2, 2, 2009, 303, 3, 2, 2, 2, 2010, 2012, 5, 278, 140, 2, 2011,
	2013, 5, 182, 92, 2, 2012, 2011, 3, 2, 2, 2, 2012, 2013, 3, 2, 2, 2, 2013,
	305, 3, 2, 2, 2, 2014, 2017, 7, 76, 2, 2, 2015, 2017, 5, 314, 158, 2, 2016,
	2014, 3, 2, 2, 2, 2016, 2015, 3, 2, 2, 2, 2017, 307, 3, 2, 2, 2, 2018,
	2021, 7, 76, 2, 2, 2019, 2021, 5, 316, 159, 2, 2020, 2018, 3, 2, 2, 2,
	2020, 2019, 3, 2, 2, 2, 2021, 309, 3, 2, 2, 2, 2022, 2027, 5, 306, 154,
	2, 2023, 2024, 7, 32, 2, 2, 2024, 2026, 5, 306, 154, 2, 2025, 2023, 3,
	2, 2, 2, 2026, 2029, 3, 2, 2, 2, 2027, 2025, 3, 2, 2, 2, 2027, 2028, 3,
	2, 2, 2, 2028, 311, 3, 2, 2, 2, 2029, 2027, 3, 2, 2, 2, 2030, 2031, 9,
	3, 2, 2, 2031, 313, 3, 2, 2, 2, 2032, 2033, 9, 4, 2, 2, 2033, 315, 3, 2,
	2, 2, 2034, 2035, 9, 5, 2, 2, 2035, 317, 3, 2, 2, 2, 2036, 2041, 7, 92,
	2, 2, 2037, 2038, 7, 91, 2, 2, 2038, 2040, 7, 92, 2, 2, 2039, 2037, 3,
	2, 2, 2, 2040, 2043, 3, 2, 2, 2, 2041, 2039, 3, 2, 2, 2, 2041, 2042, 3,
	2, 2, 2, 2042, 2044, 3, 2, 2, 2, 2043, 2041, 3, 2, 2, 2, 2044, 2045, 7,
	91, 2, 2, 2045, 319, 3, 2, 2, 2, 2046, 2051, 7, 93, 2, 2, 2047, 2048, 7,
	91, 2, 2, 2048, 2050, 7, 93, 2, 2, 2049, 2047, 3, 2, 2, 2, 2050, 2053,
	3, 2, 2, 2, 2051, 2049, 3, 2, 2, 2, 2051, 2052, 3, 2, 2, 2, 2052, 321,
	3, 2, 2, 2, 2053, 2051, 3, 2, 2, 2, 2054, 2055, 7, 49, 2, 2, 2055, 323,
	3, 2, 2, 2, 2056, 2057, 7, 48, 2, 2, 2057, 325, 3, 2, 2, 2, 2058, 2059,
	7, 64, 2, 2, 2059, 327, 3, 2, 2, 2, 2060, 2061, 7, 65, 2, 2, 2061, 329,
	3, 2, 2, 2, 2062, 2063, 7, 66, 2, 2, 2063, 331, 3, 2, 2, 2, 2064, 2068,
	5, 328, 165, 2, 2065, 2068, 5, 330, 166, 2, 2066, 2068, 5, 338, 170, 2,
	2067, 2064, 3, 2, 2, 2, 2067, 2065, 3, 2, 2, 2, 2067, 2066, 3, 2, 2, 2,
	2068, 333, 3, 2, 2, 2, 2069, 2070, 5, 338, 170, 2, 2070, 335, 3, 2, 2,
	2, 2071, 2072, 9, 6, 2, 2, 2072, 337, 3, 2, 2, 2, 2073, 2075, 5, 344, 173,
	2, 2074, 2076, 5, 340, 171, 2, 2075, 2074, 3, 2, 2, 2, 2075, 2076, 3, 2,
	2, 2, 2076, 2085, 3, 2, 2, 2, 2077, 2081, 5, 346, 174, 2, 2078, 2080, 5,
	348, 175, 2, 2079, 2078, 3, 2, 2, 2, 2080, 2083, 3, 2, 2, 2, 2081, 2079,
	3, 2, 2, 2, 2081, 2082, 3, 2, 2, 2, 2082, 2085, 3, 2, 2, 2, 2083, 2081,
	3, 2, 2, 2, 2084, 2073, 3, 2, 2, 2, 2084, 2077, 3, 2, 2, 2, 2085, 339,
	3, 2, 2, 2, 2086, 2087, 6, 171, 8, 2, 2087, 2089, 5, 342, 172, 2, 2088,
	2086, 3, 2, 2, 2, 2089, 2090, 3, 2, 2, 2, 2090, 2088, 3, 2, 2, 2, 2090,
	2091, 3, 2, 2, 2, 2091, 341, 3, 2, 2, 2, 2092, 2095, 5, 344, 173, 2, 2093,
	2095, 7, 94, 2, 2, 2094, 2092, 3, 2, 2, 2, 2094, 2093, 3, 2, 2, 2, 2095,
	343, 3, 2, 2, 2, 2096, 2099, 9, 7, 2, 2, 2097, 2099, 7, 77, 2, 2, 2098,
	2096, 3, 2, 2, 2, 2098, 2097, 3, 2, 2, 2, 2099, 345, 3, 2, 2, 2, 2100,
	2101, 7, 32, 2, 2, 2101, 347, 3, 2, 2, 2, 2102, 2105, 7, 32, 2, 2, 2103,
	2105, 5, 342, 172, 2, 2104, 2102, 3, 2, 2, 2, 2104, 2103, 3, 2, 2, 2, 2105,
	349, 3, 2, 2, 2, 2106, 2111, 5, 356, 179, 2, 2107, 2111, 5, 360, 181, 2,
	2108, 2111, 5, 352, 177, 2, 2109, 2111, 5, 354, 178, 2, 2110, 2106, 3,
	2, 2, 2, 2110, 2107, 3, 2, 2, 2, 2110, 2108, 3, 2, 2, 2, 2110, 2109, 3,
	2, 2, 2, 2111, 351, 3, 2, 2, 2, 2112, 2113, 9, 8, 2, 2, 2113, 353, 3, 2,
	2, 2, 2114, 2115, 7, 21, 2, 2, 2115, 355, 3, 2, 2, 2, 2116, 2118, 5, 324,
	163, 2, 2117, 2116, 3, 2, 2, 2, 2117, 2118, 3, 2, 2, 2, 2118, 2119, 3,
	2, 2, 2, 2119, 2125, 5, 358, 180, 2, 2120, 2122, 5, 324, 163, 2, 2121,
	2120, 3, 2, 2, 2, 2121, 2122, 3, 2, 2, 2, 2122, 2123, 3, 2, 2, 2, 2123,
	2125, 7, 84, 2, 2, 2124, 2117, 3, 2, 2, 2, 2124, 2121, 3, 2, 2, 2, 2125,
	357, 3, 2, 2, 2, 2126, 2127, 9, 9, 2, 2, 2127, 359, 3, 2, 2, 2, 2128, 2129,
	9, 10, 2, 2, 2129, 361, 3, 2, 2, 2, 2130, 2131, 9, 11, 2, 2, 2131, 363,
	3, 2, 2, 2, 2132, 2133, 9, 12, 2, 2, 2133, 365, 3, 2, 2, 2, 2134, 2138,
	7, 41, 2, 2, 2135, 2136, 5, 320, 161, 2, 2136, 2137, 7, 91, 2, 2, 2137,
	2139, 3, 2, 2, 2, 2138, 2135, 3, 2, 2, 2, 2138, 2139, 3, 2, 2, 2, 2139,
	2145, 3, 2, 2, 2, 2140, 2142, 5, 320, 161, 2, 2141, 2140, 3, 2, 2, 2, 2141,
	2142, 3, 2, 2, 2, 2142, 2143, 3, 2, 2, 2, 2143, 2145, 7, 91, 2, 2, 2144,
	2134, 3, 2, 2, 2, 2144, 2141, 3, 2, 2, 2, 2145, 367, 3, 2, 2, 2, 2146,
	2150, 7, 39, 2, 2, 2147, 2148, 5, 320, 161, 2, 2148, 2149, 7, 91, 2, 2,
	2149, 2151, 3, 2, 2, 2, 2150, 2147, 3, 2, 2, 2, 2150, 2151, 3, 2, 2, 2,
	2151, 2157, 3, 2, 2, 2, 2152, 2154, 5, 320, 161, 2, 2153, 2152, 3, 2, 2,
	2, 2153, 2154, 3, 2, 2, 2, 2154, 2155, 3, 2, 2, 2, 2155, 2157, 7, 91, 2,
	2, 2156, 2146, 3, 2, 2, 2, 2156, 2153, 3, 2, 2, 2, 2157, 369, 3, 2, 2,
	2, 291, 373, 377, 382, 393, 402, 409, 413, 417, 424, 432, 442, 452, 459,
	464, 471, 478, 485, 492, 496, 502, 510, 514, 521, 528, 532, 537, 547, 554,
	563, 570, 575, 580, 588, 594, 601, 611, 618, 622, 631, 637, 644, 654, 661,
	666, 669, 674, 686, 692, 696, 701, 711, 715, 722, 733, 740, 754, 764, 771,
	778, 784, 789, 793, 797, 801, 805, 815, 822, 830, 836, 841, 845, 851, 862,
	867, 872, 883, 888, 893, 899, 903, 909, 913, 918, 922, 928, 932, 937, 941,
	945, 950, 954, 959, 970, 977, 982, 989, 996, 1000, 1007, 1011, 1018, 1020,
	1025, 1030, 1034, 1039, 1046, 1051, 1055, 1060, 1072, 1079, 1083, 1086,
	1091, 1095, 1100, 1104, 1109, 1118, 1122, 1127, 1131, 1135, 1140, 1144,
	1149, 1159, 1166, 1170, 1173, 1178, 1185, 1192, 1196, 1201, 1206, 1210,
	1215, 1224, 1229, 1233, 1238, 1248, 1255, 1259, 1262, 1267, 1271, 1275,
	1280, 1286, 1291, 1295, 1300, 1304, 1309, 1313, 1317, 1323, 1330, 1339,
	1348, 1363, 1366, 1368, 1373, 1379, 1385, 1389, 1394, 1403, 1409, 1414,
	1421, 1428, 1432, 1438, 1450, 1455, 1465, 1469, 1476, 1484, 1493, 1509,
	1513, 1518, 1528, 1535, 1539, 1547, 1551, 1556, 1566, 1573, 1577, 1581,
	1590, 1594, 1599, 1609, 1616, 1620, 1625, 1642, 1649, 1653, 1658, 1664,
	1671, 1678, 1682, 1686, 1695, 1702, 1715, 1719, 1726, 1734, 1738, 1743,
	1753, 1755, 1762, 1766, 1774, 1781, 1794, 1798, 1803, 1813, 1822, 1830,
	1832, 1840, 1845, 1852, 1857, 1861, 1866, 1873, 1878, 1880, 1882, 1889,
	1894, 1899, 1906, 1911, 1919, 1923, 1928, 1938, 1945, 1949, 1954, 1958,
	1967, 1974, 1979, 1987, 1997, 2004, 2008, 2012, 2016, 2020, 2027, 2041,
	2051, 2067, 2075, 2081, 2084, 2090, 2094, 2098, 2104, 2110, 2117, 2121,
	2124, 2138, 2141, 2144, 2150, 2153, 2156,
}
var literalNames = []string{
	"", "'and'", "'as'", "'attribute'", "'break'", "'const'", "'continue'",
	"'else'", "'enum'", "'false'", "'for'", "'func'", "'if'", "'import'", "'in'",
	"'interface'", "'is'", "'match'", "'not'", "'null'", "'or'", "'package'",
	"'repeat'", "'return'", "'struct'", "'true'", "'type'", "'var'", "'while'",
	"'xor'", "'.'", "'{'", "'('", "'['", "'}'", "')'", "']'", "','", "':'",
	"';'", "'<'", "'>'", "'!'", "'?'", "'@'", "'&'", "'-'", "'='", "'|'", "'/'",
	"'+'", "'*'", "'%'", "'^'", "'~'", "'$'", "'`'", "'_'",
}
var symbolicNames = []string{
	"", "KEYWORD_AND", "KEYWORD_AS", "KEYWORD_ATTRIBUTE", "KEYWORD_BREAK",
	"KEYWORD_CONST", "KEYWORD_CONTINUE", "KEYWORD_ELSE", "KEYWORD_ENUM", "KEYWORD_FALSE",
	"KEYWORD_FOR", "KEYWORD_FUNC", "KEYWORD_IF", "KEYWORD_IMPORT", "KEYWORD_IN",
	"KEYWORD_INTERFACE", "KEYWORD_IS", "KEYWORD_MATCH", "KEYWORD_NOT", "KEYWORD_NULL",
	"KEYWORD_OR", "KEYWORD_PACKAGE", "KEYWORD_REPEATE", "KEYWORD_RETURN", "KEYWORD_STRUCT",
	"KEYWORD_TRUE", "KEYWORD_TYPE", "KEYWORD_VAR", "KEYWORD_WHILE", "KEYWORD_XOR",
	"DOT", "LCURLY", "LPAREN", "LBRACK", "RCURLY", "RPAREN", "RBRACK", "COMMA",
	"COLON", "SEMI", "LT", "GT", "BANG", "QUESTION", "AT", "AND", "MINUS",
	"EQUAL", "PIPE", "SLASH", "PLUS", "STAR", "PERCENT", "CARET", "TILDE",
	"DOLLER", "BACKTICK", "UNDERSCORE", "PLUS_PLUS", "MINUS_MINUS", "COLON_EQUAL",
	"RIGHT_RIGHT_ARROWS", "RIGHT_ARROW", "DOT_DOT", "DOT_DOT_LT", "ELLIPSIS",
	"GRAPH_RIGHT_PATH", "GRAPH_LEFT_PATH", "GRAPH_PATH", "GRAPH_CONSTRAINT_PATH_LEFT",
	"GRAPH_CONSTRAINT_PATH_LEFT_ARROW", "GRAPH_CONSTRAINT_PATH_RIGHT", "GRAPH_CONSTRAINT_PATH_RIGHT_ARROW",
	"TYPE_IDENTIFIER", "VALUE_IDENTIFIER", "OPERATOR_HEAD_OTHER", "IMPLICIT_PARAMETER_NAME",
	"BINARY_LITERAL", "OCTAL_LITERAL", "DECIMAL_LITERAL", "PURE_DECIMAL_DIGITS",
	"HEXADECIMAL_LITERAL", "FLOAT_LITERAL", "STATIC_STRING_LITERAL", "INTERPOLATED_STRING_LITERAL",
	"WS", "DELIMITED_COMMENT", "LINE_COMMENT", "LINE_COMMENT_FOR_DOCUMENT",
	"EOL", "LINE_DOCUMENT", "FOLLOWING_LINE_DOCUMENT", "OPERATOR_FOLLOWING_CHARACTER",
}

var ruleNames = []string{
	"mojoFile", "statement", "freeDocument", "statements", "loopStatement",
	"forInStatement", "whileStatement", "conditions", "condition", "optionalBindingCondition",
	"branchStatement", "ifStatement", "elseClause", "matchStatement", "matchCases",
	"matchCase", "controlTransferStatement", "breakStatement", "continueStatement",
	"returnStatement", "genericParameterClause", "genericParameters", "genericParameter",
	"genericArgumentClause", "genericArguments", "genericArgument", "declaration",
	"codeBlock", "packageDeclaration", "packageIdentifier", "packageName",
	"importDeclaration", "importPath", "importPathIdentifier", "importAllClause",
	"importValueAsClause", "importTypeClause", "importTypeAsClause", "importGroupClause",
	"importGroup", "importValue", "importType", "constantDeclaration", "patternInitializers",
	"patternInitializer", "initializer", "variableDeclaration", "typeAliasDeclaration",
	"typeAliasName", "typeAliasAssignment", "functionDeclaration", "functionHead",
	"functionName", "functionSignature", "functionResult", "functionBody",
	"functionParameterClause", "functionParameters", "functionParameter", "enumDeclaration",
	"enumBody", "enumName", "enumMembers", "enumMember", "structDeclaration",
	"structName", "structType", "structBody", "structMembers", "structMember",
	"structMemberDeclaration", "interfaceDeclaration", "interfaceName", "interfaceBody",
	"interfaceMembers", "interfaceMember", "interfaceMethodDeclaration", "attributeDeclaration",
	"pattern", "wildcardPattern", "identifierPattern", "tuplePattern", "tuplePatternElementList",
	"tuplePatternElement", "optionalPattern", "expressionPattern", "attribute",
	"attributeIdentifier", "attributeName", "attributeArgumentClause", "attributes",
	"expression", "expressions", "prefixExpression", "binaryExpression", "binaryExpressions",
	"conditionalOperator", "typeCastingOperator", "primaryExpression", "literalExpression",
	"numericOperatorLiteral", "stringOperatorLiteral", "postfixLiteralOperator",
	"prefixLiteralOperator", "arrayLiteral", "arrayLiteralItems", "arrayLiteralItem",
	"mapLiteral", "mapLiteralItems", "mapLiteralItem", "objectLiteral", "objectLiteralItems",
	"objectLiteralItem", "structLiteral", "structConstructionExpression", "closureExpression",
	"closureParameters", "closureParameter", "implicitMemberExpression", "parenthesizedExpression",
	"tupleExpression", "tupleElement", "wildcardExpression", "postfixExpression",
	"suffixExpression", "explicitMemberSuffix", "subscriptSuffix", "functionCallSuffix",
	"functionCallArgumentClause", "functionCallArguments", "functionCallArgument",
	"trailingClosures", "labeledTrailingClosures", "labeledTrailingClosure",
	"argumentNames", "argumentName", "type_", "basicType", "primeType", "typeAnnotation",
	"typeIdentifier", "typeIdentifierClause", "typeName", "tupleType", "tupleTypeElements",
	"tupleTypeElement", "functionType", "arrayType", "mapType", "typeInheritanceClause",
	"typeInheritances", "typeInheritance", "declarationIdentifier", "labelIdentifier",
	"pathIdentifier", "identifier", "keywordAsIdentifierInDeclarations", "keywordAsIdentifierInLabels",
	"document", "followingDocument", "assignmentOperator", "negatePrefixOperator",
	"arrowOperator", "rangeOperator", "halfOpenRangeOperator", "binaryOperator",
	"prefixOperator", "postfixOperator", "operator", "operator_characters",
	"operator_character", "operator_head", "dot_operator_head", "dot_operator_character",
	"literal", "boolLiteral", "nullLiteral", "numericLiteral", "integerLiteral",
	"stringLiteral", "eos", "eov", "eosWithDocument", "eovWithDocument",
}

type MojoParser struct {
	*antlr.BaseParser
}

// NewMojoParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *MojoParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewMojoParser(input antlr.TokenStream) *MojoParser {
	this := new(MojoParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "MojoParser.g4"

	return this
}

// MojoParser tokens.
const (
	MojoParserEOF                               = antlr.TokenEOF
	MojoParserKEYWORD_AND                       = 1
	MojoParserKEYWORD_AS                        = 2
	MojoParserKEYWORD_ATTRIBUTE                 = 3
	MojoParserKEYWORD_BREAK                     = 4
	MojoParserKEYWORD_CONST                     = 5
	MojoParserKEYWORD_CONTINUE                  = 6
	MojoParserKEYWORD_ELSE                      = 7
	MojoParserKEYWORD_ENUM                      = 8
	MojoParserKEYWORD_FALSE                     = 9
	MojoParserKEYWORD_FOR                       = 10
	MojoParserKEYWORD_FUNC                      = 11
	MojoParserKEYWORD_IF                        = 12
	MojoParserKEYWORD_IMPORT                    = 13
	MojoParserKEYWORD_IN                        = 14
	MojoParserKEYWORD_INTERFACE                 = 15
	MojoParserKEYWORD_IS                        = 16
	MojoParserKEYWORD_MATCH                     = 17
	MojoParserKEYWORD_NOT                       = 18
	MojoParserKEYWORD_NULL                      = 19
	MojoParserKEYWORD_OR                        = 20
	MojoParserKEYWORD_PACKAGE                   = 21
	MojoParserKEYWORD_REPEATE                   = 22
	MojoParserKEYWORD_RETURN                    = 23
	MojoParserKEYWORD_STRUCT                    = 24
	MojoParserKEYWORD_TRUE                      = 25
	MojoParserKEYWORD_TYPE                      = 26
	MojoParserKEYWORD_VAR                       = 27
	MojoParserKEYWORD_WHILE                     = 28
	MojoParserKEYWORD_XOR                       = 29
	MojoParserDOT                               = 30
	MojoParserLCURLY                            = 31
	MojoParserLPAREN                            = 32
	MojoParserLBRACK                            = 33
	MojoParserRCURLY                            = 34
	MojoParserRPAREN                            = 35
	MojoParserRBRACK                            = 36
	MojoParserCOMMA                             = 37
	MojoParserCOLON                             = 38
	MojoParserSEMI                              = 39
	MojoParserLT                                = 40
	MojoParserGT                                = 41
	MojoParserBANG                              = 42
	MojoParserQUESTION                          = 43
	MojoParserAT                                = 44
	MojoParserAND                               = 45
	MojoParserMINUS                             = 46
	MojoParserEQUAL                             = 47
	MojoParserPIPE                              = 48
	MojoParserSLASH                             = 49
	MojoParserPLUS                              = 50
	MojoParserSTAR                              = 51
	MojoParserPERCENT                           = 52
	MojoParserCARET                             = 53
	MojoParserTILDE                             = 54
	MojoParserDOLLER                            = 55
	MojoParserBACKTICK                          = 56
	MojoParserUNDERSCORE                        = 57
	MojoParserPLUS_PLUS                         = 58
	MojoParserMINUS_MINUS                       = 59
	MojoParserCOLON_EQUAL                       = 60
	MojoParserRIGHT_RIGHT_ARROWS                = 61
	MojoParserRIGHT_ARROW                       = 62
	MojoParserDOT_DOT                           = 63
	MojoParserDOT_DOT_LT                        = 64
	MojoParserELLIPSIS                          = 65
	MojoParserGRAPH_RIGHT_PATH                  = 66
	MojoParserGRAPH_LEFT_PATH                   = 67
	MojoParserGRAPH_PATH                        = 68
	MojoParserGRAPH_CONSTRAINT_PATH_LEFT        = 69
	MojoParserGRAPH_CONSTRAINT_PATH_LEFT_ARROW  = 70
	MojoParserGRAPH_CONSTRAINT_PATH_RIGHT       = 71
	MojoParserGRAPH_CONSTRAINT_PATH_RIGHT_ARROW = 72
	MojoParserTYPE_IDENTIFIER                   = 73
	MojoParserVALUE_IDENTIFIER                  = 74
	MojoParserOPERATOR_HEAD_OTHER               = 75
	MojoParserIMPLICIT_PARAMETER_NAME           = 76
	MojoParserBINARY_LITERAL                    = 77
	MojoParserOCTAL_LITERAL                     = 78
	MojoParserDECIMAL_LITERAL                   = 79
	MojoParserPURE_DECIMAL_DIGITS               = 80
	MojoParserHEXADECIMAL_LITERAL               = 81
	MojoParserFLOAT_LITERAL                     = 82
	MojoParserSTATIC_STRING_LITERAL             = 83
	MojoParserINTERPOLATED_STRING_LITERAL       = 84
	MojoParserWS                                = 85
	MojoParserDELIMITED_COMMENT                 = 86
	MojoParserLINE_COMMENT                      = 87
	MojoParserLINE_COMMENT_FOR_DOCUMENT         = 88
	MojoParserEOL                               = 89
	MojoParserLINE_DOCUMENT                     = 90
	MojoParserFOLLOWING_LINE_DOCUMENT           = 91
	MojoParserOPERATOR_FOLLOWING_CHARACTER      = 92
)

// MojoParser rules.
const (
	MojoParserRULE_mojoFile                          = 0
	MojoParserRULE_statement                         = 1
	MojoParserRULE_freeDocument                      = 2
	MojoParserRULE_statements                        = 3
	MojoParserRULE_loopStatement                     = 4
	MojoParserRULE_forInStatement                    = 5
	MojoParserRULE_whileStatement                    = 6
	MojoParserRULE_conditions                        = 7
	MojoParserRULE_condition                         = 8
	MojoParserRULE_optionalBindingCondition          = 9
	MojoParserRULE_branchStatement                   = 10
	MojoParserRULE_ifStatement                       = 11
	MojoParserRULE_elseClause                        = 12
	MojoParserRULE_matchStatement                    = 13
	MojoParserRULE_matchCases                        = 14
	MojoParserRULE_matchCase                         = 15
	MojoParserRULE_controlTransferStatement          = 16
	MojoParserRULE_breakStatement                    = 17
	MojoParserRULE_continueStatement                 = 18
	MojoParserRULE_returnStatement                   = 19
	MojoParserRULE_genericParameterClause            = 20
	MojoParserRULE_genericParameters                 = 21
	MojoParserRULE_genericParameter                  = 22
	MojoParserRULE_genericArgumentClause             = 23
	MojoParserRULE_genericArguments                  = 24
	MojoParserRULE_genericArgument                   = 25
	MojoParserRULE_declaration                       = 26
	MojoParserRULE_codeBlock                         = 27
	MojoParserRULE_packageDeclaration                = 28
	MojoParserRULE_packageIdentifier                 = 29
	MojoParserRULE_packageName                       = 30
	MojoParserRULE_importDeclaration                 = 31
	MojoParserRULE_importPath                        = 32
	MojoParserRULE_importPathIdentifier              = 33
	MojoParserRULE_importAllClause                   = 34
	MojoParserRULE_importValueAsClause               = 35
	MojoParserRULE_importTypeClause                  = 36
	MojoParserRULE_importTypeAsClause                = 37
	MojoParserRULE_importGroupClause                 = 38
	MojoParserRULE_importGroup                       = 39
	MojoParserRULE_importValue                       = 40
	MojoParserRULE_importType                        = 41
	MojoParserRULE_constantDeclaration               = 42
	MojoParserRULE_patternInitializers               = 43
	MojoParserRULE_patternInitializer                = 44
	MojoParserRULE_initializer                       = 45
	MojoParserRULE_variableDeclaration               = 46
	MojoParserRULE_typeAliasDeclaration              = 47
	MojoParserRULE_typeAliasName                     = 48
	MojoParserRULE_typeAliasAssignment               = 49
	MojoParserRULE_functionDeclaration               = 50
	MojoParserRULE_functionHead                      = 51
	MojoParserRULE_functionName                      = 52
	MojoParserRULE_functionSignature                 = 53
	MojoParserRULE_functionResult                    = 54
	MojoParserRULE_functionBody                      = 55
	MojoParserRULE_functionParameterClause           = 56
	MojoParserRULE_functionParameters                = 57
	MojoParserRULE_functionParameter                 = 58
	MojoParserRULE_enumDeclaration                   = 59
	MojoParserRULE_enumBody                          = 60
	MojoParserRULE_enumName                          = 61
	MojoParserRULE_enumMembers                       = 62
	MojoParserRULE_enumMember                        = 63
	MojoParserRULE_structDeclaration                 = 64
	MojoParserRULE_structName                        = 65
	MojoParserRULE_structType                        = 66
	MojoParserRULE_structBody                        = 67
	MojoParserRULE_structMembers                     = 68
	MojoParserRULE_structMember                      = 69
	MojoParserRULE_structMemberDeclaration           = 70
	MojoParserRULE_interfaceDeclaration              = 71
	MojoParserRULE_interfaceName                     = 72
	MojoParserRULE_interfaceBody                     = 73
	MojoParserRULE_interfaceMembers                  = 74
	MojoParserRULE_interfaceMember                   = 75
	MojoParserRULE_interfaceMethodDeclaration        = 76
	MojoParserRULE_attributeDeclaration              = 77
	MojoParserRULE_pattern                           = 78
	MojoParserRULE_wildcardPattern                   = 79
	MojoParserRULE_identifierPattern                 = 80
	MojoParserRULE_tuplePattern                      = 81
	MojoParserRULE_tuplePatternElementList           = 82
	MojoParserRULE_tuplePatternElement               = 83
	MojoParserRULE_optionalPattern                   = 84
	MojoParserRULE_expressionPattern                 = 85
	MojoParserRULE_attribute                         = 86
	MojoParserRULE_attributeIdentifier               = 87
	MojoParserRULE_attributeName                     = 88
	MojoParserRULE_attributeArgumentClause           = 89
	MojoParserRULE_attributes                        = 90
	MojoParserRULE_expression                        = 91
	MojoParserRULE_expressions                       = 92
	MojoParserRULE_prefixExpression                  = 93
	MojoParserRULE_binaryExpression                  = 94
	MojoParserRULE_binaryExpressions                 = 95
	MojoParserRULE_conditionalOperator               = 96
	MojoParserRULE_typeCastingOperator               = 97
	MojoParserRULE_primaryExpression                 = 98
	MojoParserRULE_literalExpression                 = 99
	MojoParserRULE_numericOperatorLiteral            = 100
	MojoParserRULE_stringOperatorLiteral             = 101
	MojoParserRULE_postfixLiteralOperator            = 102
	MojoParserRULE_prefixLiteralOperator             = 103
	MojoParserRULE_arrayLiteral                      = 104
	MojoParserRULE_arrayLiteralItems                 = 105
	MojoParserRULE_arrayLiteralItem                  = 106
	MojoParserRULE_mapLiteral                        = 107
	MojoParserRULE_mapLiteralItems                   = 108
	MojoParserRULE_mapLiteralItem                    = 109
	MojoParserRULE_objectLiteral                     = 110
	MojoParserRULE_objectLiteralItems                = 111
	MojoParserRULE_objectLiteralItem                 = 112
	MojoParserRULE_structLiteral                     = 113
	MojoParserRULE_structConstructionExpression      = 114
	MojoParserRULE_closureExpression                 = 115
	MojoParserRULE_closureParameters                 = 116
	MojoParserRULE_closureParameter                  = 117
	MojoParserRULE_implicitMemberExpression          = 118
	MojoParserRULE_parenthesizedExpression           = 119
	MojoParserRULE_tupleExpression                   = 120
	MojoParserRULE_tupleElement                      = 121
	MojoParserRULE_wildcardExpression                = 122
	MojoParserRULE_postfixExpression                 = 123
	MojoParserRULE_suffixExpression                  = 124
	MojoParserRULE_explicitMemberSuffix              = 125
	MojoParserRULE_subscriptSuffix                   = 126
	MojoParserRULE_functionCallSuffix                = 127
	MojoParserRULE_functionCallArgumentClause        = 128
	MojoParserRULE_functionCallArguments             = 129
	MojoParserRULE_functionCallArgument              = 130
	MojoParserRULE_trailingClosures                  = 131
	MojoParserRULE_labeledTrailingClosures           = 132
	MojoParserRULE_labeledTrailingClosure            = 133
	MojoParserRULE_argumentNames                     = 134
	MojoParserRULE_argumentName                      = 135
	MojoParserRULE_type_                             = 136
	MojoParserRULE_basicType                         = 137
	MojoParserRULE_primeType                         = 138
	MojoParserRULE_typeAnnotation                    = 139
	MojoParserRULE_typeIdentifier                    = 140
	MojoParserRULE_typeIdentifierClause              = 141
	MojoParserRULE_typeName                          = 142
	MojoParserRULE_tupleType                         = 143
	MojoParserRULE_tupleTypeElements                 = 144
	MojoParserRULE_tupleTypeElement                  = 145
	MojoParserRULE_functionType                      = 146
	MojoParserRULE_arrayType                         = 147
	MojoParserRULE_mapType                           = 148
	MojoParserRULE_typeInheritanceClause             = 149
	MojoParserRULE_typeInheritances                  = 150
	MojoParserRULE_typeInheritance                   = 151
	MojoParserRULE_declarationIdentifier             = 152
	MojoParserRULE_labelIdentifier                   = 153
	MojoParserRULE_pathIdentifier                    = 154
	MojoParserRULE_identifier                        = 155
	MojoParserRULE_keywordAsIdentifierInDeclarations = 156
	MojoParserRULE_keywordAsIdentifierInLabels       = 157
	MojoParserRULE_document                          = 158
	MojoParserRULE_followingDocument                 = 159
	MojoParserRULE_assignmentOperator                = 160
	MojoParserRULE_negatePrefixOperator              = 161
	MojoParserRULE_arrowOperator                     = 162
	MojoParserRULE_rangeOperator                     = 163
	MojoParserRULE_halfOpenRangeOperator             = 164
	MojoParserRULE_binaryOperator                    = 165
	MojoParserRULE_prefixOperator                    = 166
	MojoParserRULE_postfixOperator                   = 167
	MojoParserRULE_operator                          = 168
	MojoParserRULE_operator_characters               = 169
	MojoParserRULE_operator_character                = 170
	MojoParserRULE_operator_head                     = 171
	MojoParserRULE_dot_operator_head                 = 172
	MojoParserRULE_dot_operator_character            = 173
	MojoParserRULE_literal                           = 174
	MojoParserRULE_boolLiteral                       = 175
	MojoParserRULE_nullLiteral                       = 176
	MojoParserRULE_numericLiteral                    = 177
	MojoParserRULE_integerLiteral                    = 178
	MojoParserRULE_stringLiteral                     = 179
	MojoParserRULE_eos                               = 180
	MojoParserRULE_eov                               = 181
	MojoParserRULE_eosWithDocument                   = 182
	MojoParserRULE_eovWithDocument                   = 183
)

// IMojoFileContext is an interface to support dynamic dispatch.
type IMojoFileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMojoFileContext differentiates from other interfaces.
	IsMojoFileContext()
}

type MojoFileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMojoFileContext() *MojoFileContext {
	var p = new(MojoFileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_mojoFile
	return p
}

func (*MojoFileContext) IsMojoFileContext() {}

func NewMojoFileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MojoFileContext {
	var p = new(MojoFileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_mojoFile

	return p
}

func (s *MojoFileContext) GetParser() antlr.Parser { return s.parser }

func (s *MojoFileContext) EOF() antlr.TerminalNode {
	return s.GetToken(MojoParserEOF, 0)
}

func (s *MojoFileContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MojoFileContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MojoFileContext) Statements() IStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *MojoFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MojoFileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MojoFileContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMojoFile(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MojoFile() (localctx IMojoFileContext) {
	localctx = NewMojoFileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, MojoParserRULE_mojoFile)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(371)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(368)
				p.Match(MojoParserEOL)
			}

		}
		p.SetState(373)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext())
	}
	p.SetState(375)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(374)
			p.Statements()
		}

	}
	p.SetState(380)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(377)
			p.Match(MojoParserEOL)
		}

		p.SetState(382)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(383)
		p.Match(MojoParserEOF)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *StatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StatementContext) LoopStatement() ILoopStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILoopStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *StatementContext) BranchStatement() IBranchStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBranchStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBranchStatementContext)
}

func (s *StatementContext) ControlTransferStatement() IControlTransferStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IControlTransferStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IControlTransferStatementContext)
}

func (s *StatementContext) FreeDocument() IFreeDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFreeDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFreeDocumentContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, MojoParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(391)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(385)
			p.Declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(386)
			p.Expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(387)
			p.LoopStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(388)
			p.BranchStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(389)
			p.ControlTransferStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(390)
			p.FreeDocument()
		}

	}

	return localctx
}

// IFreeDocumentContext is an interface to support dynamic dispatch.
type IFreeDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFreeDocumentContext differentiates from other interfaces.
	IsFreeDocumentContext()
}

type FreeDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFreeDocumentContext() *FreeDocumentContext {
	var p = new(FreeDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_freeDocument
	return p
}

func (*FreeDocumentContext) IsFreeDocumentContext() {}

func NewFreeDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FreeDocumentContext {
	var p = new(FreeDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_freeDocument

	return p
}

func (s *FreeDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *FreeDocumentContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *FreeDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FreeDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FreeDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFreeDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FreeDocument() (localctx IFreeDocumentContext) {
	localctx = NewFreeDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, MojoParserRULE_freeDocument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(393)
		p.Document()
	}

	return localctx
}

// IStatementsContext is an interface to support dynamic dispatch.
type IStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementsContext differentiates from other interfaces.
	IsStatementsContext()
}

type StatementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementsContext() *StatementsContext {
	var p = new(StatementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_statements
	return p
}

func (*StatementsContext) IsStatementsContext() {}

func NewStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementsContext {
	var p = new(StatementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_statements

	return p
}

func (s *StatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementsContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *StatementsContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementsContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *StatementsContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *StatementsContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MojoParserSEMI, 0)
}

func (s *StatementsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StatementsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStatements(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Statements() (localctx IStatementsContext) {
	localctx = NewStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, MojoParserRULE_statements)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(395)
		p.Statement()
	}
	p.SetState(407)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(396)
				p.Eos()
			}
			p.SetState(400)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())

			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(397)
						p.Match(MojoParserEOL)
					}

				}
				p.SetState(402)
				p.GetErrorHandler().Sync(p)
				_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext())
			}
			{
				p.SetState(403)
				p.Statement()
			}

		}
		p.SetState(409)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext())
	}
	p.SetState(411)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserSEMI {
		{
			p.SetState(410)
			p.Match(MojoParserSEMI)
		}

	}

	return localctx
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_loopStatement
	return p
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) ForInStatement() IForInStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForInStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForInStatementContext)
}

func (s *LoopStatementContext) WhileStatement() IWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLoopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LoopStatement() (localctx ILoopStatementContext) {
	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, MojoParserRULE_loopStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(415)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_FOR:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(413)
			p.ForInStatement()
		}

	case MojoParserKEYWORD_WHILE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(414)
			p.WhileStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IForInStatementContext is an interface to support dynamic dispatch.
type IForInStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForInStatementContext differentiates from other interfaces.
	IsForInStatementContext()
}

type ForInStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForInStatementContext() *ForInStatementContext {
	var p = new(ForInStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_forInStatement
	return p
}

func (*ForInStatementContext) IsForInStatementContext() {}

func NewForInStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForInStatementContext {
	var p = new(ForInStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_forInStatement

	return p
}

func (s *ForInStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForInStatementContext) KEYWORD_FOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FOR, 0)
}

func (s *ForInStatementContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *ForInStatementContext) KEYWORD_IN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IN, 0)
}

func (s *ForInStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForInStatementContext) CodeBlock() ICodeBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICodeBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *ForInStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ForInStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ForInStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForInStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForInStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitForInStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ForInStatement() (localctx IForInStatementContext) {
	localctx = NewForInStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, MojoParserRULE_forInStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(417)
		p.Match(MojoParserKEYWORD_FOR)
	}
	{
		p.SetState(418)
		p.pattern(0)
	}
	p.SetState(422)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(419)
			p.Match(MojoParserEOL)
		}

		p.SetState(424)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(425)
		p.Match(MojoParserKEYWORD_IN)
	}
	{
		p.SetState(426)
		p.Expression()
	}
	p.SetState(430)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(427)
			p.Match(MojoParserEOL)
		}

		p.SetState(432)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(433)
		p.CodeBlock()
	}

	return localctx
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) KEYWORD_WHILE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_WHILE, 0)
}

func (s *WhileStatementContext) Conditions() IConditionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *WhileStatementContext) CodeBlock() ICodeBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICodeBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *WhileStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *WhileStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) WhileStatement() (localctx IWhileStatementContext) {
	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, MojoParserRULE_whileStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(435)
		p.Match(MojoParserKEYWORD_WHILE)
	}
	{
		p.SetState(436)
		p.Conditions()
	}
	p.SetState(440)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(437)
			p.Match(MojoParserEOL)
		}

		p.SetState(442)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(443)
		p.CodeBlock()
	}

	return localctx
}

// IConditionsContext is an interface to support dynamic dispatch.
type IConditionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionsContext differentiates from other interfaces.
	IsConditionsContext()
}

type ConditionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionsContext() *ConditionsContext {
	var p = new(ConditionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_conditions
	return p
}

func (*ConditionsContext) IsConditionsContext() {}

func NewConditionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionsContext {
	var p = new(ConditionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_conditions

	return p
}

func (s *ConditionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionsContext) AllCondition() []IConditionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConditionContext)(nil)).Elem())
	var tst = make([]IConditionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConditionContext)
		}
	}

	return tst
}

func (s *ConditionsContext) Condition(i int) IConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConditionContext)
}

func (s *ConditionsContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *ConditionsContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ConditionsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ConditionsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ConditionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitConditions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Conditions() (localctx IConditionsContext) {
	localctx = NewConditionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, MojoParserRULE_conditions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(445)
		p.Condition()
	}
	p.SetState(457)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(446)
				p.Eov()
			}
			p.SetState(450)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(447)
					p.Match(MojoParserEOL)
				}

				p.SetState(452)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(453)
				p.Condition()
			}

		}
		p.SetState(459)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}

	return localctx
}

// IConditionContext is an interface to support dynamic dispatch.
type IConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionContext differentiates from other interfaces.
	IsConditionContext()
}

type ConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionContext() *ConditionContext {
	var p = new(ConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_condition
	return p
}

func (*ConditionContext) IsConditionContext() {}

func NewConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionContext {
	var p = new(ConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_condition

	return p
}

func (s *ConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionContext) OptionalBindingCondition() IOptionalBindingConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionalBindingConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionalBindingConditionContext)
}

func (s *ConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitCondition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Condition() (localctx IConditionContext) {
	localctx = NewConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, MojoParserRULE_condition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(462)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(460)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(461)
			p.OptionalBindingCondition()
		}

	}

	return localctx
}

// IOptionalBindingConditionContext is an interface to support dynamic dispatch.
type IOptionalBindingConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionalBindingConditionContext differentiates from other interfaces.
	IsOptionalBindingConditionContext()
}

type OptionalBindingConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionalBindingConditionContext() *OptionalBindingConditionContext {
	var p = new(OptionalBindingConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_optionalBindingCondition
	return p
}

func (*OptionalBindingConditionContext) IsOptionalBindingConditionContext() {}

func NewOptionalBindingConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionalBindingConditionContext {
	var p = new(OptionalBindingConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_optionalBindingCondition

	return p
}

func (s *OptionalBindingConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionalBindingConditionContext) KEYWORD_VAR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_VAR, 0)
}

func (s *OptionalBindingConditionContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *OptionalBindingConditionContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *OptionalBindingConditionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *OptionalBindingConditionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *OptionalBindingConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionalBindingConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionalBindingConditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOptionalBindingCondition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) OptionalBindingCondition() (localctx IOptionalBindingConditionContext) {
	localctx = NewOptionalBindingConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, MojoParserRULE_optionalBindingCondition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(464)
		p.Match(MojoParserKEYWORD_VAR)
	}
	{
		p.SetState(465)
		p.pattern(0)
	}
	p.SetState(469)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(466)
			p.Match(MojoParserEOL)
		}

		p.SetState(471)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(472)
		p.Initializer()
	}

	return localctx
}

// IBranchStatementContext is an interface to support dynamic dispatch.
type IBranchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBranchStatementContext differentiates from other interfaces.
	IsBranchStatementContext()
}

type BranchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBranchStatementContext() *BranchStatementContext {
	var p = new(BranchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_branchStatement
	return p
}

func (*BranchStatementContext) IsBranchStatementContext() {}

func NewBranchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BranchStatementContext {
	var p = new(BranchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_branchStatement

	return p
}

func (s *BranchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BranchStatementContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *BranchStatementContext) MatchStatement() IMatchStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchStatementContext)
}

func (s *BranchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BranchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BranchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBranchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BranchStatement() (localctx IBranchStatementContext) {
	localctx = NewBranchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, MojoParserRULE_branchStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(476)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_IF:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(474)
			p.IfStatement()
		}

	case MojoParserKEYWORD_MATCH:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(475)
			p.MatchStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) KEYWORD_IF() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IF, 0)
}

func (s *IfStatementContext) Conditions() IConditionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionsContext)
}

func (s *IfStatementContext) CodeBlock() ICodeBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICodeBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *IfStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *IfStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *IfStatementContext) ElseClause() IElseClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElseClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElseClauseContext)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) IfStatement() (localctx IIfStatementContext) {
	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, MojoParserRULE_ifStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(478)
		p.Match(MojoParserKEYWORD_IF)
	}
	{
		p.SetState(479)
		p.Conditions()
	}
	p.SetState(483)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(480)
			p.Match(MojoParserEOL)
		}

		p.SetState(485)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(486)
		p.CodeBlock()
	}
	p.SetState(490)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(487)
				p.Match(MojoParserEOL)
			}

		}
		p.SetState(492)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext())
	}
	p.SetState(494)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_ELSE {
		{
			p.SetState(493)
			p.ElseClause()
		}

	}

	return localctx
}

// IElseClauseContext is an interface to support dynamic dispatch.
type IElseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElseClauseContext differentiates from other interfaces.
	IsElseClauseContext()
}

type ElseClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElseClauseContext() *ElseClauseContext {
	var p = new(ElseClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_elseClause
	return p
}

func (*ElseClauseContext) IsElseClauseContext() {}

func NewElseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElseClauseContext {
	var p = new(ElseClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_elseClause

	return p
}

func (s *ElseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ElseClauseContext) KEYWORD_ELSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ELSE, 0)
}

func (s *ElseClauseContext) CodeBlock() ICodeBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICodeBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *ElseClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ElseClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ElseClauseContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *ElseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElseClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitElseClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ElseClause() (localctx IElseClauseContext) {
	localctx = NewElseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, MojoParserRULE_elseClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(512)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(496)
			p.Match(MojoParserKEYWORD_ELSE)
		}
		p.SetState(500)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(497)
				p.Match(MojoParserEOL)
			}

			p.SetState(502)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(503)
			p.CodeBlock()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(504)
			p.Match(MojoParserKEYWORD_ELSE)
		}
		p.SetState(508)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(505)
				p.Match(MojoParserEOL)
			}

			p.SetState(510)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(511)
			p.IfStatement()
		}

	}

	return localctx
}

// IMatchStatementContext is an interface to support dynamic dispatch.
type IMatchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchStatementContext differentiates from other interfaces.
	IsMatchStatementContext()
}

type MatchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchStatementContext() *MatchStatementContext {
	var p = new(MatchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_matchStatement
	return p
}

func (*MatchStatementContext) IsMatchStatementContext() {}

func NewMatchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchStatementContext {
	var p = new(MatchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_matchStatement

	return p
}

func (s *MatchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchStatementContext) KEYWORD_MATCH() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_MATCH, 0)
}

func (s *MatchStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MatchStatementContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *MatchStatementContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *MatchStatementContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MatchStatementContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MatchStatementContext) MatchCases() IMatchCasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchCasesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMatchCasesContext)
}

func (s *MatchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMatchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MatchStatement() (localctx IMatchStatementContext) {
	localctx = NewMatchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, MojoParserRULE_matchStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(514)
		p.Match(MojoParserKEYWORD_MATCH)
	}
	{
		p.SetState(515)
		p.Expression()
	}
	p.SetState(519)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(516)
			p.Match(MojoParserEOL)
		}

		p.SetState(521)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(522)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(530)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
		p.SetState(526)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(523)
				p.Match(MojoParserEOL)
			}

			p.SetState(528)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(529)
			p.MatchCases()
		}

	}
	p.SetState(535)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(532)
			p.Match(MojoParserEOL)
		}

		p.SetState(537)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(538)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IMatchCasesContext is an interface to support dynamic dispatch.
type IMatchCasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchCasesContext differentiates from other interfaces.
	IsMatchCasesContext()
}

type MatchCasesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchCasesContext() *MatchCasesContext {
	var p = new(MatchCasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_matchCases
	return p
}

func (*MatchCasesContext) IsMatchCasesContext() {}

func NewMatchCasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchCasesContext {
	var p = new(MatchCasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_matchCases

	return p
}

func (s *MatchCasesContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchCasesContext) AllMatchCase() []IMatchCaseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMatchCaseContext)(nil)).Elem())
	var tst = make([]IMatchCaseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMatchCaseContext)
		}
	}

	return tst
}

func (s *MatchCasesContext) MatchCase(i int) IMatchCaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMatchCaseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMatchCaseContext)
}

func (s *MatchCasesContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *MatchCasesContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *MatchCasesContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MatchCasesContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MatchCasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchCasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchCasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMatchCases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MatchCases() (localctx IMatchCasesContext) {
	localctx = NewMatchCasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, MojoParserRULE_matchCases)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(540)
		p.MatchCase()
	}
	p.SetState(552)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(541)
				p.Eos()
			}
			p.SetState(545)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(542)
					p.Match(MojoParserEOL)
				}

				p.SetState(547)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(548)
				p.MatchCase()
			}

		}
		p.SetState(554)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext())
	}
	{
		p.SetState(555)
		p.Eos()
	}

	return localctx
}

// IMatchCaseContext is an interface to support dynamic dispatch.
type IMatchCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMatchCaseContext differentiates from other interfaces.
	IsMatchCaseContext()
}

type MatchCaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMatchCaseContext() *MatchCaseContext {
	var p = new(MatchCaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_matchCase
	return p
}

func (*MatchCaseContext) IsMatchCaseContext() {}

func NewMatchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MatchCaseContext {
	var p = new(MatchCaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_matchCase

	return p
}

func (s *MatchCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *MatchCaseContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *MatchCaseContext) RIGHT_RIGHT_ARROWS() antlr.TerminalNode {
	return s.GetToken(MojoParserRIGHT_RIGHT_ARROWS, 0)
}

func (s *MatchCaseContext) CodeBlock() ICodeBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICodeBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICodeBlockContext)
}

func (s *MatchCaseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MatchCaseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MatchCaseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MatchCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MatchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MatchCaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMatchCase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MatchCase() (localctx IMatchCaseContext) {
	localctx = NewMatchCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, MojoParserRULE_matchCase)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(557)
		p.pattern(0)
	}
	p.SetState(561)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(558)
			p.Match(MojoParserEOL)
		}

		p.SetState(563)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(564)
		p.Match(MojoParserRIGHT_RIGHT_ARROWS)
	}
	p.SetState(568)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(565)
			p.Match(MojoParserEOL)
		}

		p.SetState(570)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(573)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(571)
			p.CodeBlock()
		}

	case 2:
		{
			p.SetState(572)
			p.Expression()
		}

	}

	return localctx
}

// IControlTransferStatementContext is an interface to support dynamic dispatch.
type IControlTransferStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsControlTransferStatementContext differentiates from other interfaces.
	IsControlTransferStatementContext()
}

type ControlTransferStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyControlTransferStatementContext() *ControlTransferStatementContext {
	var p = new(ControlTransferStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_controlTransferStatement
	return p
}

func (*ControlTransferStatementContext) IsControlTransferStatementContext() {}

func NewControlTransferStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ControlTransferStatementContext {
	var p = new(ControlTransferStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_controlTransferStatement

	return p
}

func (s *ControlTransferStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ControlTransferStatementContext) BreakStatement() IBreakStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *ControlTransferStatementContext) ContinueStatement() IContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *ControlTransferStatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *ControlTransferStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ControlTransferStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ControlTransferStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitControlTransferStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ControlTransferStatement() (localctx IControlTransferStatementContext) {
	localctx = NewControlTransferStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, MojoParserRULE_controlTransferStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(578)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_BREAK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(575)
			p.BreakStatement()
		}

	case MojoParserKEYWORD_CONTINUE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(576)
			p.ContinueStatement()
		}

	case MojoParserKEYWORD_RETURN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(577)
			p.ReturnStatement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_breakStatement
	return p
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) KEYWORD_BREAK() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_BREAK, 0)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BreakStatement() (localctx IBreakStatementContext) {
	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, MojoParserRULE_breakStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(580)
		p.Match(MojoParserKEYWORD_BREAK)
	}

	return localctx
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_continueStatement
	return p
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) KEYWORD_CONTINUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONTINUE, 0)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ContinueStatement() (localctx IContinueStatementContext) {
	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, MojoParserRULE_continueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(582)
		p.Match(MojoParserKEYWORD_CONTINUE)
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) KEYWORD_RETURN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_RETURN, 0)
}

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, MojoParserRULE_returnStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(584)
		p.Match(MojoParserKEYWORD_RETURN)
	}
	p.SetState(586)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MojoParserKEYWORD_AND)|(1<<MojoParserKEYWORD_AS)|(1<<MojoParserKEYWORD_ATTRIBUTE)|(1<<MojoParserKEYWORD_BREAK)|(1<<MojoParserKEYWORD_CONST)|(1<<MojoParserKEYWORD_ENUM)|(1<<MojoParserKEYWORD_FALSE)|(1<<MojoParserKEYWORD_FUNC)|(1<<MojoParserKEYWORD_IF)|(1<<MojoParserKEYWORD_IMPORT)|(1<<MojoParserKEYWORD_IN)|(1<<MojoParserKEYWORD_INTERFACE)|(1<<MojoParserKEYWORD_IS)|(1<<MojoParserKEYWORD_MATCH)|(1<<MojoParserKEYWORD_NOT)|(1<<MojoParserKEYWORD_NULL)|(1<<MojoParserKEYWORD_PACKAGE)|(1<<MojoParserKEYWORD_REPEATE)|(1<<MojoParserKEYWORD_RETURN)|(1<<MojoParserKEYWORD_STRUCT)|(1<<MojoParserKEYWORD_TRUE)|(1<<MojoParserKEYWORD_TYPE)|(1<<MojoParserKEYWORD_VAR)|(1<<MojoParserKEYWORD_XOR)|(1<<MojoParserDOT)|(1<<MojoParserLCURLY))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MojoParserLPAREN-32))|(1<<(MojoParserLBRACK-32))|(1<<(MojoParserLT-32))|(1<<(MojoParserGT-32))|(1<<(MojoParserBANG-32))|(1<<(MojoParserQUESTION-32))|(1<<(MojoParserAND-32))|(1<<(MojoParserMINUS-32))|(1<<(MojoParserEQUAL-32))|(1<<(MojoParserPIPE-32))|(1<<(MojoParserSLASH-32))|(1<<(MojoParserPLUS-32))|(1<<(MojoParserSTAR-32))|(1<<(MojoParserPERCENT-32))|(1<<(MojoParserCARET-32))|(1<<(MojoParserTILDE-32))|(1<<(MojoParserUNDERSCORE-32)))) != 0) || (((_la-73)&-(0x1f+1)) == 0 && ((1<<uint((_la-73)))&((1<<(MojoParserTYPE_IDENTIFIER-73))|(1<<(MojoParserVALUE_IDENTIFIER-73))|(1<<(MojoParserOPERATOR_HEAD_OTHER-73))|(1<<(MojoParserBINARY_LITERAL-73))|(1<<(MojoParserOCTAL_LITERAL-73))|(1<<(MojoParserDECIMAL_LITERAL-73))|(1<<(MojoParserPURE_DECIMAL_DIGITS-73))|(1<<(MojoParserHEXADECIMAL_LITERAL-73))|(1<<(MojoParserFLOAT_LITERAL-73))|(1<<(MojoParserSTATIC_STRING_LITERAL-73))|(1<<(MojoParserINTERPOLATED_STRING_LITERAL-73)))) != 0) {
		{
			p.SetState(585)
			p.Expression()
		}

	}

	return localctx
}

// IGenericParameterClauseContext is an interface to support dynamic dispatch.
type IGenericParameterClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericParameterClauseContext differentiates from other interfaces.
	IsGenericParameterClauseContext()
}

type GenericParameterClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericParameterClauseContext() *GenericParameterClauseContext {
	var p = new(GenericParameterClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericParameterClause
	return p
}

func (*GenericParameterClauseContext) IsGenericParameterClauseContext() {}

func NewGenericParameterClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParameterClauseContext {
	var p = new(GenericParameterClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericParameterClause

	return p
}

func (s *GenericParameterClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParameterClauseContext) LT() antlr.TerminalNode {
	return s.GetToken(MojoParserLT, 0)
}

func (s *GenericParameterClauseContext) GenericParameters() IGenericParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParametersContext)
}

func (s *GenericParameterClauseContext) GT() antlr.TerminalNode {
	return s.GetToken(MojoParserGT, 0)
}

func (s *GenericParameterClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericParameterClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericParameterClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParameterClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParameterClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericParameterClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericParameterClause() (localctx IGenericParameterClauseContext) {
	localctx = NewGenericParameterClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, MojoParserRULE_genericParameterClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(588)
		p.Match(MojoParserLT)
	}
	p.SetState(592)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(589)
			p.Match(MojoParserEOL)
		}

		p.SetState(594)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(595)
		p.GenericParameters()
	}
	p.SetState(599)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(596)
			p.Match(MojoParserEOL)
		}

		p.SetState(601)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(602)
		p.Match(MojoParserGT)
	}

	return localctx
}

// IGenericParametersContext is an interface to support dynamic dispatch.
type IGenericParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericParametersContext differentiates from other interfaces.
	IsGenericParametersContext()
}

type GenericParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericParametersContext() *GenericParametersContext {
	var p = new(GenericParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericParameters
	return p
}

func (*GenericParametersContext) IsGenericParametersContext() {}

func NewGenericParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParametersContext {
	var p = new(GenericParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericParameters

	return p
}

func (s *GenericParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParametersContext) AllGenericParameter() []IGenericParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGenericParameterContext)(nil)).Elem())
	var tst = make([]IGenericParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGenericParameterContext)
		}
	}

	return tst
}

func (s *GenericParametersContext) GenericParameter(i int) IGenericParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterContext)
}

func (s *GenericParametersContext) AllEovWithDocument() []IEovWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem())
	var tst = make([]IEovWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovWithDocumentContext)
		}
	}

	return tst
}

func (s *GenericParametersContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *GenericParametersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericParametersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericParameters() (localctx IGenericParametersContext) {
	localctx = NewGenericParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, MojoParserRULE_genericParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(604)
		p.GenericParameter()
	}
	p.SetState(616)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(605)
				p.EovWithDocument()
			}
			p.SetState(609)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(606)
					p.Match(MojoParserEOL)
				}

				p.SetState(611)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(612)
				p.GenericParameter()
			}

		}
		p.SetState(618)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext())
	}
	p.SetState(620)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(619)
			p.EovWithDocument()
		}

	}

	return localctx
}

// IGenericParameterContext is an interface to support dynamic dispatch.
type IGenericParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericParameterContext differentiates from other interfaces.
	IsGenericParameterContext()
}

type GenericParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericParameterContext() *GenericParameterContext {
	var p = new(GenericParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericParameter
	return p
}

func (*GenericParameterContext) IsGenericParameterContext() {}

func NewGenericParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParameterContext {
	var p = new(GenericParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericParameter

	return p
}

func (s *GenericParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *GenericParameterContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(MojoParserELLIPSIS, 0)
}

func (s *GenericParameterContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *GenericParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericParameter() (localctx IGenericParameterContext) {
	localctx = NewGenericParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, MojoParserRULE_genericParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(629)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(622)
			p.TypeName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(623)
			p.TypeName()
		}
		{
			p.SetState(624)
			p.Match(MojoParserELLIPSIS)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(626)
			p.TypeName()
		}
		{
			p.SetState(627)
			p.TypeAnnotation()
		}

	}

	return localctx
}

// IGenericArgumentClauseContext is an interface to support dynamic dispatch.
type IGenericArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericArgumentClauseContext differentiates from other interfaces.
	IsGenericArgumentClauseContext()
}

type GenericArgumentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericArgumentClauseContext() *GenericArgumentClauseContext {
	var p = new(GenericArgumentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericArgumentClause
	return p
}

func (*GenericArgumentClauseContext) IsGenericArgumentClauseContext() {}

func NewGenericArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericArgumentClauseContext {
	var p = new(GenericArgumentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericArgumentClause

	return p
}

func (s *GenericArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericArgumentClauseContext) LT() antlr.TerminalNode {
	return s.GetToken(MojoParserLT, 0)
}

func (s *GenericArgumentClauseContext) GenericArguments() IGenericArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentsContext)
}

func (s *GenericArgumentClauseContext) GT() antlr.TerminalNode {
	return s.GetToken(MojoParserGT, 0)
}

func (s *GenericArgumentClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericArgumentClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericArgumentClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericArgumentClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericArgumentClause() (localctx IGenericArgumentClauseContext) {
	localctx = NewGenericArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, MojoParserRULE_genericArgumentClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(631)
		p.Match(MojoParserLT)
	}
	p.SetState(635)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(632)
			p.Match(MojoParserEOL)
		}

		p.SetState(637)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(638)
		p.GenericArguments()
	}
	p.SetState(642)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(639)
			p.Match(MojoParserEOL)
		}

		p.SetState(644)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(645)
		p.Match(MojoParserGT)
	}

	return localctx
}

// IGenericArgumentsContext is an interface to support dynamic dispatch.
type IGenericArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericArgumentsContext differentiates from other interfaces.
	IsGenericArgumentsContext()
}

type GenericArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericArgumentsContext() *GenericArgumentsContext {
	var p = new(GenericArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericArguments
	return p
}

func (*GenericArgumentsContext) IsGenericArgumentsContext() {}

func NewGenericArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericArgumentsContext {
	var p = new(GenericArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericArguments

	return p
}

func (s *GenericArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericArgumentsContext) AllGenericArgument() []IGenericArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGenericArgumentContext)(nil)).Elem())
	var tst = make([]IGenericArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGenericArgumentContext)
		}
	}

	return tst
}

func (s *GenericArgumentsContext) GenericArgument(i int) IGenericArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentContext)
}

func (s *GenericArgumentsContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *GenericArgumentsContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *GenericArgumentsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *GenericArgumentsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *GenericArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericArguments() (localctx IGenericArgumentsContext) {
	localctx = NewGenericArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, MojoParserRULE_genericArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(647)
		p.GenericArgument()
	}
	p.SetState(659)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(648)
				p.Eov()
			}
			p.SetState(652)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(649)
					p.Match(MojoParserEOL)
				}

				p.SetState(654)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(655)
				p.GenericArgument()
			}

		}
		p.SetState(661)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext())
	}

	return localctx
}

// IGenericArgumentContext is an interface to support dynamic dispatch.
type IGenericArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGenericArgumentContext differentiates from other interfaces.
	IsGenericArgumentContext()
}

type GenericArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericArgumentContext() *GenericArgumentContext {
	var p = new(GenericArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_genericArgument
	return p
}

func (*GenericArgumentContext) IsGenericArgumentContext() {}

func NewGenericArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericArgumentContext {
	var p = new(GenericArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_genericArgument

	return p
}

func (s *GenericArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericArgumentContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *GenericArgumentContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *GenericArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitGenericArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) GenericArgument() (localctx IGenericArgumentContext) {
	localctx = NewGenericArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, MojoParserRULE_genericArgument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(662)
		p.type_(0)
	}
	p.SetState(664)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(663)
			p.Attributes()
		}

	}

	return localctx
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) PackageDeclaration() IPackageDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageDeclarationContext)
}

func (s *DeclarationContext) ImportDeclaration() IImportDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportDeclarationContext)
}

func (s *DeclarationContext) ConstantDeclaration() IConstantDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantDeclarationContext)
}

func (s *DeclarationContext) VariableDeclaration() IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *DeclarationContext) TypeAliasDeclaration() ITypeAliasDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasDeclarationContext)
}

func (s *DeclarationContext) FunctionDeclaration() IFunctionDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclarationContext)
}

func (s *DeclarationContext) EnumDeclaration() IEnumDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumDeclarationContext)
}

func (s *DeclarationContext) StructDeclaration() IStructDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDeclarationContext)
}

func (s *DeclarationContext) InterfaceDeclaration() IInterfaceDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceDeclarationContext)
}

func (s *DeclarationContext) AttributeDeclaration() IAttributeDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeDeclarationContext)
}

func (s *DeclarationContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *DeclarationContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *DeclarationContext) EOL() antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, 0)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, MojoParserRULE_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(667)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(666)
			p.Document()
		}

	}
	p.SetState(672)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(669)
			p.Attributes()
		}
		{
			p.SetState(670)
			p.Match(MojoParserEOL)
		}

	}
	p.SetState(684)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(674)
			p.PackageDeclaration()
		}

	case 2:
		{
			p.SetState(675)
			p.ImportDeclaration()
		}

	case 3:
		{
			p.SetState(676)
			p.ConstantDeclaration()
		}

	case 4:
		{
			p.SetState(677)
			p.VariableDeclaration()
		}

	case 5:
		{
			p.SetState(678)
			p.TypeAliasDeclaration()
		}

	case 6:
		{
			p.SetState(679)
			p.FunctionDeclaration()
		}

	case 7:
		{
			p.SetState(680)
			p.EnumDeclaration()
		}

	case 8:
		{
			p.SetState(681)
			p.StructDeclaration()
		}

	case 9:
		{
			p.SetState(682)
			p.InterfaceDeclaration()
		}

	case 10:
		{
			p.SetState(683)
			p.AttributeDeclaration()
		}

	}

	return localctx
}

// ICodeBlockContext is an interface to support dynamic dispatch.
type ICodeBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCodeBlockContext differentiates from other interfaces.
	IsCodeBlockContext()
}

type CodeBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCodeBlockContext() *CodeBlockContext {
	var p = new(CodeBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_codeBlock
	return p
}

func (*CodeBlockContext) IsCodeBlockContext() {}

func NewCodeBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CodeBlockContext {
	var p = new(CodeBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_codeBlock

	return p
}

func (s *CodeBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *CodeBlockContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *CodeBlockContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *CodeBlockContext) Statements() IStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *CodeBlockContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *CodeBlockContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *CodeBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CodeBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CodeBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitCodeBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) CodeBlock() (localctx ICodeBlockContext) {
	localctx = NewCodeBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, MojoParserRULE_codeBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(686)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(694)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) == 1 {
		p.SetState(690)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(687)
					p.Match(MojoParserEOL)
				}

			}
			p.SetState(692)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext())
		}
		{
			p.SetState(693)
			p.Statements()
		}

	}
	p.SetState(699)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(696)
			p.Match(MojoParserEOL)
		}

		p.SetState(701)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(702)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IPackageDeclarationContext is an interface to support dynamic dispatch.
type IPackageDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageDeclarationContext differentiates from other interfaces.
	IsPackageDeclarationContext()
}

type PackageDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageDeclarationContext() *PackageDeclarationContext {
	var p = new(PackageDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_packageDeclaration
	return p
}

func (*PackageDeclarationContext) IsPackageDeclarationContext() {}

func NewPackageDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageDeclarationContext {
	var p = new(PackageDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_packageDeclaration

	return p
}

func (s *PackageDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageDeclarationContext) KEYWORD_PACKAGE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_PACKAGE, 0)
}

func (s *PackageDeclarationContext) PackageIdentifier() IPackageIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageIdentifierContext)
}

func (s *PackageDeclarationContext) ObjectLiteral() IObjectLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *PackageDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *PackageDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *PackageDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPackageDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PackageDeclaration() (localctx IPackageDeclarationContext) {
	localctx = NewPackageDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, MojoParserRULE_packageDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(704)
		p.Match(MojoParserKEYWORD_PACKAGE)
	}
	{
		p.SetState(705)
		p.PackageIdentifier()
	}
	p.SetState(713)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) == 1 {
		p.SetState(709)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(706)
				p.Match(MojoParserEOL)
			}

			p.SetState(711)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(712)
			p.ObjectLiteral()
		}

	}

	return localctx
}

// IPackageIdentifierContext is an interface to support dynamic dispatch.
type IPackageIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageIdentifierContext differentiates from other interfaces.
	IsPackageIdentifierContext()
}

type PackageIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageIdentifierContext() *PackageIdentifierContext {
	var p = new(PackageIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_packageIdentifier
	return p
}

func (*PackageIdentifierContext) IsPackageIdentifierContext() {}

func NewPackageIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageIdentifierContext {
	var p = new(PackageIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_packageIdentifier

	return p
}

func (s *PackageIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageIdentifierContext) AllPackageName() []IPackageNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPackageNameContext)(nil)).Elem())
	var tst = make([]IPackageNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPackageNameContext)
		}
	}

	return tst
}

func (s *PackageIdentifierContext) PackageName(i int) IPackageNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPackageNameContext)
}

func (s *PackageIdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *PackageIdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *PackageIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPackageIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PackageIdentifier() (localctx IPackageIdentifierContext) {
	localctx = NewPackageIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, MojoParserRULE_packageIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(715)
		p.PackageName()
	}
	p.SetState(720)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(716)
				p.Match(MojoParserDOT)
			}
			{
				p.SetState(717)
				p.PackageName()
			}

		}
		p.SetState(722)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext())
	}

	return localctx
}

// IPackageNameContext is an interface to support dynamic dispatch.
type IPackageNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageNameContext differentiates from other interfaces.
	IsPackageNameContext()
}

type PackageNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageNameContext() *PackageNameContext {
	var p = new(PackageNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_packageName
	return p
}

func (*PackageNameContext) IsPackageNameContext() {}

func NewPackageNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageNameContext {
	var p = new(PackageNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_packageName

	return p
}

func (s *PackageNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageNameContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *PackageNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPackageName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PackageName() (localctx IPackageNameContext) {
	localctx = NewPackageNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, MojoParserRULE_packageName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(723)
		p.Match(MojoParserVALUE_IDENTIFIER)
	}

	return localctx
}

// IImportDeclarationContext is an interface to support dynamic dispatch.
type IImportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportDeclarationContext differentiates from other interfaces.
	IsImportDeclarationContext()
}

type ImportDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclarationContext() *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importDeclaration
	return p
}

func (*ImportDeclarationContext) IsImportDeclarationContext() {}

func NewImportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importDeclaration

	return p
}

func (s *ImportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclarationContext) KEYWORD_IMPORT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IMPORT, 0)
}

func (s *ImportDeclarationContext) ImportPath() IImportPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportPathContext)
}

func (s *ImportDeclarationContext) ImportAllClause() IImportAllClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportAllClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportAllClauseContext)
}

func (s *ImportDeclarationContext) ImportValueAsClause() IImportValueAsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportValueAsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportValueAsClauseContext)
}

func (s *ImportDeclarationContext) ImportTypeClause() IImportTypeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportTypeClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportTypeClauseContext)
}

func (s *ImportDeclarationContext) ImportGroupClause() IImportGroupClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportGroupClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportGroupClauseContext)
}

func (s *ImportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportDeclaration() (localctx IImportDeclarationContext) {
	localctx = NewImportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, MojoParserRULE_importDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(725)
		p.Match(MojoParserKEYWORD_IMPORT)
	}
	{
		p.SetState(726)
		p.ImportPath()
	}
	p.SetState(731)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(727)
			p.ImportAllClause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(728)
			p.ImportValueAsClause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(729)
			p.ImportTypeClause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) == 4 {
		{
			p.SetState(730)
			p.ImportGroupClause()
		}

	}

	return localctx
}

// IImportPathContext is an interface to support dynamic dispatch.
type IImportPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportPathContext differentiates from other interfaces.
	IsImportPathContext()
}

type ImportPathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportPathContext() *ImportPathContext {
	var p = new(ImportPathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importPath
	return p
}

func (*ImportPathContext) IsImportPathContext() {}

func NewImportPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportPathContext {
	var p = new(ImportPathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importPath

	return p
}

func (s *ImportPathContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportPathContext) AllImportPathIdentifier() []IImportPathIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportPathIdentifierContext)(nil)).Elem())
	var tst = make([]IImportPathIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportPathIdentifierContext)
		}
	}

	return tst
}

func (s *ImportPathContext) ImportPathIdentifier(i int) IImportPathIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportPathIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportPathIdentifierContext)
}

func (s *ImportPathContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *ImportPathContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *ImportPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportPathContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportPath(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportPath() (localctx IImportPathContext) {
	localctx = NewImportPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, MojoParserRULE_importPath)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(733)
		p.ImportPathIdentifier()
	}
	p.SetState(738)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(734)
				p.Match(MojoParserDOT)
			}
			{
				p.SetState(735)
				p.ImportPathIdentifier()
			}

		}
		p.SetState(740)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext())
	}

	return localctx
}

// IImportPathIdentifierContext is an interface to support dynamic dispatch.
type IImportPathIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportPathIdentifierContext differentiates from other interfaces.
	IsImportPathIdentifierContext()
}

type ImportPathIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportPathIdentifierContext() *ImportPathIdentifierContext {
	var p = new(ImportPathIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importPathIdentifier
	return p
}

func (*ImportPathIdentifierContext) IsImportPathIdentifierContext() {}

func NewImportPathIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportPathIdentifierContext {
	var p = new(ImportPathIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importPathIdentifier

	return p
}

func (s *ImportPathIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportPathIdentifierContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *ImportPathIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportPathIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportPathIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportPathIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportPathIdentifier() (localctx IImportPathIdentifierContext) {
	localctx = NewImportPathIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, MojoParserRULE_importPathIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(741)
		p.DeclarationIdentifier()
	}

	return localctx
}

// IImportAllClauseContext is an interface to support dynamic dispatch.
type IImportAllClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportAllClauseContext differentiates from other interfaces.
	IsImportAllClauseContext()
}

type ImportAllClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportAllClauseContext() *ImportAllClauseContext {
	var p = new(ImportAllClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importAllClause
	return p
}

func (*ImportAllClauseContext) IsImportAllClauseContext() {}

func NewImportAllClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportAllClauseContext {
	var p = new(ImportAllClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importAllClause

	return p
}

func (s *ImportAllClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportAllClauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImportAllClauseContext) STAR() antlr.TerminalNode {
	return s.GetToken(MojoParserSTAR, 0)
}

func (s *ImportAllClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportAllClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportAllClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportAllClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportAllClause() (localctx IImportAllClauseContext) {
	localctx = NewImportAllClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, MojoParserRULE_importAllClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(743)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(744)
		p.Match(MojoParserSTAR)
	}

	return localctx
}

// IImportValueAsClauseContext is an interface to support dynamic dispatch.
type IImportValueAsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportValueAsClauseContext differentiates from other interfaces.
	IsImportValueAsClauseContext()
}

type ImportValueAsClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportValueAsClauseContext() *ImportValueAsClauseContext {
	var p = new(ImportValueAsClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importValueAsClause
	return p
}

func (*ImportValueAsClauseContext) IsImportValueAsClauseContext() {}

func NewImportValueAsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportValueAsClauseContext {
	var p = new(ImportValueAsClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importValueAsClause

	return p
}

func (s *ImportValueAsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportValueAsClauseContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *ImportValueAsClauseContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *ImportValueAsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportValueAsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportValueAsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportValueAsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportValueAsClause() (localctx IImportValueAsClauseContext) {
	localctx = NewImportValueAsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, MojoParserRULE_importValueAsClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(746)
		p.Match(MojoParserKEYWORD_AS)
	}
	{
		p.SetState(747)
		p.DeclarationIdentifier()
	}

	return localctx
}

// IImportTypeClauseContext is an interface to support dynamic dispatch.
type IImportTypeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportTypeClauseContext differentiates from other interfaces.
	IsImportTypeClauseContext()
}

type ImportTypeClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportTypeClauseContext() *ImportTypeClauseContext {
	var p = new(ImportTypeClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importTypeClause
	return p
}

func (*ImportTypeClauseContext) IsImportTypeClauseContext() {}

func NewImportTypeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportTypeClauseContext {
	var p = new(ImportTypeClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importTypeClause

	return p
}

func (s *ImportTypeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportTypeClauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImportTypeClauseContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ImportTypeClauseContext) ImportTypeAsClause() IImportTypeAsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportTypeAsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportTypeAsClauseContext)
}

func (s *ImportTypeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportTypeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportTypeClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportTypeClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportTypeClause() (localctx IImportTypeClauseContext) {
	localctx = NewImportTypeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, MojoParserRULE_importTypeClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(749)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(750)
		p.TypeName()
	}
	p.SetState(752)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_AS {
		{
			p.SetState(751)
			p.ImportTypeAsClause()
		}

	}

	return localctx
}

// IImportTypeAsClauseContext is an interface to support dynamic dispatch.
type IImportTypeAsClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportTypeAsClauseContext differentiates from other interfaces.
	IsImportTypeAsClauseContext()
}

type ImportTypeAsClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportTypeAsClauseContext() *ImportTypeAsClauseContext {
	var p = new(ImportTypeAsClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importTypeAsClause
	return p
}

func (*ImportTypeAsClauseContext) IsImportTypeAsClauseContext() {}

func NewImportTypeAsClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportTypeAsClauseContext {
	var p = new(ImportTypeAsClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importTypeAsClause

	return p
}

func (s *ImportTypeAsClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportTypeAsClauseContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *ImportTypeAsClauseContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ImportTypeAsClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportTypeAsClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportTypeAsClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportTypeAsClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportTypeAsClause() (localctx IImportTypeAsClauseContext) {
	localctx = NewImportTypeAsClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, MojoParserRULE_importTypeAsClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(754)
		p.Match(MojoParserKEYWORD_AS)
	}
	{
		p.SetState(755)
		p.TypeName()
	}

	return localctx
}

// IImportGroupClauseContext is an interface to support dynamic dispatch.
type IImportGroupClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportGroupClauseContext differentiates from other interfaces.
	IsImportGroupClauseContext()
}

type ImportGroupClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportGroupClauseContext() *ImportGroupClauseContext {
	var p = new(ImportGroupClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importGroupClause
	return p
}

func (*ImportGroupClauseContext) IsImportGroupClauseContext() {}

func NewImportGroupClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportGroupClauseContext {
	var p = new(ImportGroupClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importGroupClause

	return p
}

func (s *ImportGroupClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportGroupClauseContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImportGroupClauseContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *ImportGroupClauseContext) ImportGroup() IImportGroupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportGroupContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportGroupContext)
}

func (s *ImportGroupClauseContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *ImportGroupClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ImportGroupClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ImportGroupClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportGroupClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportGroupClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportGroupClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportGroupClause() (localctx IImportGroupClauseContext) {
	localctx = NewImportGroupClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, MojoParserRULE_importGroupClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(757)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(758)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(762)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(759)
			p.Match(MojoParserEOL)
		}

		p.SetState(764)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(765)
		p.ImportGroup()
	}
	p.SetState(769)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(766)
			p.Match(MojoParserEOL)
		}

		p.SetState(771)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(772)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IImportGroupContext is an interface to support dynamic dispatch.
type IImportGroupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportGroupContext differentiates from other interfaces.
	IsImportGroupContext()
}

type ImportGroupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportGroupContext() *ImportGroupContext {
	var p = new(ImportGroupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importGroup
	return p
}

func (*ImportGroupContext) IsImportGroupContext() {}

func NewImportGroupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportGroupContext {
	var p = new(ImportGroupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importGroup

	return p
}

func (s *ImportGroupContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportGroupContext) AllImportValue() []IImportValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportValueContext)(nil)).Elem())
	var tst = make([]IImportValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportValueContext)
		}
	}

	return tst
}

func (s *ImportGroupContext) ImportValue(i int) IImportValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportValueContext)
}

func (s *ImportGroupContext) AllImportType() []IImportTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportTypeContext)(nil)).Elem())
	var tst = make([]IImportTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportTypeContext)
		}
	}

	return tst
}

func (s *ImportGroupContext) ImportType(i int) IImportTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportTypeContext)
}

func (s *ImportGroupContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *ImportGroupContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ImportGroupContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ImportGroupContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ImportGroupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportGroupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportGroupContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportGroup(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportGroup() (localctx IImportGroupContext) {
	localctx = NewImportGroupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, MojoParserRULE_importGroup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(776)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_XOR, MojoParserVALUE_IDENTIFIER:
		{
			p.SetState(774)
			p.ImportValue()
		}

	case MojoParserTYPE_IDENTIFIER:
		{
			p.SetState(775)
			p.ImportType()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(791)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(778)
				p.Eov()
			}
			p.SetState(782)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(779)
					p.Match(MojoParserEOL)
				}

				p.SetState(784)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(787)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_XOR, MojoParserVALUE_IDENTIFIER:
				{
					p.SetState(785)
					p.ImportValue()
				}

			case MojoParserTYPE_IDENTIFIER:
				{
					p.SetState(786)
					p.ImportType()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(793)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext())
	}
	p.SetState(795)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(794)
			p.Eov()
		}

	}

	return localctx
}

// IImportValueContext is an interface to support dynamic dispatch.
type IImportValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportValueContext differentiates from other interfaces.
	IsImportValueContext()
}

type ImportValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportValueContext() *ImportValueContext {
	var p = new(ImportValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importValue
	return p
}

func (*ImportValueContext) IsImportValueContext() {}

func NewImportValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportValueContext {
	var p = new(ImportValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importValue

	return p
}

func (s *ImportValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportValueContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *ImportValueContext) ImportValueAsClause() IImportValueAsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportValueAsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportValueAsClauseContext)
}

func (s *ImportValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportValue() (localctx IImportValueContext) {
	localctx = NewImportValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, MojoParserRULE_importValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(797)
		p.DeclarationIdentifier()
	}
	p.SetState(799)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_AS {
		{
			p.SetState(798)
			p.ImportValueAsClause()
		}

	}

	return localctx
}

// IImportTypeContext is an interface to support dynamic dispatch.
type IImportTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportTypeContext differentiates from other interfaces.
	IsImportTypeContext()
}

type ImportTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportTypeContext() *ImportTypeContext {
	var p = new(ImportTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_importType
	return p
}

func (*ImportTypeContext) IsImportTypeContext() {}

func NewImportTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportTypeContext {
	var p = new(ImportTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_importType

	return p
}

func (s *ImportTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportTypeContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ImportTypeContext) ImportTypeAsClause() IImportTypeAsClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportTypeAsClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportTypeAsClauseContext)
}

func (s *ImportTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImportType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImportType() (localctx IImportTypeContext) {
	localctx = NewImportTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, MojoParserRULE_importType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(801)
		p.TypeName()
	}
	p.SetState(803)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserKEYWORD_AS {
		{
			p.SetState(802)
			p.ImportTypeAsClause()
		}

	}

	return localctx
}

// IConstantDeclarationContext is an interface to support dynamic dispatch.
type IConstantDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstantDeclarationContext differentiates from other interfaces.
	IsConstantDeclarationContext()
}

type ConstantDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantDeclarationContext() *ConstantDeclarationContext {
	var p = new(ConstantDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_constantDeclaration
	return p
}

func (*ConstantDeclarationContext) IsConstantDeclarationContext() {}

func NewConstantDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantDeclarationContext {
	var p = new(ConstantDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_constantDeclaration

	return p
}

func (s *ConstantDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantDeclarationContext) KEYWORD_CONST() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONST, 0)
}

func (s *ConstantDeclarationContext) PatternInitializers() IPatternInitializersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternInitializersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternInitializersContext)
}

func (s *ConstantDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitConstantDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ConstantDeclaration() (localctx IConstantDeclarationContext) {
	localctx = NewConstantDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, MojoParserRULE_constantDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(805)
		p.Match(MojoParserKEYWORD_CONST)
	}
	{
		p.SetState(806)
		p.PatternInitializers()
	}

	return localctx
}

// IPatternInitializersContext is an interface to support dynamic dispatch.
type IPatternInitializersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPatternInitializersContext differentiates from other interfaces.
	IsPatternInitializersContext()
}

type PatternInitializersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternInitializersContext() *PatternInitializersContext {
	var p = new(PatternInitializersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_patternInitializers
	return p
}

func (*PatternInitializersContext) IsPatternInitializersContext() {}

func NewPatternInitializersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternInitializersContext {
	var p = new(PatternInitializersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_patternInitializers

	return p
}

func (s *PatternInitializersContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternInitializersContext) AllPatternInitializer() []IPatternInitializerContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPatternInitializerContext)(nil)).Elem())
	var tst = make([]IPatternInitializerContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPatternInitializerContext)
		}
	}

	return tst
}

func (s *PatternInitializersContext) PatternInitializer(i int) IPatternInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternInitializerContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPatternInitializerContext)
}

func (s *PatternInitializersContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MojoParserCOMMA)
}

func (s *PatternInitializersContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, i)
}

func (s *PatternInitializersContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *PatternInitializersContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *PatternInitializersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *PatternInitializersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *PatternInitializersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternInitializersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternInitializersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPatternInitializers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PatternInitializers() (localctx IPatternInitializersContext) {
	localctx = NewPatternInitializersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, MojoParserRULE_patternInitializers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(839)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(808)
			p.PatternInitializer()
		}
		p.SetState(813)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserCOMMA {
			{
				p.SetState(809)
				p.Match(MojoParserCOMMA)
			}
			{
				p.SetState(810)
				p.PatternInitializer()
			}

			p.SetState(815)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(816)
			p.Match(MojoParserLCURLY)
		}
		p.SetState(820)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(817)
				p.Match(MojoParserEOL)
			}

			p.SetState(822)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(823)
			p.PatternInitializer()
		}
		p.SetState(828)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserCOMMA {
			{
				p.SetState(824)
				p.Match(MojoParserCOMMA)
			}
			{
				p.SetState(825)
				p.PatternInitializer()
			}

			p.SetState(830)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(834)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(831)
				p.Match(MojoParserEOL)
			}

			p.SetState(836)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(837)
			p.Match(MojoParserRCURLY)
		}

	}

	return localctx
}

// IPatternInitializerContext is an interface to support dynamic dispatch.
type IPatternInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPatternInitializerContext differentiates from other interfaces.
	IsPatternInitializerContext()
}

type PatternInitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternInitializerContext() *PatternInitializerContext {
	var p = new(PatternInitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_patternInitializer
	return p
}

func (*PatternInitializerContext) IsPatternInitializerContext() {}

func NewPatternInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternInitializerContext {
	var p = new(PatternInitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_patternInitializer

	return p
}

func (s *PatternInitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternInitializerContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *PatternInitializerContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *PatternInitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternInitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternInitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPatternInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PatternInitializer() (localctx IPatternInitializerContext) {
	localctx = NewPatternInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, MojoParserRULE_patternInitializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(841)
		p.pattern(0)
	}
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserEQUAL {
		{
			p.SetState(842)
			p.Initializer()
		}

	}

	return localctx
}

// IInitializerContext is an interface to support dynamic dispatch.
type IInitializerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInitializerContext differentiates from other interfaces.
	IsInitializerContext()
}

type InitializerContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInitializerContext() *InitializerContext {
	var p = new(InitializerContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_initializer
	return p
}

func (*InitializerContext) IsInitializerContext() {}

func NewInitializerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InitializerContext {
	var p = new(InitializerContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_initializer

	return p
}

func (s *InitializerContext) GetParser() antlr.Parser { return s.parser }

func (s *InitializerContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *InitializerContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InitializerContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InitializerContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InitializerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InitializerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InitializerContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInitializer(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Initializer() (localctx IInitializerContext) {
	localctx = NewInitializerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, MojoParserRULE_initializer)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(845)
		p.AssignmentOperator()
	}
	p.SetState(849)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(846)
			p.Match(MojoParserEOL)
		}

		p.SetState(851)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(852)
		p.Expression()
	}

	return localctx
}

// IVariableDeclarationContext is an interface to support dynamic dispatch.
type IVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationContext differentiates from other interfaces.
	IsVariableDeclarationContext()
}

type VariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationContext() *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_variableDeclaration
	return p
}

func (*VariableDeclarationContext) IsVariableDeclarationContext() {}

func NewVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_variableDeclaration

	return p
}

func (s *VariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationContext) KEYWORD_VAR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_VAR, 0)
}

func (s *VariableDeclarationContext) PatternInitializers() IPatternInitializersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternInitializersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternInitializersContext)
}

func (s *VariableDeclarationContext) IdentifierPattern() IIdentifierPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPatternContext)
}

func (s *VariableDeclarationContext) COLON_EQUAL() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON_EQUAL, 0)
}

func (s *VariableDeclarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitVariableDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) VariableDeclaration() (localctx IVariableDeclarationContext) {
	localctx = NewVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, MojoParserRULE_variableDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(860)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(854)
			p.Match(MojoParserKEYWORD_VAR)
		}
		{
			p.SetState(855)
			p.PatternInitializers()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(856)
			p.IdentifierPattern()
		}
		{
			p.SetState(857)
			p.Match(MojoParserCOLON_EQUAL)
		}
		{
			p.SetState(858)
			p.Expression()
		}

	}

	return localctx
}

// ITypeAliasDeclarationContext is an interface to support dynamic dispatch.
type ITypeAliasDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasDeclarationContext differentiates from other interfaces.
	IsTypeAliasDeclarationContext()
}

type TypeAliasDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasDeclarationContext() *TypeAliasDeclarationContext {
	var p = new(TypeAliasDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeAliasDeclaration
	return p
}

func (*TypeAliasDeclarationContext) IsTypeAliasDeclarationContext() {}

func NewTypeAliasDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasDeclarationContext {
	var p = new(TypeAliasDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeAliasDeclaration

	return p
}

func (s *TypeAliasDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasDeclarationContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *TypeAliasDeclarationContext) TypeAliasName() ITypeAliasNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasNameContext)
}

func (s *TypeAliasDeclarationContext) TypeAliasAssignment() ITypeAliasAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasAssignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasAssignmentContext)
}

func (s *TypeAliasDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *TypeAliasDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypeAliasDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypeAliasDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeAliasDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeAliasDeclaration() (localctx ITypeAliasDeclarationContext) {
	localctx = NewTypeAliasDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, MojoParserRULE_typeAliasDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(862)
		p.Match(MojoParserKEYWORD_TYPE)
	}
	{
		p.SetState(863)
		p.TypeAliasName()
	}
	p.SetState(865)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(864)
			p.GenericParameterClause()
		}

	}
	p.SetState(870)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(867)
			p.Match(MojoParserEOL)
		}

		p.SetState(872)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(873)
		p.TypeAliasAssignment()
	}

	return localctx
}

// ITypeAliasNameContext is an interface to support dynamic dispatch.
type ITypeAliasNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasNameContext differentiates from other interfaces.
	IsTypeAliasNameContext()
}

type TypeAliasNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasNameContext() *TypeAliasNameContext {
	var p = new(TypeAliasNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeAliasName
	return p
}

func (*TypeAliasNameContext) IsTypeAliasNameContext() {}

func NewTypeAliasNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasNameContext {
	var p = new(TypeAliasNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeAliasName

	return p
}

func (s *TypeAliasNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypeAliasNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeAliasName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeAliasName() (localctx ITypeAliasNameContext) {
	localctx = NewTypeAliasNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, MojoParserRULE_typeAliasName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(875)
		p.TypeName()
	}

	return localctx
}

// ITypeAliasAssignmentContext is an interface to support dynamic dispatch.
type ITypeAliasAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAliasAssignmentContext differentiates from other interfaces.
	IsTypeAliasAssignmentContext()
}

type TypeAliasAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasAssignmentContext() *TypeAliasAssignmentContext {
	var p = new(TypeAliasAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeAliasAssignment
	return p
}

func (*TypeAliasAssignmentContext) IsTypeAliasAssignmentContext() {}

func NewTypeAliasAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasAssignmentContext {
	var p = new(TypeAliasAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeAliasAssignment

	return p
}

func (s *TypeAliasAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasAssignmentContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *TypeAliasAssignmentContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeAliasAssignmentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypeAliasAssignmentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypeAliasAssignmentContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TypeAliasAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasAssignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeAliasAssignment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeAliasAssignment() (localctx ITypeAliasAssignmentContext) {
	localctx = NewTypeAliasAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, MojoParserRULE_typeAliasAssignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(877)
		p.AssignmentOperator()
	}
	p.SetState(881)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(878)
			p.Match(MojoParserEOL)
		}

		p.SetState(883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(884)
		p.type_(0)
	}
	p.SetState(886)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(885)
			p.Attributes()
		}

	}

	return localctx
}

// IFunctionDeclarationContext is an interface to support dynamic dispatch.
type IFunctionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclarationContext differentiates from other interfaces.
	IsFunctionDeclarationContext()
}

type FunctionDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclarationContext() *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionDeclaration
	return p
}

func (*FunctionDeclarationContext) IsFunctionDeclarationContext() {}

func NewFunctionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclarationContext {
	var p = new(FunctionDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionDeclaration

	return p
}

func (s *FunctionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclarationContext) FunctionHead() IFunctionHeadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionHeadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionHeadContext)
}

func (s *FunctionDeclarationContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *FunctionDeclarationContext) FunctionSignature() IFunctionSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionSignatureContext)
}

func (s *FunctionDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *FunctionDeclarationContext) FunctionBody() IFunctionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionBodyContext)
}

func (s *FunctionDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionDeclaration() (localctx IFunctionDeclarationContext) {
	localctx = NewFunctionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, MojoParserRULE_functionDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(888)
		p.FunctionHead()
	}
	{
		p.SetState(889)
		p.FunctionName()
	}
	p.SetState(891)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(890)
			p.GenericParameterClause()
		}

	}
	{
		p.SetState(893)
		p.FunctionSignature()
	}
	p.SetState(901)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
		p.SetState(897)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(894)
				p.Match(MojoParserEOL)
			}

			p.SetState(899)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(900)
			p.FunctionBody()
		}

	}

	return localctx
}

// IFunctionHeadContext is an interface to support dynamic dispatch.
type IFunctionHeadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionHeadContext differentiates from other interfaces.
	IsFunctionHeadContext()
}

type FunctionHeadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionHeadContext() *FunctionHeadContext {
	var p = new(FunctionHeadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionHead
	return p
}

func (*FunctionHeadContext) IsFunctionHeadContext() {}

func NewFunctionHeadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionHeadContext {
	var p = new(FunctionHeadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionHead

	return p
}

func (s *FunctionHeadContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionHeadContext) KEYWORD_FUNC() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FUNC, 0)
}

func (s *FunctionHeadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionHeadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionHeadContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionHead(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionHead() (localctx IFunctionHeadContext) {
	localctx = NewFunctionHeadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, MojoParserRULE_functionHead)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(903)
		p.Match(MojoParserKEYWORD_FUNC)
	}

	return localctx
}

// IFunctionNameContext is an interface to support dynamic dispatch.
type IFunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionNameContext differentiates from other interfaces.
	IsFunctionNameContext()
}

type FunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionNameContext() *FunctionNameContext {
	var p = new(FunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionName
	return p
}

func (*FunctionNameContext) IsFunctionNameContext() {}

func NewFunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionNameContext {
	var p = new(FunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionName

	return p
}

func (s *FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionNameContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *FunctionNameContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionName() (localctx IFunctionNameContext) {
	localctx = NewFunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, MojoParserRULE_functionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(907)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_XOR, MojoParserVALUE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(905)
			p.DeclarationIdentifier()
		}

	case MojoParserDOT, MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserOPERATOR_HEAD_OTHER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(906)
			p.Operator()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFunctionSignatureContext is an interface to support dynamic dispatch.
type IFunctionSignatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionSignatureContext differentiates from other interfaces.
	IsFunctionSignatureContext()
}

type FunctionSignatureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionSignatureContext() *FunctionSignatureContext {
	var p = new(FunctionSignatureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionSignature
	return p
}

func (*FunctionSignatureContext) IsFunctionSignatureContext() {}

func NewFunctionSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionSignatureContext {
	var p = new(FunctionSignatureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionSignature

	return p
}

func (s *FunctionSignatureContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionSignatureContext) FunctionParameterClause() IFunctionParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterClauseContext)
}

func (s *FunctionSignatureContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *FunctionSignatureContext) FunctionResult() IFunctionResultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionResultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionResultContext)
}

func (s *FunctionSignatureContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionSignatureContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionSignatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionSignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionSignatureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionSignature(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionSignature() (localctx IFunctionSignatureContext) {
	localctx = NewFunctionSignatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, MojoParserRULE_functionSignature)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(909)
		p.FunctionParameterClause()
	}
	p.SetState(911)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(910)
			p.FollowingDocument()
		}

	}
	p.SetState(920)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) == 1 {
		p.SetState(916)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(913)
				p.Match(MojoParserEOL)
			}

			p.SetState(918)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(919)
			p.FunctionResult()
		}

	}

	return localctx
}

// IFunctionResultContext is an interface to support dynamic dispatch.
type IFunctionResultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionResultContext differentiates from other interfaces.
	IsFunctionResultContext()
}

type FunctionResultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionResultContext() *FunctionResultContext {
	var p = new(FunctionResultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionResult
	return p
}

func (*FunctionResultContext) IsFunctionResultContext() {}

func NewFunctionResultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionResultContext {
	var p = new(FunctionResultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionResult

	return p
}

func (s *FunctionResultContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionResultContext) ArrowOperator() IArrowOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowOperatorContext)
}

func (s *FunctionResultContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionResultContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *FunctionResultContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *FunctionResultContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FunctionResultContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *FunctionResultContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionResultContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionResultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionResultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionResultContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionResult(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionResult() (localctx IFunctionResultContext) {
	localctx = NewFunctionResultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, MojoParserRULE_functionResult)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(922)
		p.ArrowOperator()
	}
	p.SetState(926)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(923)
			p.LabelIdentifier()
		}
		{
			p.SetState(924)
			p.Match(MojoParserCOLON)
		}

	}
	{
		p.SetState(928)
		p.type_(0)
	}
	p.SetState(930)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(929)
			p.Attributes()
		}

	}
	p.SetState(939)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext()) == 1 {
		p.SetState(935)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(932)
				p.Match(MojoParserEOL)
			}

			p.SetState(937)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(938)
			p.FollowingDocument()
		}

	}

	return localctx
}

// IFunctionBodyContext is an interface to support dynamic dispatch.
type IFunctionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionBodyContext differentiates from other interfaces.
	IsFunctionBodyContext()
}

type FunctionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionBodyContext() *FunctionBodyContext {
	var p = new(FunctionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionBody
	return p
}

func (*FunctionBodyContext) IsFunctionBodyContext() {}

func NewFunctionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionBodyContext {
	var p = new(FunctionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionBody

	return p
}

func (s *FunctionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *FunctionBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *FunctionBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *FunctionBodyContext) Statements() IStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *FunctionBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionBody() (localctx IFunctionBodyContext) {
	localctx = NewFunctionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, MojoParserRULE_functionBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(941)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(943)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
		{
			p.SetState(942)
			p.FollowingDocument()
		}

	}
	p.SetState(952)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) == 1 {
		p.SetState(948)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(945)
					p.Match(MojoParserEOL)
				}

			}
			p.SetState(950)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext())
		}
		{
			p.SetState(951)
			p.Statements()
		}

	}
	p.SetState(957)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(954)
			p.Match(MojoParserEOL)
		}

		p.SetState(959)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(960)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IFunctionParameterClauseContext is an interface to support dynamic dispatch.
type IFunctionParameterClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParameterClauseContext differentiates from other interfaces.
	IsFunctionParameterClauseContext()
}

type FunctionParameterClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParameterClauseContext() *FunctionParameterClauseContext {
	var p = new(FunctionParameterClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionParameterClause
	return p
}

func (*FunctionParameterClauseContext) IsFunctionParameterClauseContext() {}

func NewFunctionParameterClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParameterClauseContext {
	var p = new(FunctionParameterClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionParameterClause

	return p
}

func (s *FunctionParameterClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParameterClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *FunctionParameterClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *FunctionParameterClauseContext) FunctionParameters() IFunctionParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionParametersContext)
}

func (s *FunctionParameterClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionParameterClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionParameterClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParameterClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParameterClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionParameterClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionParameterClause() (localctx IFunctionParameterClauseContext) {
	localctx = NewFunctionParameterClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, MojoParserRULE_functionParameterClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(980)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(962)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(963)
			p.Match(MojoParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(964)
			p.Match(MojoParserLPAREN)
		}
		p.SetState(968)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(965)
				p.Match(MojoParserEOL)
			}

			p.SetState(970)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(971)
			p.FunctionParameters()
		}
		p.SetState(975)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(972)
				p.Match(MojoParserEOL)
			}

			p.SetState(977)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(978)
			p.Match(MojoParserRPAREN)
		}

	}

	return localctx
}

// IFunctionParametersContext is an interface to support dynamic dispatch.
type IFunctionParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParametersContext differentiates from other interfaces.
	IsFunctionParametersContext()
}

type FunctionParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParametersContext() *FunctionParametersContext {
	var p = new(FunctionParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionParameters
	return p
}

func (*FunctionParametersContext) IsFunctionParametersContext() {}

func NewFunctionParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParametersContext {
	var p = new(FunctionParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionParameters

	return p
}

func (s *FunctionParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParametersContext) AllFunctionParameter() []IFunctionParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionParameterContext)(nil)).Elem())
	var tst = make([]IFunctionParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionParameterContext)
		}
	}

	return tst
}

func (s *FunctionParametersContext) FunctionParameter(i int) IFunctionParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterContext)
}

func (s *FunctionParametersContext) AllEovWithDocument() []IEovWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem())
	var tst = make([]IEovWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovWithDocumentContext)
		}
	}

	return tst
}

func (s *FunctionParametersContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *FunctionParametersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionParametersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionParameters() (localctx IFunctionParametersContext) {
	localctx = NewFunctionParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, MojoParserRULE_functionParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(982)
		p.FunctionParameter()
	}
	p.SetState(994)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(983)
				p.EovWithDocument()
			}
			p.SetState(987)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(984)
					p.Match(MojoParserEOL)
				}

				p.SetState(989)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(990)
				p.FunctionParameter()
			}

		}
		p.SetState(996)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())
	}
	p.SetState(998)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(997)
			p.EovWithDocument()
		}

	}

	return localctx
}

// IFunctionParameterContext is an interface to support dynamic dispatch.
type IFunctionParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionParameterContext differentiates from other interfaces.
	IsFunctionParameterContext()
}

type FunctionParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionParameterContext() *FunctionParameterContext {
	var p = new(FunctionParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionParameter
	return p
}

func (*FunctionParameterContext) IsFunctionParameterContext() {}

func NewFunctionParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionParameterContext {
	var p = new(FunctionParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionParameter

	return p
}

func (s *FunctionParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionParameterContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *FunctionParameterContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *FunctionParameterContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *FunctionParameterContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FunctionParameterContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FunctionParameterContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *FunctionParameterContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionParameterContext) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(MojoParserELLIPSIS, 0)
}

func (s *FunctionParameterContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *FunctionParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionParameter() (localctx IFunctionParameterContext) {
	localctx = NewFunctionParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, MojoParserRULE_functionParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1018)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1000)
			p.LabelIdentifier()
		}
		{
			p.SetState(1001)
			p.TypeAnnotation()
		}
		p.SetState(1009)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
			p.SetState(1005)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1002)
					p.Match(MojoParserEOL)
				}

				p.SetState(1007)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1008)
				p.Initializer()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1011)
			p.LabelIdentifier()
		}
		{
			p.SetState(1012)
			p.Match(MojoParserCOLON)
		}
		{
			p.SetState(1013)
			p.type_(0)
		}
		{
			p.SetState(1014)
			p.Match(MojoParserELLIPSIS)
		}
		p.SetState(1016)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserAT {
			{
				p.SetState(1015)
				p.Attributes()
			}

		}

	}

	return localctx
}

// IEnumDeclarationContext is an interface to support dynamic dispatch.
type IEnumDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumDeclarationContext differentiates from other interfaces.
	IsEnumDeclarationContext()
}

type EnumDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumDeclarationContext() *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumDeclaration
	return p
}

func (*EnumDeclarationContext) IsEnumDeclarationContext() {}

func NewEnumDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDeclarationContext {
	var p = new(EnumDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumDeclaration

	return p
}

func (s *EnumDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDeclarationContext) KEYWORD_ENUM() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ENUM, 0)
}

func (s *EnumDeclarationContext) EnumName() IEnumNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumNameContext)
}

func (s *EnumDeclarationContext) EnumBody() IEnumBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumBodyContext)
}

func (s *EnumDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *EnumDeclarationContext) TypeInheritanceClause() ITypeInheritanceClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeInheritanceClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceClauseContext)
}

func (s *EnumDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumDeclaration() (localctx IEnumDeclarationContext) {
	localctx = NewEnumDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, MojoParserRULE_enumDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1020)
		p.Match(MojoParserKEYWORD_ENUM)
	}
	{
		p.SetState(1021)
		p.EnumName()
	}
	p.SetState(1023)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1022)
			p.GenericParameterClause()
		}

	}
	p.SetState(1032)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext()) == 1 {
		p.SetState(1028)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1025)
				p.Match(MojoParserEOL)
			}

			p.SetState(1030)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1031)
			p.TypeInheritanceClause()
		}

	}
	p.SetState(1037)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1034)
			p.Match(MojoParserEOL)
		}

		p.SetState(1039)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1040)
		p.EnumBody()
	}

	return localctx
}

// IEnumBodyContext is an interface to support dynamic dispatch.
type IEnumBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumBodyContext differentiates from other interfaces.
	IsEnumBodyContext()
}

type EnumBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumBodyContext() *EnumBodyContext {
	var p = new(EnumBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumBody
	return p
}

func (*EnumBodyContext) IsEnumBodyContext() {}

func NewEnumBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumBodyContext {
	var p = new(EnumBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumBody

	return p
}

func (s *EnumBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *EnumBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *EnumBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *EnumBodyContext) EnumMembers() IEnumMembersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumMembersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumMembersContext)
}

func (s *EnumBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumBody() (localctx IEnumBodyContext) {
	localctx = NewEnumBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, MojoParserRULE_enumBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1042)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1044)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
		{
			p.SetState(1043)
			p.FollowingDocument()
		}

	}
	p.SetState(1053)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 108, p.GetParserRuleContext()) == 1 {
		p.SetState(1049)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1046)
				p.Match(MojoParserEOL)
			}

			p.SetState(1051)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1052)
			p.EnumMembers()
		}

	}
	p.SetState(1058)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1055)
			p.Match(MojoParserEOL)
		}

		p.SetState(1060)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1061)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IEnumNameContext is an interface to support dynamic dispatch.
type IEnumNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumNameContext differentiates from other interfaces.
	IsEnumNameContext()
}

type EnumNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumNameContext() *EnumNameContext {
	var p = new(EnumNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumName
	return p
}

func (*EnumNameContext) IsEnumNameContext() {}

func NewEnumNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumNameContext {
	var p = new(EnumNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumName

	return p
}

func (s *EnumNameContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *EnumNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumName() (localctx IEnumNameContext) {
	localctx = NewEnumNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, MojoParserRULE_enumName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1063)
		p.TypeName()
	}

	return localctx
}

// IEnumMembersContext is an interface to support dynamic dispatch.
type IEnumMembersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumMembersContext differentiates from other interfaces.
	IsEnumMembersContext()
}

type EnumMembersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumMembersContext() *EnumMembersContext {
	var p = new(EnumMembersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumMembers
	return p
}

func (*EnumMembersContext) IsEnumMembersContext() {}

func NewEnumMembersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumMembersContext {
	var p = new(EnumMembersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumMembers

	return p
}

func (s *EnumMembersContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumMembersContext) AllEnumMember() []IEnumMemberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumMemberContext)(nil)).Elem())
	var tst = make([]IEnumMemberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumMemberContext)
		}
	}

	return tst
}

func (s *EnumMembersContext) EnumMember(i int) IEnumMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumMemberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumMemberContext)
}

func (s *EnumMembersContext) AllEovWithDocument() []IEovWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem())
	var tst = make([]IEovWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovWithDocumentContext)
		}
	}

	return tst
}

func (s *EnumMembersContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *EnumMembersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumMembersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumMembersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumMembersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumMembersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumMembers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumMembers() (localctx IEnumMembersContext) {
	localctx = NewEnumMembersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, MojoParserRULE_enumMembers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1065)
		p.EnumMember()
	}
	p.SetState(1077)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1066)
				p.EovWithDocument()
			}
			p.SetState(1070)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1067)
					p.Match(MojoParserEOL)
				}

				p.SetState(1072)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1073)
				p.EnumMember()
			}

		}
		p.SetState(1079)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext())
	}
	p.SetState(1081)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1080)
			p.EovWithDocument()
		}

	}

	return localctx
}

// IEnumMemberContext is an interface to support dynamic dispatch.
type IEnumMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumMemberContext differentiates from other interfaces.
	IsEnumMemberContext()
}

type EnumMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumMemberContext() *EnumMemberContext {
	var p = new(EnumMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_enumMember
	return p
}

func (*EnumMemberContext) IsEnumMemberContext() {}

func NewEnumMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumMemberContext {
	var p = new(EnumMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_enumMember

	return p
}

func (s *EnumMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumMemberContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *EnumMemberContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *EnumMemberContext) AllAttributes() []IAttributesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributesContext)(nil)).Elem())
	var tst = make([]IAttributesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributesContext)
		}
	}

	return tst
}

func (s *EnumMemberContext) Attributes(i int) IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *EnumMemberContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *EnumMemberContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *EnumMemberContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *EnumMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEnumMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EnumMember() (localctx IEnumMemberContext) {
	localctx = NewEnumMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, MojoParserRULE_enumMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1084)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLINE_DOCUMENT {
		{
			p.SetState(1083)
			p.Document()
		}

	}
	p.SetState(1089)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1086)
			p.Attributes()
		}
		{
			p.SetState(1087)
			p.Match(MojoParserEOL)
		}

	}
	{
		p.SetState(1091)
		p.DeclarationIdentifier()
	}
	p.SetState(1093)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1092)
			p.Attributes()
		}

	}
	p.SetState(1102)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) == 1 {
		p.SetState(1098)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1095)
				p.Match(MojoParserEOL)
			}

			p.SetState(1100)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1101)
			p.Initializer()
		}

	}

	return localctx
}

// IStructDeclarationContext is an interface to support dynamic dispatch.
type IStructDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructDeclarationContext differentiates from other interfaces.
	IsStructDeclarationContext()
}

type StructDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructDeclarationContext() *StructDeclarationContext {
	var p = new(StructDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structDeclaration
	return p
}

func (*StructDeclarationContext) IsStructDeclarationContext() {}

func NewStructDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDeclarationContext {
	var p = new(StructDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structDeclaration

	return p
}

func (s *StructDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDeclarationContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *StructDeclarationContext) StructName() IStructNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructNameContext)
}

func (s *StructDeclarationContext) StructType() IStructTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructTypeContext)
}

func (s *StructDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *StructDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructDeclaration() (localctx IStructDeclarationContext) {
	localctx = NewStructDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, MojoParserRULE_structDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1104)
		p.Match(MojoParserKEYWORD_TYPE)
	}
	{
		p.SetState(1105)
		p.StructName()
	}
	p.SetState(1107)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1106)
			p.GenericParameterClause()
		}

	}
	{
		p.SetState(1109)
		p.StructType()
	}

	return localctx
}

// IStructNameContext is an interface to support dynamic dispatch.
type IStructNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructNameContext differentiates from other interfaces.
	IsStructNameContext()
}

type StructNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructNameContext() *StructNameContext {
	var p = new(StructNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structName
	return p
}

func (*StructNameContext) IsStructNameContext() {}

func NewStructNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructNameContext {
	var p = new(StructNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structName

	return p
}

func (s *StructNameContext) GetParser() antlr.Parser { return s.parser }

func (s *StructNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *StructNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructName() (localctx IStructNameContext) {
	localctx = NewStructNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, MojoParserRULE_structName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1111)
		p.TypeName()
	}

	return localctx
}

// IStructTypeContext is an interface to support dynamic dispatch.
type IStructTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructTypeContext differentiates from other interfaces.
	IsStructTypeContext()
}

type StructTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructTypeContext() *StructTypeContext {
	var p = new(StructTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structType
	return p
}

func (*StructTypeContext) IsStructTypeContext() {}

func NewStructTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructTypeContext {
	var p = new(StructTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structType

	return p
}

func (s *StructTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *StructTypeContext) TypeInheritanceClause() ITypeInheritanceClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeInheritanceClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceClauseContext)
}

func (s *StructTypeContext) StructBody() IStructBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructBodyContext)
}

func (s *StructTypeContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructTypeContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructType() (localctx IStructTypeContext) {
	localctx = NewStructTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, MojoParserRULE_structType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1120)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 120, p.GetParserRuleContext()) == 1 {
		p.SetState(1116)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1113)
				p.Match(MojoParserEOL)
			}

			p.SetState(1118)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1119)
			p.TypeInheritanceClause()
		}

	}
	p.SetState(1129)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) == 1 {
		p.SetState(1125)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1122)
				p.Match(MojoParserEOL)
			}

			p.SetState(1127)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1128)
			p.StructBody()
		}

	}

	return localctx
}

// IStructBodyContext is an interface to support dynamic dispatch.
type IStructBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructBodyContext differentiates from other interfaces.
	IsStructBodyContext()
}

type StructBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructBodyContext() *StructBodyContext {
	var p = new(StructBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structBody
	return p
}

func (*StructBodyContext) IsStructBodyContext() {}

func NewStructBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructBodyContext {
	var p = new(StructBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structBody

	return p
}

func (s *StructBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *StructBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *StructBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *StructBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *StructBodyContext) StructMembers() IStructMembersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructMembersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructMembersContext)
}

func (s *StructBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructBody() (localctx IStructBodyContext) {
	localctx = NewStructBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, MojoParserRULE_structBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1131)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1133)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
		{
			p.SetState(1132)
			p.FollowingDocument()
		}

	}
	p.SetState(1142)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext()) == 1 {
		p.SetState(1138)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1135)
				p.Match(MojoParserEOL)
			}

			p.SetState(1140)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1141)
			p.StructMembers()
		}

	}
	p.SetState(1147)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1144)
			p.Match(MojoParserEOL)
		}

		p.SetState(1149)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1150)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IStructMembersContext is an interface to support dynamic dispatch.
type IStructMembersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructMembersContext differentiates from other interfaces.
	IsStructMembersContext()
}

type StructMembersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructMembersContext() *StructMembersContext {
	var p = new(StructMembersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structMembers
	return p
}

func (*StructMembersContext) IsStructMembersContext() {}

func NewStructMembersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMembersContext {
	var p = new(StructMembersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structMembers

	return p
}

func (s *StructMembersContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMembersContext) AllStructMember() []IStructMemberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStructMemberContext)(nil)).Elem())
	var tst = make([]IStructMemberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStructMemberContext)
		}
	}

	return tst
}

func (s *StructMembersContext) StructMember(i int) IStructMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructMemberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStructMemberContext)
}

func (s *StructMembersContext) AllEosWithDocument() []IEosWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosWithDocumentContext)(nil)).Elem())
	var tst = make([]IEosWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosWithDocumentContext)
		}
	}

	return tst
}

func (s *StructMembersContext) EosWithDocument(i int) IEosWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosWithDocumentContext)
}

func (s *StructMembersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructMembersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructMembersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMembersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMembersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructMembers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructMembers() (localctx IStructMembersContext) {
	localctx = NewStructMembersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, MojoParserRULE_structMembers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1152)
		p.StructMember()
	}
	p.SetState(1164)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1153)
				p.EosWithDocument()
			}
			p.SetState(1157)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1154)
					p.Match(MojoParserEOL)
				}

				p.SetState(1159)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1160)
				p.StructMember()
			}

		}
		p.SetState(1166)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 128, p.GetParserRuleContext())
	}
	p.SetState(1168)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1167)
			p.EosWithDocument()
		}

	}

	return localctx
}

// IStructMemberContext is an interface to support dynamic dispatch.
type IStructMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructMemberContext differentiates from other interfaces.
	IsStructMemberContext()
}

type StructMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructMemberContext() *StructMemberContext {
	var p = new(StructMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structMember
	return p
}

func (*StructMemberContext) IsStructMemberContext() {}

func NewStructMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMemberContext {
	var p = new(StructMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structMember

	return p
}

func (s *StructMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMemberContext) StructDeclaration() IStructDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDeclarationContext)
}

func (s *StructMemberContext) EnumDeclaration() IEnumDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumDeclarationContext)
}

func (s *StructMemberContext) ConstantDeclaration() IConstantDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstantDeclarationContext)
}

func (s *StructMemberContext) TypeAliasDeclaration() ITypeAliasDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasDeclarationContext)
}

func (s *StructMemberContext) StructMemberDeclaration() IStructMemberDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructMemberDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructMemberDeclarationContext)
}

func (s *StructMemberContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *StructMemberContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *StructMemberContext) EOL() antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, 0)
}

func (s *StructMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructMember() (localctx IStructMemberContext) {
	localctx = NewStructMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, MojoParserRULE_structMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1171)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLINE_DOCUMENT {
		{
			p.SetState(1170)
			p.Document()
		}

	}
	p.SetState(1176)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1173)
			p.Attributes()
		}
		{
			p.SetState(1174)
			p.Match(MojoParserEOL)
		}

	}
	p.SetState(1183)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 132, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1178)
			p.StructDeclaration()
		}

	case 2:
		{
			p.SetState(1179)
			p.EnumDeclaration()
		}

	case 3:
		{
			p.SetState(1180)
			p.ConstantDeclaration()
		}

	case 4:
		{
			p.SetState(1181)
			p.TypeAliasDeclaration()
		}

	case 5:
		{
			p.SetState(1182)
			p.StructMemberDeclaration()
		}

	}

	return localctx
}

// IStructMemberDeclarationContext is an interface to support dynamic dispatch.
type IStructMemberDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructMemberDeclarationContext differentiates from other interfaces.
	IsStructMemberDeclarationContext()
}

type StructMemberDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructMemberDeclarationContext() *StructMemberDeclarationContext {
	var p = new(StructMemberDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structMemberDeclaration
	return p
}

func (*StructMemberDeclarationContext) IsStructMemberDeclarationContext() {}

func NewStructMemberDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMemberDeclarationContext {
	var p = new(StructMemberDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structMemberDeclaration

	return p
}

func (s *StructMemberDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMemberDeclarationContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *StructMemberDeclarationContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *StructMemberDeclarationContext) Initializer() IInitializerContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInitializerContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInitializerContext)
}

func (s *StructMemberDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *StructMemberDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *StructMemberDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMemberDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMemberDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructMemberDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructMemberDeclaration() (localctx IStructMemberDeclarationContext) {
	localctx = NewStructMemberDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, MojoParserRULE_structMemberDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1185)
		p.DeclarationIdentifier()
	}
	{
		p.SetState(1186)
		p.TypeAnnotation()
	}
	p.SetState(1194)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 134, p.GetParserRuleContext()) == 1 {
		p.SetState(1190)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1187)
				p.Match(MojoParserEOL)
			}

			p.SetState(1192)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1193)
			p.Initializer()
		}

	}

	return localctx
}

// IInterfaceDeclarationContext is an interface to support dynamic dispatch.
type IInterfaceDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceDeclarationContext differentiates from other interfaces.
	IsInterfaceDeclarationContext()
}

type InterfaceDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceDeclarationContext() *InterfaceDeclarationContext {
	var p = new(InterfaceDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceDeclaration
	return p
}

func (*InterfaceDeclarationContext) IsInterfaceDeclarationContext() {}

func NewInterfaceDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceDeclarationContext {
	var p = new(InterfaceDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceDeclaration

	return p
}

func (s *InterfaceDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceDeclarationContext) KEYWORD_INTERFACE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_INTERFACE, 0)
}

func (s *InterfaceDeclarationContext) InterfaceName() IInterfaceNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceNameContext)
}

func (s *InterfaceDeclarationContext) InterfaceBody() IInterfaceBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceBodyContext)
}

func (s *InterfaceDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *InterfaceDeclarationContext) TypeInheritanceClause() ITypeInheritanceClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeInheritanceClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceClauseContext)
}

func (s *InterfaceDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceDeclaration() (localctx IInterfaceDeclarationContext) {
	localctx = NewInterfaceDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, MojoParserRULE_interfaceDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1196)
		p.Match(MojoParserKEYWORD_INTERFACE)
	}
	{
		p.SetState(1197)
		p.InterfaceName()
	}
	p.SetState(1199)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1198)
			p.GenericParameterClause()
		}

	}
	p.SetState(1208)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext()) == 1 {
		p.SetState(1204)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1201)
				p.Match(MojoParserEOL)
			}

			p.SetState(1206)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1207)
			p.TypeInheritanceClause()
		}

	}
	p.SetState(1213)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1210)
			p.Match(MojoParserEOL)
		}

		p.SetState(1215)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1216)
		p.InterfaceBody()
	}

	return localctx
}

// IInterfaceNameContext is an interface to support dynamic dispatch.
type IInterfaceNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceNameContext differentiates from other interfaces.
	IsInterfaceNameContext()
}

type InterfaceNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceNameContext() *InterfaceNameContext {
	var p = new(InterfaceNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceName
	return p
}

func (*InterfaceNameContext) IsInterfaceNameContext() {}

func NewInterfaceNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceNameContext {
	var p = new(InterfaceNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceName

	return p
}

func (s *InterfaceNameContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *InterfaceNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceName() (localctx IInterfaceNameContext) {
	localctx = NewInterfaceNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, MojoParserRULE_interfaceName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1218)
		p.TypeName()
	}

	return localctx
}

// IInterfaceBodyContext is an interface to support dynamic dispatch.
type IInterfaceBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceBodyContext differentiates from other interfaces.
	IsInterfaceBodyContext()
}

type InterfaceBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceBodyContext() *InterfaceBodyContext {
	var p = new(InterfaceBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceBody
	return p
}

func (*InterfaceBodyContext) IsInterfaceBodyContext() {}

func NewInterfaceBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceBodyContext {
	var p = new(InterfaceBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceBody

	return p
}

func (s *InterfaceBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceBodyContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *InterfaceBodyContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *InterfaceBodyContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *InterfaceBodyContext) InterfaceMembers() IInterfaceMembersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceMembersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceMembersContext)
}

func (s *InterfaceBodyContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceBodyContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceBodyContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceBody(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceBody() (localctx IInterfaceBodyContext) {
	localctx = NewInterfaceBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, MojoParserRULE_interfaceBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1220)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1222)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
		{
			p.SetState(1221)
			p.FollowingDocument()
		}

	}
	p.SetState(1231)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 141, p.GetParserRuleContext()) == 1 {
		p.SetState(1227)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1224)
				p.Match(MojoParserEOL)
			}

			p.SetState(1229)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1230)
			p.InterfaceMembers()
		}

	}
	p.SetState(1236)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1233)
			p.Match(MojoParserEOL)
		}

		p.SetState(1238)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1239)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IInterfaceMembersContext is an interface to support dynamic dispatch.
type IInterfaceMembersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceMembersContext differentiates from other interfaces.
	IsInterfaceMembersContext()
}

type InterfaceMembersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMembersContext() *InterfaceMembersContext {
	var p = new(InterfaceMembersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceMembers
	return p
}

func (*InterfaceMembersContext) IsInterfaceMembersContext() {}

func NewInterfaceMembersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMembersContext {
	var p = new(InterfaceMembersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceMembers

	return p
}

func (s *InterfaceMembersContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMembersContext) AllInterfaceMember() []IInterfaceMemberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInterfaceMemberContext)(nil)).Elem())
	var tst = make([]IInterfaceMemberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInterfaceMemberContext)
		}
	}

	return tst
}

func (s *InterfaceMembersContext) InterfaceMember(i int) IInterfaceMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceMemberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInterfaceMemberContext)
}

func (s *InterfaceMembersContext) AllEosWithDocument() []IEosWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosWithDocumentContext)(nil)).Elem())
	var tst = make([]IEosWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosWithDocumentContext)
		}
	}

	return tst
}

func (s *InterfaceMembersContext) EosWithDocument(i int) IEosWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosWithDocumentContext)
}

func (s *InterfaceMembersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceMembersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceMembersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMembersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMembersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceMembers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceMembers() (localctx IInterfaceMembersContext) {
	localctx = NewInterfaceMembersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, MojoParserRULE_interfaceMembers)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1241)
		p.InterfaceMember()
	}
	p.SetState(1253)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1242)
				p.EosWithDocument()
			}
			p.SetState(1246)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1243)
					p.Match(MojoParserEOL)
				}

				p.SetState(1248)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1249)
				p.InterfaceMember()
			}

		}
		p.SetState(1255)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 144, p.GetParserRuleContext())
	}
	p.SetState(1257)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 145, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1256)
			p.EosWithDocument()
		}

	}

	return localctx
}

// IInterfaceMemberContext is an interface to support dynamic dispatch.
type IInterfaceMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceMemberContext differentiates from other interfaces.
	IsInterfaceMemberContext()
}

type InterfaceMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMemberContext() *InterfaceMemberContext {
	var p = new(InterfaceMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceMember
	return p
}

func (*InterfaceMemberContext) IsInterfaceMemberContext() {}

func NewInterfaceMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMemberContext {
	var p = new(InterfaceMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceMember

	return p
}

func (s *InterfaceMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMemberContext) TypeAliasDeclaration() ITypeAliasDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAliasDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAliasDeclarationContext)
}

func (s *InterfaceMemberContext) InterfaceMethodDeclaration() IInterfaceMethodDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceMethodDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceMethodDeclarationContext)
}

func (s *InterfaceMemberContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *InterfaceMemberContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *InterfaceMemberContext) EOL() antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, 0)
}

func (s *InterfaceMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceMember() (localctx IInterfaceMemberContext) {
	localctx = NewInterfaceMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, MojoParserRULE_interfaceMember)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1260)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLINE_DOCUMENT {
		{
			p.SetState(1259)
			p.Document()
		}

	}
	p.SetState(1265)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1262)
			p.Attributes()
		}
		{
			p.SetState(1263)
			p.Match(MojoParserEOL)
		}

	}
	p.SetState(1269)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1267)
			p.TypeAliasDeclaration()
		}

	case 2:
		{
			p.SetState(1268)
			p.InterfaceMethodDeclaration()
		}

	}

	return localctx
}

// IInterfaceMethodDeclarationContext is an interface to support dynamic dispatch.
type IInterfaceMethodDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceMethodDeclarationContext differentiates from other interfaces.
	IsInterfaceMethodDeclarationContext()
}

type InterfaceMethodDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMethodDeclarationContext() *InterfaceMethodDeclarationContext {
	var p = new(InterfaceMethodDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_interfaceMethodDeclaration
	return p
}

func (*InterfaceMethodDeclarationContext) IsInterfaceMethodDeclarationContext() {}

func NewInterfaceMethodDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMethodDeclarationContext {
	var p = new(InterfaceMethodDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_interfaceMethodDeclaration

	return p
}

func (s *InterfaceMethodDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMethodDeclarationContext) FunctionName() IFunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionNameContext)
}

func (s *InterfaceMethodDeclarationContext) FunctionSignature() IFunctionSignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionSignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionSignatureContext)
}

func (s *InterfaceMethodDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *InterfaceMethodDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *InterfaceMethodDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *InterfaceMethodDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMethodDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMethodDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitInterfaceMethodDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) InterfaceMethodDeclaration() (localctx IInterfaceMethodDeclarationContext) {
	localctx = NewInterfaceMethodDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, MojoParserRULE_interfaceMethodDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1271)
		p.FunctionName()
	}
	p.SetState(1273)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1272)
			p.GenericParameterClause()
		}

	}
	p.SetState(1278)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1275)
			p.Match(MojoParserEOL)
		}

		p.SetState(1280)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1281)
		p.FunctionSignature()
	}

	return localctx
}

// IAttributeDeclarationContext is an interface to support dynamic dispatch.
type IAttributeDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeDeclarationContext differentiates from other interfaces.
	IsAttributeDeclarationContext()
}

type AttributeDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeDeclarationContext() *AttributeDeclarationContext {
	var p = new(AttributeDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeDeclaration
	return p
}

func (*AttributeDeclarationContext) IsAttributeDeclarationContext() {}

func NewAttributeDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeDeclarationContext {
	var p = new(AttributeDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeDeclaration

	return p
}

func (s *AttributeDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeDeclarationContext) KEYWORD_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ATTRIBUTE, 0)
}

func (s *AttributeDeclarationContext) AttributeName() IAttributeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeNameContext)
}

func (s *AttributeDeclarationContext) StructType() IStructTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructTypeContext)
}

func (s *AttributeDeclarationContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *AttributeDeclarationContext) Document() IDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDocumentContext)
}

func (s *AttributeDeclarationContext) Attribute() IAttributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeContext)
}

func (s *AttributeDeclarationContext) GenericParameterClause() IGenericParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericParameterClauseContext)
}

func (s *AttributeDeclarationContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *AttributeDeclarationContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *AttributeDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeDeclaration() (localctx IAttributeDeclarationContext) {
	localctx = NewAttributeDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, MojoParserRULE_attributeDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1284)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLINE_DOCUMENT {
		{
			p.SetState(1283)
			p.Document()
		}

	}
	p.SetState(1293)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT || _la == MojoParserEOL {
		p.SetState(1289)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1286)
				p.Match(MojoParserEOL)
			}

			p.SetState(1291)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1292)
			p.Attribute()
		}

	}
	{
		p.SetState(1295)
		p.Match(MojoParserKEYWORD_ATTRIBUTE)
	}
	{
		p.SetState(1296)
		p.AttributeName()
	}
	p.SetState(1298)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserLT {
		{
			p.SetState(1297)
			p.GenericParameterClause()
		}

	}
	p.SetState(1302)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 155, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1300)
			p.StructType()
		}

	case 2:
		{
			p.SetState(1301)
			p.TypeAnnotation()
		}

	}

	return localctx
}

// IPatternContext is an interface to support dynamic dispatch.
type IPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPatternContext differentiates from other interfaces.
	IsPatternContext()
}

type PatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternContext() *PatternContext {
	var p = new(PatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_pattern
	return p
}

func (*PatternContext) IsPatternContext() {}

func NewPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternContext {
	var p = new(PatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_pattern

	return p
}

func (s *PatternContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternContext) WildcardPattern() IWildcardPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWildcardPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWildcardPatternContext)
}

func (s *PatternContext) TypeAnnotation() ITypeAnnotationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAnnotationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAnnotationContext)
}

func (s *PatternContext) IdentifierPattern() IIdentifierPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPatternContext)
}

func (s *PatternContext) TuplePattern() ITuplePatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITuplePatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITuplePatternContext)
}

func (s *PatternContext) OptionalPattern() IOptionalPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOptionalPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOptionalPatternContext)
}

func (s *PatternContext) KEYWORD_IS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IS, 0)
}

func (s *PatternContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *PatternContext) ExpressionPattern() IExpressionPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionPatternContext)
}

func (s *PatternContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *PatternContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *PatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Pattern() (localctx IPatternContext) {
	return p.pattern(0)
}

func (p *MojoParser) pattern(_p int) (localctx IPatternContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPatternContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPatternContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 156
	p.EnterRecursionRule(localctx, 156, MojoParserRULE_pattern, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1321)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 159, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1305)
			p.WildcardPattern()
		}
		p.SetState(1307)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 156, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1306)
				p.TypeAnnotation()
			}

		}

	case 2:
		{
			p.SetState(1309)
			p.IdentifierPattern()
		}
		p.SetState(1311)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1310)
				p.TypeAnnotation()
			}

		}

	case 3:
		{
			p.SetState(1313)
			p.TuplePattern()
		}
		p.SetState(1315)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1314)
				p.TypeAnnotation()
			}

		}

	case 4:
		{
			p.SetState(1317)
			p.OptionalPattern()
		}

	case 5:
		{
			p.SetState(1318)
			p.Match(MojoParserKEYWORD_IS)
		}
		{
			p.SetState(1319)
			p.type_(0)
		}

	case 6:
		{
			p.SetState(1320)
			p.ExpressionPattern()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1328)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewPatternContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_pattern)
			p.SetState(1323)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(1324)
				p.Match(MojoParserKEYWORD_AS)
			}
			{
				p.SetState(1325)
				p.type_(0)
			}

		}
		p.SetState(1330)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 160, p.GetParserRuleContext())
	}

	return localctx
}

// IWildcardPatternContext is an interface to support dynamic dispatch.
type IWildcardPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWildcardPatternContext differentiates from other interfaces.
	IsWildcardPatternContext()
}

type WildcardPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWildcardPatternContext() *WildcardPatternContext {
	var p = new(WildcardPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_wildcardPattern
	return p
}

func (*WildcardPatternContext) IsWildcardPatternContext() {}

func NewWildcardPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WildcardPatternContext {
	var p = new(WildcardPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_wildcardPattern

	return p
}

func (s *WildcardPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *WildcardPatternContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(MojoParserUNDERSCORE, 0)
}

func (s *WildcardPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildcardPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WildcardPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitWildcardPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) WildcardPattern() (localctx IWildcardPatternContext) {
	localctx = NewWildcardPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, MojoParserRULE_wildcardPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1331)
		p.Match(MojoParserUNDERSCORE)
	}

	return localctx
}

// IIdentifierPatternContext is an interface to support dynamic dispatch.
type IIdentifierPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierPatternContext differentiates from other interfaces.
	IsIdentifierPatternContext()
}

type IdentifierPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierPatternContext() *IdentifierPatternContext {
	var p = new(IdentifierPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_identifierPattern
	return p
}

func (*IdentifierPatternContext) IsIdentifierPatternContext() {}

func NewIdentifierPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierPatternContext {
	var p = new(IdentifierPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_identifierPattern

	return p
}

func (s *IdentifierPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierPatternContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *IdentifierPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIdentifierPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) IdentifierPattern() (localctx IIdentifierPatternContext) {
	localctx = NewIdentifierPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, MojoParserRULE_identifierPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1333)
		p.DeclarationIdentifier()
	}

	return localctx
}

// ITuplePatternContext is an interface to support dynamic dispatch.
type ITuplePatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTuplePatternContext differentiates from other interfaces.
	IsTuplePatternContext()
}

type TuplePatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTuplePatternContext() *TuplePatternContext {
	var p = new(TuplePatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tuplePattern
	return p
}

func (*TuplePatternContext) IsTuplePatternContext() {}

func NewTuplePatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TuplePatternContext {
	var p = new(TuplePatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tuplePattern

	return p
}

func (s *TuplePatternContext) GetParser() antlr.Parser { return s.parser }

func (s *TuplePatternContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *TuplePatternContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *TuplePatternContext) TuplePatternElementList() ITuplePatternElementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITuplePatternElementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITuplePatternElementListContext)
}

func (s *TuplePatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TuplePatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TuplePatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTuplePattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TuplePattern() (localctx ITuplePatternContext) {
	localctx = NewTuplePatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, MojoParserRULE_tuplePattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1335)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(1337)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MojoParserKEYWORD_AND)|(1<<MojoParserKEYWORD_AS)|(1<<MojoParserKEYWORD_ATTRIBUTE)|(1<<MojoParserKEYWORD_BREAK)|(1<<MojoParserKEYWORD_CONST)|(1<<MojoParserKEYWORD_ENUM)|(1<<MojoParserKEYWORD_FALSE)|(1<<MojoParserKEYWORD_FUNC)|(1<<MojoParserKEYWORD_IF)|(1<<MojoParserKEYWORD_IMPORT)|(1<<MojoParserKEYWORD_IN)|(1<<MojoParserKEYWORD_INTERFACE)|(1<<MojoParserKEYWORD_IS)|(1<<MojoParserKEYWORD_MATCH)|(1<<MojoParserKEYWORD_NOT)|(1<<MojoParserKEYWORD_NULL)|(1<<MojoParserKEYWORD_PACKAGE)|(1<<MojoParserKEYWORD_REPEATE)|(1<<MojoParserKEYWORD_RETURN)|(1<<MojoParserKEYWORD_STRUCT)|(1<<MojoParserKEYWORD_TRUE)|(1<<MojoParserKEYWORD_TYPE)|(1<<MojoParserKEYWORD_VAR)|(1<<MojoParserKEYWORD_XOR)|(1<<MojoParserDOT)|(1<<MojoParserLCURLY))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(MojoParserLPAREN-32))|(1<<(MojoParserLBRACK-32))|(1<<(MojoParserLT-32))|(1<<(MojoParserGT-32))|(1<<(MojoParserBANG-32))|(1<<(MojoParserQUESTION-32))|(1<<(MojoParserAND-32))|(1<<(MojoParserMINUS-32))|(1<<(MojoParserEQUAL-32))|(1<<(MojoParserPIPE-32))|(1<<(MojoParserSLASH-32))|(1<<(MojoParserPLUS-32))|(1<<(MojoParserSTAR-32))|(1<<(MojoParserPERCENT-32))|(1<<(MojoParserCARET-32))|(1<<(MojoParserTILDE-32))|(1<<(MojoParserUNDERSCORE-32)))) != 0) || (((_la-73)&-(0x1f+1)) == 0 && ((1<<uint((_la-73)))&((1<<(MojoParserTYPE_IDENTIFIER-73))|(1<<(MojoParserVALUE_IDENTIFIER-73))|(1<<(MojoParserOPERATOR_HEAD_OTHER-73))|(1<<(MojoParserBINARY_LITERAL-73))|(1<<(MojoParserOCTAL_LITERAL-73))|(1<<(MojoParserDECIMAL_LITERAL-73))|(1<<(MojoParserPURE_DECIMAL_DIGITS-73))|(1<<(MojoParserHEXADECIMAL_LITERAL-73))|(1<<(MojoParserFLOAT_LITERAL-73))|(1<<(MojoParserSTATIC_STRING_LITERAL-73))|(1<<(MojoParserINTERPOLATED_STRING_LITERAL-73)))) != 0) {
		{
			p.SetState(1336)
			p.TuplePatternElementList()
		}

	}
	{
		p.SetState(1339)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// ITuplePatternElementListContext is an interface to support dynamic dispatch.
type ITuplePatternElementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTuplePatternElementListContext differentiates from other interfaces.
	IsTuplePatternElementListContext()
}

type TuplePatternElementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTuplePatternElementListContext() *TuplePatternElementListContext {
	var p = new(TuplePatternElementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tuplePatternElementList
	return p
}

func (*TuplePatternElementListContext) IsTuplePatternElementListContext() {}

func NewTuplePatternElementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TuplePatternElementListContext {
	var p = new(TuplePatternElementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tuplePatternElementList

	return p
}

func (s *TuplePatternElementListContext) GetParser() antlr.Parser { return s.parser }

func (s *TuplePatternElementListContext) AllTuplePatternElement() []ITuplePatternElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITuplePatternElementContext)(nil)).Elem())
	var tst = make([]ITuplePatternElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITuplePatternElementContext)
		}
	}

	return tst
}

func (s *TuplePatternElementListContext) TuplePatternElement(i int) ITuplePatternElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITuplePatternElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITuplePatternElementContext)
}

func (s *TuplePatternElementListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MojoParserCOMMA)
}

func (s *TuplePatternElementListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, i)
}

func (s *TuplePatternElementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TuplePatternElementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TuplePatternElementListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTuplePatternElementList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TuplePatternElementList() (localctx ITuplePatternElementListContext) {
	localctx = NewTuplePatternElementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, MojoParserRULE_tuplePatternElementList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1341)
		p.TuplePatternElement()
	}
	p.SetState(1346)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserCOMMA {
		{
			p.SetState(1342)
			p.Match(MojoParserCOMMA)
		}
		{
			p.SetState(1343)
			p.TuplePatternElement()
		}

		p.SetState(1348)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ITuplePatternElementContext is an interface to support dynamic dispatch.
type ITuplePatternElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTuplePatternElementContext differentiates from other interfaces.
	IsTuplePatternElementContext()
}

type TuplePatternElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTuplePatternElementContext() *TuplePatternElementContext {
	var p = new(TuplePatternElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tuplePatternElement
	return p
}

func (*TuplePatternElementContext) IsTuplePatternElementContext() {}

func NewTuplePatternElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TuplePatternElementContext {
	var p = new(TuplePatternElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tuplePatternElement

	return p
}

func (s *TuplePatternElementContext) GetParser() antlr.Parser { return s.parser }

func (s *TuplePatternElementContext) Pattern() IPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *TuplePatternElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TuplePatternElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TuplePatternElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTuplePatternElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TuplePatternElement() (localctx ITuplePatternElementContext) {
	localctx = NewTuplePatternElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, MojoParserRULE_tuplePatternElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1349)
		p.pattern(0)
	}

	return localctx
}

// IOptionalPatternContext is an interface to support dynamic dispatch.
type IOptionalPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOptionalPatternContext differentiates from other interfaces.
	IsOptionalPatternContext()
}

type OptionalPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOptionalPatternContext() *OptionalPatternContext {
	var p = new(OptionalPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_optionalPattern
	return p
}

func (*OptionalPatternContext) IsOptionalPatternContext() {}

func NewOptionalPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OptionalPatternContext {
	var p = new(OptionalPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_optionalPattern

	return p
}

func (s *OptionalPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *OptionalPatternContext) IdentifierPattern() IIdentifierPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPatternContext)
}

func (s *OptionalPatternContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *OptionalPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OptionalPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OptionalPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOptionalPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) OptionalPattern() (localctx IOptionalPatternContext) {
	localctx = NewOptionalPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, MojoParserRULE_optionalPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1351)
		p.IdentifierPattern()
	}
	{
		p.SetState(1352)
		p.Match(MojoParserQUESTION)
	}

	return localctx
}

// IExpressionPatternContext is an interface to support dynamic dispatch.
type IExpressionPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionPatternContext differentiates from other interfaces.
	IsExpressionPatternContext()
}

type ExpressionPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionPatternContext() *ExpressionPatternContext {
	var p = new(ExpressionPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_expressionPattern
	return p
}

func (*ExpressionPatternContext) IsExpressionPatternContext() {}

func NewExpressionPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionPatternContext {
	var p = new(ExpressionPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_expressionPattern

	return p
}

func (s *ExpressionPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionPatternContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExpressionPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ExpressionPattern() (localctx IExpressionPatternContext) {
	localctx = NewExpressionPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, MojoParserRULE_expressionPattern)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1354)
		p.Expression()
	}

	return localctx
}

// IAttributeContext is an interface to support dynamic dispatch.
type IAttributeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeContext differentiates from other interfaces.
	IsAttributeContext()
}

type AttributeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeContext() *AttributeContext {
	var p = new(AttributeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attribute
	return p
}

func (*AttributeContext) IsAttributeContext() {}

func NewAttributeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeContext {
	var p = new(AttributeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attribute

	return p
}

func (s *AttributeContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeContext) AT() antlr.TerminalNode {
	return s.GetToken(MojoParserAT, 0)
}

func (s *AttributeContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserDECIMAL_LITERAL, 0)
}

func (s *AttributeContext) AttributeIdentifier() IAttributeIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeIdentifierContext)
}

func (s *AttributeContext) GenericArgumentClause() IGenericArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *AttributeContext) AttributeArgumentClause() IAttributeArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeArgumentClauseContext)
}

func (s *AttributeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttribute(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Attribute() (localctx IAttributeContext) {
	localctx = NewAttributeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, MojoParserRULE_attribute)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1366)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1356)
			p.Match(MojoParserAT)
		}
		{
			p.SetState(1357)
			p.Match(MojoParserDECIMAL_LITERAL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1358)
			p.Match(MojoParserAT)
		}
		{
			p.SetState(1359)
			p.AttributeIdentifier()
		}
		p.SetState(1361)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 163, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1360)
				p.GenericArgumentClause()
			}

		}
		p.SetState(1364)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 164, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1363)
				p.AttributeArgumentClause()
			}

		}

	}

	return localctx
}

// IAttributeIdentifierContext is an interface to support dynamic dispatch.
type IAttributeIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeIdentifierContext differentiates from other interfaces.
	IsAttributeIdentifierContext()
}

type AttributeIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeIdentifierContext() *AttributeIdentifierContext {
	var p = new(AttributeIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeIdentifier
	return p
}

func (*AttributeIdentifierContext) IsAttributeIdentifierContext() {}

func NewAttributeIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeIdentifierContext {
	var p = new(AttributeIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeIdentifier

	return p
}

func (s *AttributeIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeIdentifierContext) AttributeName() IAttributeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributeNameContext)
}

func (s *AttributeIdentifierContext) PackageIdentifier() IPackageIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageIdentifierContext)
}

func (s *AttributeIdentifierContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *AttributeIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeIdentifier() (localctx IAttributeIdentifierContext) {
	localctx = NewAttributeIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, MojoParserRULE_attributeIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1371)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1368)
			p.PackageIdentifier()
		}
		{
			p.SetState(1369)
			p.Match(MojoParserDOT)
		}

	}
	{
		p.SetState(1373)
		p.AttributeName()
	}

	return localctx
}

// IAttributeNameContext is an interface to support dynamic dispatch.
type IAttributeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeNameContext differentiates from other interfaces.
	IsAttributeNameContext()
}

type AttributeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeNameContext() *AttributeNameContext {
	var p = new(AttributeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeName
	return p
}

func (*AttributeNameContext) IsAttributeNameContext() {}

func NewAttributeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeNameContext {
	var p = new(AttributeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeName

	return p
}

func (s *AttributeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeNameContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *AttributeNameContext) KeywordAsIdentifierInLabels() IKeywordAsIdentifierInLabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeywordAsIdentifierInLabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeywordAsIdentifierInLabelsContext)
}

func (s *AttributeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeName() (localctx IAttributeNameContext) {
	localctx = NewAttributeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, MojoParserRULE_attributeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1377)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserVALUE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1375)
			p.Match(MojoParserVALUE_IDENTIFIER)
		}

	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_CONTINUE, MojoParserKEYWORD_ELSE, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FALSE, MojoParserKEYWORD_FOR, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_OR, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TRUE, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_WHILE, MojoParserKEYWORD_XOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1376)
			p.KeywordAsIdentifierInLabels()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IAttributeArgumentClauseContext is an interface to support dynamic dispatch.
type IAttributeArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributeArgumentClauseContext differentiates from other interfaces.
	IsAttributeArgumentClauseContext()
}

type AttributeArgumentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributeArgumentClauseContext() *AttributeArgumentClauseContext {
	var p = new(AttributeArgumentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributeArgumentClause
	return p
}

func (*AttributeArgumentClauseContext) IsAttributeArgumentClauseContext() {}

func NewAttributeArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributeArgumentClauseContext {
	var p = new(AttributeArgumentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributeArgumentClause

	return p
}

func (s *AttributeArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributeArgumentClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *AttributeArgumentClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *AttributeArgumentClauseContext) Expressions() IExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionsContext)
}

func (s *AttributeArgumentClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *AttributeArgumentClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *AttributeArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributeArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributeArgumentClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributeArgumentClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AttributeArgumentClause() (localctx IAttributeArgumentClauseContext) {
	localctx = NewAttributeArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, MojoParserRULE_attributeArgumentClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1379)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(1387)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext()) == 1 {
		p.SetState(1383)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1380)
				p.Match(MojoParserEOL)
			}

			p.SetState(1385)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1386)
			p.Expressions()
		}

	}
	p.SetState(1392)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1389)
			p.Match(MojoParserEOL)
		}

		p.SetState(1394)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1395)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// IAttributesContext is an interface to support dynamic dispatch.
type IAttributesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAttributesContext differentiates from other interfaces.
	IsAttributesContext()
}

type AttributesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAttributesContext() *AttributesContext {
	var p = new(AttributesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_attributes
	return p
}

func (*AttributesContext) IsAttributesContext() {}

func NewAttributesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AttributesContext {
	var p = new(AttributesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_attributes

	return p
}

func (s *AttributesContext) GetParser() antlr.Parser { return s.parser }

func (s *AttributesContext) AllAttribute() []IAttributeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributeContext)(nil)).Elem())
	var tst = make([]IAttributeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributeContext)
		}
	}

	return tst
}

func (s *AttributesContext) Attribute(i int) IAttributeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributeContext)
}

func (s *AttributesContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *AttributesContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *AttributesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AttributesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AttributesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAttributes(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Attributes() (localctx IAttributesContext) {
	localctx = NewAttributesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, MojoParserRULE_attributes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1397)
		p.Attribute()
	}
	p.SetState(1407)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1401)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1398)
					p.Match(MojoParserEOL)
				}

				p.SetState(1403)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1404)
				p.Attribute()
			}

		}
		p.SetState(1409)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext())
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) PrefixExpression() IPrefixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixExpressionContext)
}

func (s *ExpressionContext) BinaryExpressions() IBinaryExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinaryExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBinaryExpressionsContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, MojoParserRULE_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1410)
		p.PrefixExpression()
	}
	p.SetState(1412)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1411)
			p.BinaryExpressions()
		}

	}

	return localctx
}

// IExpressionsContext is an interface to support dynamic dispatch.
type IExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionsContext differentiates from other interfaces.
	IsExpressionsContext()
}

type ExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionsContext() *ExpressionsContext {
	var p = new(ExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_expressions
	return p
}

func (*ExpressionsContext) IsExpressionsContext() {}

func NewExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionsContext {
	var p = new(ExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_expressions

	return p
}

func (s *ExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionsContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionsContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionsContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *ExpressionsContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ExpressionsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ExpressionsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExpressions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Expressions() (localctx IExpressionsContext) {
	localctx = NewExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, MojoParserRULE_expressions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1414)
		p.Expression()
	}
	p.SetState(1426)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1415)
				p.Eov()
			}
			p.SetState(1419)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1416)
					p.Match(MojoParserEOL)
				}

				p.SetState(1421)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1422)
				p.Expression()
			}

		}
		p.SetState(1428)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 175, p.GetParserRuleContext())
	}
	p.SetState(1430)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 176, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1429)
			p.Eov()
		}

	}

	return localctx
}

// IPrefixExpressionContext is an interface to support dynamic dispatch.
type IPrefixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixExpressionContext differentiates from other interfaces.
	IsPrefixExpressionContext()
}

type PrefixExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixExpressionContext() *PrefixExpressionContext {
	var p = new(PrefixExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_prefixExpression
	return p
}

func (*PrefixExpressionContext) IsPrefixExpressionContext() {}

func NewPrefixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixExpressionContext {
	var p = new(PrefixExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_prefixExpression

	return p
}

func (s *PrefixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixExpressionContext) PrefixOperator() IPrefixOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixOperatorContext)
}

func (s *PrefixExpressionContext) PostfixExpression() IPostfixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixExpressionContext)
}

func (s *PrefixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrefixExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrefixExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrefixExpression() (localctx IPrefixExpressionContext) {
	localctx = NewPrefixExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, MojoParserRULE_prefixExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1436)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 177, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1432)
			p.PrefixOperator()
		}
		{
			p.SetState(1433)
			p.PostfixExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1435)
			p.PostfixExpression()
		}

	}

	return localctx
}

// IBinaryExpressionContext is an interface to support dynamic dispatch.
type IBinaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinaryExpressionContext differentiates from other interfaces.
	IsBinaryExpressionContext()
}

type BinaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinaryExpressionContext() *BinaryExpressionContext {
	var p = new(BinaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_binaryExpression
	return p
}

func (*BinaryExpressionContext) IsBinaryExpressionContext() {}

func NewBinaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinaryExpressionContext {
	var p = new(BinaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_binaryExpression

	return p
}

func (s *BinaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *BinaryExpressionContext) BinaryOperator() IBinaryOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinaryOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBinaryOperatorContext)
}

func (s *BinaryExpressionContext) PrefixExpression() IPrefixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixExpressionContext)
}

func (s *BinaryExpressionContext) AssignmentOperator() IAssignmentOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentOperatorContext)
}

func (s *BinaryExpressionContext) ConditionalOperator() IConditionalOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConditionalOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConditionalOperatorContext)
}

func (s *BinaryExpressionContext) TypeCastingOperator() ITypeCastingOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeCastingOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeCastingOperatorContext)
}

func (s *BinaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBinaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BinaryExpression() (localctx IBinaryExpressionContext) {
	localctx = NewBinaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, MojoParserRULE_binaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1448)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 178, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1438)
			p.BinaryOperator()
		}
		{
			p.SetState(1439)
			p.PrefixExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1441)
			p.AssignmentOperator()
		}
		{
			p.SetState(1442)
			p.PrefixExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1444)
			p.ConditionalOperator()
		}
		{
			p.SetState(1445)
			p.PrefixExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1447)
			p.TypeCastingOperator()
		}

	}

	return localctx
}

// IBinaryExpressionsContext is an interface to support dynamic dispatch.
type IBinaryExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinaryExpressionsContext differentiates from other interfaces.
	IsBinaryExpressionsContext()
}

type BinaryExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinaryExpressionsContext() *BinaryExpressionsContext {
	var p = new(BinaryExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_binaryExpressions
	return p
}

func (*BinaryExpressionsContext) IsBinaryExpressionsContext() {}

func NewBinaryExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinaryExpressionsContext {
	var p = new(BinaryExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_binaryExpressions

	return p
}

func (s *BinaryExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *BinaryExpressionsContext) AllBinaryExpression() []IBinaryExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBinaryExpressionContext)(nil)).Elem())
	var tst = make([]IBinaryExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBinaryExpressionContext)
		}
	}

	return tst
}

func (s *BinaryExpressionsContext) BinaryExpression(i int) IBinaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinaryExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBinaryExpressionContext)
}

func (s *BinaryExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinaryExpressionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBinaryExpressions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BinaryExpressions() (localctx IBinaryExpressionsContext) {
	localctx = NewBinaryExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, MojoParserRULE_binaryExpressions)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1451)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1450)
				p.BinaryExpression()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1453)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext())
	}

	return localctx
}

// IConditionalOperatorContext is an interface to support dynamic dispatch.
type IConditionalOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConditionalOperatorContext differentiates from other interfaces.
	IsConditionalOperatorContext()
}

type ConditionalOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConditionalOperatorContext() *ConditionalOperatorContext {
	var p = new(ConditionalOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_conditionalOperator
	return p
}

func (*ConditionalOperatorContext) IsConditionalOperatorContext() {}

func NewConditionalOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConditionalOperatorContext {
	var p = new(ConditionalOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_conditionalOperator

	return p
}

func (s *ConditionalOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ConditionalOperatorContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *ConditionalOperatorContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionalOperatorContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *ConditionalOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConditionalOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitConditionalOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ConditionalOperator() (localctx IConditionalOperatorContext) {
	localctx = NewConditionalOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, MojoParserRULE_conditionalOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1455)
		p.Match(MojoParserQUESTION)
	}
	{
		p.SetState(1456)
		p.Expression()
	}
	{
		p.SetState(1457)
		p.Match(MojoParserCOLON)
	}

	return localctx
}

// ITypeCastingOperatorContext is an interface to support dynamic dispatch.
type ITypeCastingOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeCastingOperatorContext differentiates from other interfaces.
	IsTypeCastingOperatorContext()
}

type TypeCastingOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeCastingOperatorContext() *TypeCastingOperatorContext {
	var p = new(TypeCastingOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeCastingOperator
	return p
}

func (*TypeCastingOperatorContext) IsTypeCastingOperatorContext() {}

func NewTypeCastingOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeCastingOperatorContext {
	var p = new(TypeCastingOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeCastingOperator

	return p
}

func (s *TypeCastingOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeCastingOperatorContext) KEYWORD_IS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IS, 0)
}

func (s *TypeCastingOperatorContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeCastingOperatorContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *TypeCastingOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeCastingOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeCastingOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeCastingOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeCastingOperator() (localctx ITypeCastingOperatorContext) {
	localctx = NewTypeCastingOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, MojoParserRULE_typeCastingOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1463)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserKEYWORD_IS:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1459)
			p.Match(MojoParserKEYWORD_IS)
		}
		{
			p.SetState(1460)
			p.type_(0)
		}

	case MojoParserKEYWORD_AS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1461)
			p.Match(MojoParserKEYWORD_AS)
		}
		{
			p.SetState(1462)
			p.type_(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *PrimaryExpressionContext) GenericArgumentClause() IGenericArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *PrimaryExpressionContext) LiteralExpression() ILiteralExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralExpressionContext)
}

func (s *PrimaryExpressionContext) TypeIdentifier() ITypeIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierContext)
}

func (s *PrimaryExpressionContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *PrimaryExpressionContext) ClosureExpression() IClosureExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClosureExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClosureExpressionContext)
}

func (s *PrimaryExpressionContext) ParenthesizedExpression() IParenthesizedExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParenthesizedExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParenthesizedExpressionContext)
}

func (s *PrimaryExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *PrimaryExpressionContext) ImplicitMemberExpression() IImplicitMemberExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplicitMemberExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplicitMemberExpressionContext)
}

func (s *PrimaryExpressionContext) WildcardExpression() IWildcardExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWildcardExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWildcardExpressionContext)
}

func (s *PrimaryExpressionContext) StructConstructionExpression() IStructConstructionExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructConstructionExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructConstructionExpressionContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrimaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, MojoParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1482)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 183, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1465)
			p.DeclarationIdentifier()
		}
		p.SetState(1467)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 181, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1466)
				p.GenericArgumentClause()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1469)
			p.LiteralExpression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1470)
			p.TypeIdentifier()
		}
		{
			p.SetState(1471)
			p.Match(MojoParserDOT)
		}
		{
			p.SetState(1472)
			p.DeclarationIdentifier()
		}
		p.SetState(1474)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1473)
				p.GenericArgumentClause()
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1476)
			p.ClosureExpression()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1477)
			p.ParenthesizedExpression()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1478)
			p.TupleExpression()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1479)
			p.ImplicitMemberExpression()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1480)
			p.WildcardExpression()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1481)
			p.StructConstructionExpression()
		}

	}

	return localctx
}

// ILiteralExpressionContext is an interface to support dynamic dispatch.
type ILiteralExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralExpressionContext differentiates from other interfaces.
	IsLiteralExpressionContext()
}

type LiteralExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralExpressionContext() *LiteralExpressionContext {
	var p = new(LiteralExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_literalExpression
	return p
}

func (*LiteralExpressionContext) IsLiteralExpressionContext() {}

func NewLiteralExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralExpressionContext {
	var p = new(LiteralExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_literalExpression

	return p
}

func (s *LiteralExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralExpressionContext) NumericOperatorLiteral() INumericOperatorLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumericOperatorLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumericOperatorLiteralContext)
}

func (s *LiteralExpressionContext) StringOperatorLiteral() IStringOperatorLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringOperatorLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringOperatorLiteralContext)
}

func (s *LiteralExpressionContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *LiteralExpressionContext) ArrayLiteral() IArrayLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralContext)
}

func (s *LiteralExpressionContext) MapLiteral() IMapLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMapLiteralContext)
}

func (s *LiteralExpressionContext) ObjectLiteral() IObjectLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *LiteralExpressionContext) StructLiteral() IStructLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructLiteralContext)
}

func (s *LiteralExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLiteralExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LiteralExpression() (localctx ILiteralExpressionContext) {
	localctx = NewLiteralExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, MojoParserRULE_literalExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1491)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1484)
			p.NumericOperatorLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1485)
			p.StringOperatorLiteral()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1486)
			p.Literal()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1487)
			p.ArrayLiteral()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1488)
			p.MapLiteral()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1489)
			p.ObjectLiteral()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1490)
			p.StructLiteral()
		}

	}

	return localctx
}

// INumericOperatorLiteralContext is an interface to support dynamic dispatch.
type INumericOperatorLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumericOperatorLiteralContext differentiates from other interfaces.
	IsNumericOperatorLiteralContext()
}

type NumericOperatorLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericOperatorLiteralContext() *NumericOperatorLiteralContext {
	var p = new(NumericOperatorLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_numericOperatorLiteral
	return p
}

func (*NumericOperatorLiteralContext) IsNumericOperatorLiteralContext() {}

func NewNumericOperatorLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericOperatorLiteralContext {
	var p = new(NumericOperatorLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_numericOperatorLiteral

	return p
}

func (s *NumericOperatorLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericOperatorLiteralContext) NumericLiteral() INumericLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumericLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumericLiteralContext)
}

func (s *NumericOperatorLiteralContext) PostfixLiteralOperator() IPostfixLiteralOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixLiteralOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixLiteralOperatorContext)
}

func (s *NumericOperatorLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericOperatorLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericOperatorLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitNumericOperatorLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) NumericOperatorLiteral() (localctx INumericOperatorLiteralContext) {
	localctx = NewNumericOperatorLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, MojoParserRULE_numericOperatorLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1493)
		p.NumericLiteral()
	}
	{
		p.SetState(1494)
		p.PostfixLiteralOperator()
	}

	return localctx
}

// IStringOperatorLiteralContext is an interface to support dynamic dispatch.
type IStringOperatorLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringOperatorLiteralContext differentiates from other interfaces.
	IsStringOperatorLiteralContext()
}

type StringOperatorLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringOperatorLiteralContext() *StringOperatorLiteralContext {
	var p = new(StringOperatorLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_stringOperatorLiteral
	return p
}

func (*StringOperatorLiteralContext) IsStringOperatorLiteralContext() {}

func NewStringOperatorLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringOperatorLiteralContext {
	var p = new(StringOperatorLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_stringOperatorLiteral

	return p
}

func (s *StringOperatorLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringOperatorLiteralContext) PrefixLiteralOperator() IPrefixLiteralOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrefixLiteralOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrefixLiteralOperatorContext)
}

func (s *StringOperatorLiteralContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *StringOperatorLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringOperatorLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringOperatorLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStringOperatorLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StringOperatorLiteral() (localctx IStringOperatorLiteralContext) {
	localctx = NewStringOperatorLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, MojoParserRULE_stringOperatorLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1496)
		p.PrefixLiteralOperator()
	}
	{
		p.SetState(1497)
		p.StringLiteral()
	}

	return localctx
}

// IPostfixLiteralOperatorContext is an interface to support dynamic dispatch.
type IPostfixLiteralOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixLiteralOperatorContext differentiates from other interfaces.
	IsPostfixLiteralOperatorContext()
}

type PostfixLiteralOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixLiteralOperatorContext() *PostfixLiteralOperatorContext {
	var p = new(PostfixLiteralOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_postfixLiteralOperator
	return p
}

func (*PostfixLiteralOperatorContext) IsPostfixLiteralOperatorContext() {}

func NewPostfixLiteralOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixLiteralOperatorContext {
	var p = new(PostfixLiteralOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_postfixLiteralOperator

	return p
}

func (s *PostfixLiteralOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixLiteralOperatorContext) TYPE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserTYPE_IDENTIFIER, 0)
}

func (s *PostfixLiteralOperatorContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *PostfixLiteralOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixLiteralOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixLiteralOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPostfixLiteralOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PostfixLiteralOperator() (localctx IPostfixLiteralOperatorContext) {
	localctx = NewPostfixLiteralOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, MojoParserRULE_postfixLiteralOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1499)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserTYPE_IDENTIFIER || _la == MojoParserVALUE_IDENTIFIER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPrefixLiteralOperatorContext is an interface to support dynamic dispatch.
type IPrefixLiteralOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixLiteralOperatorContext differentiates from other interfaces.
	IsPrefixLiteralOperatorContext()
}

type PrefixLiteralOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixLiteralOperatorContext() *PrefixLiteralOperatorContext {
	var p = new(PrefixLiteralOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_prefixLiteralOperator
	return p
}

func (*PrefixLiteralOperatorContext) IsPrefixLiteralOperatorContext() {}

func NewPrefixLiteralOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixLiteralOperatorContext {
	var p = new(PrefixLiteralOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_prefixLiteralOperator

	return p
}

func (s *PrefixLiteralOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixLiteralOperatorContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *PrefixLiteralOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixLiteralOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrefixLiteralOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrefixLiteralOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrefixLiteralOperator() (localctx IPrefixLiteralOperatorContext) {
	localctx = NewPrefixLiteralOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, MojoParserRULE_prefixLiteralOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1501)
		p.Match(MojoParserVALUE_IDENTIFIER)
	}

	return localctx
}

// IArrayLiteralContext is an interface to support dynamic dispatch.
type IArrayLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteralContext differentiates from other interfaces.
	IsArrayLiteralContext()
}

type ArrayLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralContext() *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayLiteral
	return p
}

func (*ArrayLiteralContext) IsArrayLiteralContext() {}

func NewArrayLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralContext {
	var p = new(ArrayLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayLiteral

	return p
}

func (s *ArrayLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserLBRACK, 0)
}

func (s *ArrayLiteralContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserRBRACK, 0)
}

func (s *ArrayLiteralContext) ArrayLiteralItems() IArrayLiteralItemsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteralItemsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralItemsContext)
}

func (s *ArrayLiteralContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ArrayLiteralContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ArrayLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayLiteral() (localctx IArrayLiteralContext) {
	localctx = NewArrayLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, MojoParserRULE_arrayLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1503)
		p.Match(MojoParserLBRACK)
	}
	p.SetState(1511)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
		p.SetState(1507)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1504)
				p.Match(MojoParserEOL)
			}

			p.SetState(1509)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1510)
			p.ArrayLiteralItems()
		}

	}
	p.SetState(1516)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1513)
			p.Match(MojoParserEOL)
		}

		p.SetState(1518)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1519)
		p.Match(MojoParserRBRACK)
	}

	return localctx
}

// IArrayLiteralItemsContext is an interface to support dynamic dispatch.
type IArrayLiteralItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteralItemsContext differentiates from other interfaces.
	IsArrayLiteralItemsContext()
}

type ArrayLiteralItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralItemsContext() *ArrayLiteralItemsContext {
	var p = new(ArrayLiteralItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayLiteralItems
	return p
}

func (*ArrayLiteralItemsContext) IsArrayLiteralItemsContext() {}

func NewArrayLiteralItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralItemsContext {
	var p = new(ArrayLiteralItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayLiteralItems

	return p
}

func (s *ArrayLiteralItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralItemsContext) AllArrayLiteralItem() []IArrayLiteralItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArrayLiteralItemContext)(nil)).Elem())
	var tst = make([]IArrayLiteralItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArrayLiteralItemContext)
		}
	}

	return tst
}

func (s *ArrayLiteralItemsContext) ArrayLiteralItem(i int) IArrayLiteralItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLiteralItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArrayLiteralItemContext)
}

func (s *ArrayLiteralItemsContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *ArrayLiteralItemsContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ArrayLiteralItemsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ArrayLiteralItemsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ArrayLiteralItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralItemsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayLiteralItems(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayLiteralItems() (localctx IArrayLiteralItemsContext) {
	localctx = NewArrayLiteralItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, MojoParserRULE_arrayLiteralItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1521)
		p.ArrayLiteralItem()
	}
	p.SetState(1533)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1522)
				p.Eov()
			}
			p.SetState(1526)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1523)
					p.Match(MojoParserEOL)
				}

				p.SetState(1528)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1529)
				p.ArrayLiteralItem()
			}

		}
		p.SetState(1535)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 189, p.GetParserRuleContext())
	}
	p.SetState(1537)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 190, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1536)
			p.Eov()
		}

	}

	return localctx
}

// IArrayLiteralItemContext is an interface to support dynamic dispatch.
type IArrayLiteralItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLiteralItemContext differentiates from other interfaces.
	IsArrayLiteralItemContext()
}

type ArrayLiteralItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLiteralItemContext() *ArrayLiteralItemContext {
	var p = new(ArrayLiteralItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayLiteralItem
	return p
}

func (*ArrayLiteralItemContext) IsArrayLiteralItemContext() {}

func NewArrayLiteralItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLiteralItemContext {
	var p = new(ArrayLiteralItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayLiteralItem

	return p
}

func (s *ArrayLiteralItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLiteralItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayLiteralItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLiteralItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLiteralItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayLiteralItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayLiteralItem() (localctx IArrayLiteralItemContext) {
	localctx = NewArrayLiteralItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, MojoParserRULE_arrayLiteralItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1539)
		p.Expression()
	}

	return localctx
}

// IMapLiteralContext is an interface to support dynamic dispatch.
type IMapLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapLiteralContext differentiates from other interfaces.
	IsMapLiteralContext()
}

type MapLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapLiteralContext() *MapLiteralContext {
	var p = new(MapLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_mapLiteral
	return p
}

func (*MapLiteralContext) IsMapLiteralContext() {}

func NewMapLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapLiteralContext {
	var p = new(MapLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_mapLiteral

	return p
}

func (s *MapLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *MapLiteralContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *MapLiteralContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *MapLiteralContext) MapLiteralItems() IMapLiteralItemsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapLiteralItemsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMapLiteralItemsContext)
}

func (s *MapLiteralContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MapLiteralContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MapLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMapLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MapLiteral() (localctx IMapLiteralContext) {
	localctx = NewMapLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, MojoParserRULE_mapLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1541)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1549)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 192, p.GetParserRuleContext()) == 1 {
		p.SetState(1545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1542)
				p.Match(MojoParserEOL)
			}

			p.SetState(1547)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1548)
			p.MapLiteralItems()
		}

	}
	p.SetState(1554)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1551)
			p.Match(MojoParserEOL)
		}

		p.SetState(1556)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1557)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IMapLiteralItemsContext is an interface to support dynamic dispatch.
type IMapLiteralItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapLiteralItemsContext differentiates from other interfaces.
	IsMapLiteralItemsContext()
}

type MapLiteralItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapLiteralItemsContext() *MapLiteralItemsContext {
	var p = new(MapLiteralItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_mapLiteralItems
	return p
}

func (*MapLiteralItemsContext) IsMapLiteralItemsContext() {}

func NewMapLiteralItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapLiteralItemsContext {
	var p = new(MapLiteralItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_mapLiteralItems

	return p
}

func (s *MapLiteralItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *MapLiteralItemsContext) AllMapLiteralItem() []IMapLiteralItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMapLiteralItemContext)(nil)).Elem())
	var tst = make([]IMapLiteralItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMapLiteralItemContext)
		}
	}

	return tst
}

func (s *MapLiteralItemsContext) MapLiteralItem(i int) IMapLiteralItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapLiteralItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMapLiteralItemContext)
}

func (s *MapLiteralItemsContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *MapLiteralItemsContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *MapLiteralItemsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *MapLiteralItemsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *MapLiteralItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapLiteralItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapLiteralItemsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMapLiteralItems(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MapLiteralItems() (localctx IMapLiteralItemsContext) {
	localctx = NewMapLiteralItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, MojoParserRULE_mapLiteralItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1559)
		p.MapLiteralItem()
	}
	p.SetState(1571)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 195, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1560)
				p.Eov()
			}
			p.SetState(1564)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1561)
					p.Match(MojoParserEOL)
				}

				p.SetState(1566)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1567)
				p.MapLiteralItem()
			}

		}
		p.SetState(1573)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 195, p.GetParserRuleContext())
	}
	p.SetState(1575)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 196, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1574)
			p.Eov()
		}

	}

	return localctx
}

// IMapLiteralItemContext is an interface to support dynamic dispatch.
type IMapLiteralItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapLiteralItemContext differentiates from other interfaces.
	IsMapLiteralItemContext()
}

type MapLiteralItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapLiteralItemContext() *MapLiteralItemContext {
	var p = new(MapLiteralItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_mapLiteralItem
	return p
}

func (*MapLiteralItemContext) IsMapLiteralItemContext() {}

func NewMapLiteralItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapLiteralItemContext {
	var p = new(MapLiteralItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_mapLiteralItem

	return p
}

func (s *MapLiteralItemContext) GetParser() antlr.Parser { return s.parser }

func (s *MapLiteralItemContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *MapLiteralItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MapLiteralItemContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *MapLiteralItemContext) IntegerLiteral() IIntegerLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerLiteralContext)
}

func (s *MapLiteralItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapLiteralItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapLiteralItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMapLiteralItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MapLiteralItem() (localctx IMapLiteralItemContext) {
	localctx = NewMapLiteralItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, MojoParserRULE_mapLiteralItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1579)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserSTATIC_STRING_LITERAL, MojoParserINTERPOLATED_STRING_LITERAL:
		{
			p.SetState(1577)
			p.StringLiteral()
		}

	case MojoParserBINARY_LITERAL, MojoParserOCTAL_LITERAL, MojoParserDECIMAL_LITERAL, MojoParserPURE_DECIMAL_DIGITS, MojoParserHEXADECIMAL_LITERAL:
		{
			p.SetState(1578)
			p.IntegerLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1581)
		p.Match(MojoParserCOLON)
	}
	{
		p.SetState(1582)
		p.Expression()
	}

	return localctx
}

// IObjectLiteralContext is an interface to support dynamic dispatch.
type IObjectLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralContext differentiates from other interfaces.
	IsObjectLiteralContext()
}

type ObjectLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralContext() *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_objectLiteral
	return p
}

func (*ObjectLiteralContext) IsObjectLiteralContext() {}

func NewObjectLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralContext {
	var p = new(ObjectLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_objectLiteral

	return p
}

func (s *ObjectLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *ObjectLiteralContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *ObjectLiteralContext) ObjectLiteralItems() IObjectLiteralItemsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralItemsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralItemsContext)
}

func (s *ObjectLiteralContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ObjectLiteralContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ObjectLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitObjectLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ObjectLiteral() (localctx IObjectLiteralContext) {
	localctx = NewObjectLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, MojoParserRULE_objectLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1584)
		p.Match(MojoParserLCURLY)
	}
	p.SetState(1592)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 199, p.GetParserRuleContext()) == 1 {
		p.SetState(1588)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1585)
				p.Match(MojoParserEOL)
			}

			p.SetState(1590)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1591)
			p.ObjectLiteralItems()
		}

	}
	p.SetState(1597)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1594)
			p.Match(MojoParserEOL)
		}

		p.SetState(1599)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1600)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// IObjectLiteralItemsContext is an interface to support dynamic dispatch.
type IObjectLiteralItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralItemsContext differentiates from other interfaces.
	IsObjectLiteralItemsContext()
}

type ObjectLiteralItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralItemsContext() *ObjectLiteralItemsContext {
	var p = new(ObjectLiteralItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_objectLiteralItems
	return p
}

func (*ObjectLiteralItemsContext) IsObjectLiteralItemsContext() {}

func NewObjectLiteralItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralItemsContext {
	var p = new(ObjectLiteralItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_objectLiteralItems

	return p
}

func (s *ObjectLiteralItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralItemsContext) AllObjectLiteralItem() []IObjectLiteralItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IObjectLiteralItemContext)(nil)).Elem())
	var tst = make([]IObjectLiteralItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IObjectLiteralItemContext)
		}
	}

	return tst
}

func (s *ObjectLiteralItemsContext) ObjectLiteralItem(i int) IObjectLiteralItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralItemContext)
}

func (s *ObjectLiteralItemsContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *ObjectLiteralItemsContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ObjectLiteralItemsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ObjectLiteralItemsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ObjectLiteralItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralItemsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitObjectLiteralItems(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ObjectLiteralItems() (localctx IObjectLiteralItemsContext) {
	localctx = NewObjectLiteralItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, MojoParserRULE_objectLiteralItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1602)
		p.ObjectLiteralItem()
	}
	p.SetState(1614)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1603)
				p.Eov()
			}
			p.SetState(1607)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1604)
					p.Match(MojoParserEOL)
				}

				p.SetState(1609)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1610)
				p.ObjectLiteralItem()
			}

		}
		p.SetState(1616)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext())
	}
	p.SetState(1618)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 203, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1617)
			p.Eov()
		}

	}

	return localctx
}

// IObjectLiteralItemContext is an interface to support dynamic dispatch.
type IObjectLiteralItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectLiteralItemContext differentiates from other interfaces.
	IsObjectLiteralItemContext()
}

type ObjectLiteralItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectLiteralItemContext() *ObjectLiteralItemContext {
	var p = new(ObjectLiteralItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_objectLiteralItem
	return p
}

func (*ObjectLiteralItemContext) IsObjectLiteralItemContext() {}

func NewObjectLiteralItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectLiteralItemContext {
	var p = new(ObjectLiteralItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_objectLiteralItem

	return p
}

func (s *ObjectLiteralItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectLiteralItemContext) PathIdentifier() IPathIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPathIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPathIdentifierContext)
}

func (s *ObjectLiteralItemContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *ObjectLiteralItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ObjectLiteralItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectLiteralItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectLiteralItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitObjectLiteralItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ObjectLiteralItem() (localctx IObjectLiteralItemContext) {
	localctx = NewObjectLiteralItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, MojoParserRULE_objectLiteralItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1620)
		p.PathIdentifier()
	}
	p.SetState(1623)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserCOLON {
		{
			p.SetState(1621)
			p.Match(MojoParserCOLON)
		}
		{
			p.SetState(1622)
			p.Expression()
		}

	}

	return localctx
}

// IStructLiteralContext is an interface to support dynamic dispatch.
type IStructLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructLiteralContext differentiates from other interfaces.
	IsStructLiteralContext()
}

type StructLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructLiteralContext() *StructLiteralContext {
	var p = new(StructLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structLiteral
	return p
}

func (*StructLiteralContext) IsStructLiteralContext() {}

func NewStructLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructLiteralContext {
	var p = new(StructLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structLiteral

	return p
}

func (s *StructLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StructLiteralContext) TypeIdentifier() ITypeIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierContext)
}

func (s *StructLiteralContext) ObjectLiteral() IObjectLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectLiteralContext)
}

func (s *StructLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructLiteral() (localctx IStructLiteralContext) {
	localctx = NewStructLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, MojoParserRULE_structLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1625)
		p.TypeIdentifier()
	}
	{
		p.SetState(1626)
		p.ObjectLiteral()
	}

	return localctx
}

// IStructConstructionExpressionContext is an interface to support dynamic dispatch.
type IStructConstructionExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructConstructionExpressionContext differentiates from other interfaces.
	IsStructConstructionExpressionContext()
}

type StructConstructionExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructConstructionExpressionContext() *StructConstructionExpressionContext {
	var p = new(StructConstructionExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_structConstructionExpression
	return p
}

func (*StructConstructionExpressionContext) IsStructConstructionExpressionContext() {}

func NewStructConstructionExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructConstructionExpressionContext {
	var p = new(StructConstructionExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_structConstructionExpression

	return p
}

func (s *StructConstructionExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *StructConstructionExpressionContext) TypeIdentifier() ITypeIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierContext)
}

func (s *StructConstructionExpressionContext) FunctionCallSuffix() IFunctionCallSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallSuffixContext)
}

func (s *StructConstructionExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructConstructionExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructConstructionExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStructConstructionExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StructConstructionExpression() (localctx IStructConstructionExpressionContext) {
	localctx = NewStructConstructionExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, MojoParserRULE_structConstructionExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1628)
		p.TypeIdentifier()
	}
	{
		p.SetState(1629)
		p.FunctionCallSuffix()
	}

	return localctx
}

// IClosureExpressionContext is an interface to support dynamic dispatch.
type IClosureExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClosureExpressionContext differentiates from other interfaces.
	IsClosureExpressionContext()
}

type ClosureExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClosureExpressionContext() *ClosureExpressionContext {
	var p = new(ClosureExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_closureExpression
	return p
}

func (*ClosureExpressionContext) IsClosureExpressionContext() {}

func NewClosureExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClosureExpressionContext {
	var p = new(ClosureExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_closureExpression

	return p
}

func (s *ClosureExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ClosureExpressionContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *ClosureExpressionContext) Statements() IStatementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementsContext)
}

func (s *ClosureExpressionContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *ClosureExpressionContext) ClosureParameters() IClosureParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClosureParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClosureParametersContext)
}

func (s *ClosureExpressionContext) RIGHT_ARROW() antlr.TerminalNode {
	return s.GetToken(MojoParserRIGHT_ARROW, 0)
}

func (s *ClosureExpressionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ClosureExpressionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ClosureExpressionContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ClosureExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClosureExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClosureExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitClosureExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ClosureExpression() (localctx IClosureExpressionContext) {
	localctx = NewClosureExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, MojoParserRULE_closureExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(1662)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 209, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1631)
			p.Match(MojoParserLCURLY)
		}
		{
			p.SetState(1632)
			p.Statements()
		}
		{
			p.SetState(1633)
			p.Match(MojoParserRCURLY)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1635)
			p.Match(MojoParserLCURLY)
		}
		{
			p.SetState(1636)
			p.ClosureParameters()
		}
		p.SetState(1640)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1637)
				p.Match(MojoParserEOL)
			}

			p.SetState(1642)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1643)
			p.Match(MojoParserRIGHT_ARROW)
		}
		p.SetState(1651)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 207, p.GetParserRuleContext()) == 1 {
			p.SetState(1647)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1644)
					p.Match(MojoParserEOL)
				}

				p.SetState(1649)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1650)
				p.type_(0)
			}

		}
		p.SetState(1656)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 208, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1653)
					p.Match(MojoParserEOL)
				}

			}
			p.SetState(1658)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 208, p.GetParserRuleContext())
		}
		{
			p.SetState(1659)
			p.Statements()
		}
		{
			p.SetState(1660)
			p.Match(MojoParserRCURLY)
		}

	}

	return localctx
}

// IClosureParametersContext is an interface to support dynamic dispatch.
type IClosureParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClosureParametersContext differentiates from other interfaces.
	IsClosureParametersContext()
}

type ClosureParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClosureParametersContext() *ClosureParametersContext {
	var p = new(ClosureParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_closureParameters
	return p
}

func (*ClosureParametersContext) IsClosureParametersContext() {}

func NewClosureParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClosureParametersContext {
	var p = new(ClosureParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_closureParameters

	return p
}

func (s *ClosureParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *ClosureParametersContext) AllClosureParameter() []IClosureParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IClosureParameterContext)(nil)).Elem())
	var tst = make([]IClosureParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IClosureParameterContext)
		}
	}

	return tst
}

func (s *ClosureParametersContext) ClosureParameter(i int) IClosureParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClosureParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IClosureParameterContext)
}

func (s *ClosureParametersContext) AllEov() []IEovContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovContext)(nil)).Elem())
	var tst = make([]IEovContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovContext)
		}
	}

	return tst
}

func (s *ClosureParametersContext) Eov(i int) IEovContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovContext)
}

func (s *ClosureParametersContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ClosureParametersContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ClosureParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClosureParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClosureParametersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitClosureParameters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ClosureParameters() (localctx IClosureParametersContext) {
	localctx = NewClosureParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, MojoParserRULE_closureParameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1664)
		p.ClosureParameter()
	}
	p.SetState(1676)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1665)
				p.Eov()
			}
			p.SetState(1669)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1666)
					p.Match(MojoParserEOL)
				}

				p.SetState(1671)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1672)
				p.ClosureParameter()
			}

		}
		p.SetState(1678)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 211, p.GetParserRuleContext())
	}
	p.SetState(1680)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 212, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1679)
			p.Eov()
		}

	}

	return localctx
}

// IClosureParameterContext is an interface to support dynamic dispatch.
type IClosureParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsClosureParameterContext differentiates from other interfaces.
	IsClosureParameterContext()
}

type ClosureParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyClosureParameterContext() *ClosureParameterContext {
	var p = new(ClosureParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_closureParameter
	return p
}

func (*ClosureParameterContext) IsClosureParameterContext() {}

func NewClosureParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ClosureParameterContext {
	var p = new(ClosureParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_closureParameter

	return p
}

func (s *ClosureParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ClosureParameterContext) FunctionParameter() IFunctionParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterContext)
}

func (s *ClosureParameterContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *ClosureParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ClosureParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ClosureParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitClosureParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ClosureParameter() (localctx IClosureParameterContext) {
	localctx = NewClosureParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, MojoParserRULE_closureParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1684)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 213, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1682)
			p.FunctionParameter()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1683)
			p.LabelIdentifier()
		}

	}

	return localctx
}

// IImplicitMemberExpressionContext is an interface to support dynamic dispatch.
type IImplicitMemberExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplicitMemberExpressionContext differentiates from other interfaces.
	IsImplicitMemberExpressionContext()
}

type ImplicitMemberExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplicitMemberExpressionContext() *ImplicitMemberExpressionContext {
	var p = new(ImplicitMemberExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_implicitMemberExpression
	return p
}

func (*ImplicitMemberExpressionContext) IsImplicitMemberExpressionContext() {}

func NewImplicitMemberExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplicitMemberExpressionContext {
	var p = new(ImplicitMemberExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_implicitMemberExpression

	return p
}

func (s *ImplicitMemberExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplicitMemberExpressionContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ImplicitMemberExpressionContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *ImplicitMemberExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplicitMemberExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplicitMemberExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitImplicitMemberExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ImplicitMemberExpression() (localctx IImplicitMemberExpressionContext) {
	localctx = NewImplicitMemberExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, MojoParserRULE_implicitMemberExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1686)
		p.Match(MojoParserDOT)
	}
	{
		p.SetState(1687)
		p.LabelIdentifier()
	}

	return localctx
}

// IParenthesizedExpressionContext is an interface to support dynamic dispatch.
type IParenthesizedExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParenthesizedExpressionContext differentiates from other interfaces.
	IsParenthesizedExpressionContext()
}

type ParenthesizedExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParenthesizedExpressionContext() *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_parenthesizedExpression
	return p
}

func (*ParenthesizedExpressionContext) IsParenthesizedExpressionContext() {}

func NewParenthesizedExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_parenthesizedExpression

	return p
}

func (s *ParenthesizedExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ParenthesizedExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *ParenthesizedExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *ParenthesizedExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenthesizedExpressionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *ParenthesizedExpressionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *ParenthesizedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParenthesizedExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitParenthesizedExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ParenthesizedExpression() (localctx IParenthesizedExpressionContext) {
	localctx = NewParenthesizedExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, MojoParserRULE_parenthesizedExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1689)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(1693)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1690)
			p.Match(MojoParserEOL)
		}

		p.SetState(1695)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	{
		p.SetState(1696)
		p.Expression()
	}

	p.SetState(1700)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1697)
			p.Match(MojoParserEOL)
		}

		p.SetState(1702)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1703)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// ITupleExpressionContext is an interface to support dynamic dispatch.
type ITupleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleExpressionContext differentiates from other interfaces.
	IsTupleExpressionContext()
}

type TupleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExpressionContext() *TupleExpressionContext {
	var p = new(TupleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleExpression
	return p
}

func (*TupleExpressionContext) IsTupleExpressionContext() {}

func NewTupleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExpressionContext {
	var p = new(TupleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleExpression

	return p
}

func (s *TupleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExpressionContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *TupleExpressionContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *TupleExpressionContext) AllTupleElement() []ITupleElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITupleElementContext)(nil)).Elem())
	var tst = make([]ITupleElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITupleElementContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) TupleElement(i int) ITupleElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITupleElementContext)
}

func (s *TupleExpressionContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MojoParserCOMMA)
}

func (s *TupleExpressionContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, i)
}

func (s *TupleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleExpression() (localctx ITupleExpressionContext) {
	localctx = NewTupleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 240, MojoParserRULE_tupleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1717)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 217, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1705)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1706)
			p.Match(MojoParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1707)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1708)
			p.TupleElement()
		}
		p.SetState(1711)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == MojoParserCOMMA {
			{
				p.SetState(1709)
				p.Match(MojoParserCOMMA)
			}
			{
				p.SetState(1710)
				p.TupleElement()
			}

			p.SetState(1713)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1715)
			p.Match(MojoParserRPAREN)
		}

	}

	return localctx
}

// ITupleElementContext is an interface to support dynamic dispatch.
type ITupleElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleElementContext differentiates from other interfaces.
	IsTupleElementContext()
}

type TupleElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleElementContext() *TupleElementContext {
	var p = new(TupleElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleElement
	return p
}

func (*TupleElementContext) IsTupleElementContext() {}

func NewTupleElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleElementContext {
	var p = new(TupleElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleElement

	return p
}

func (s *TupleElementContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleElementContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *TupleElementContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TupleElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleElement() (localctx ITupleElementContext) {
	localctx = NewTupleElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 242, MojoParserRULE_tupleElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1724)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 218, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1719)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1720)
			p.LabelIdentifier()
		}
		{
			p.SetState(1721)
			p.Match(MojoParserCOLON)
		}
		{
			p.SetState(1722)
			p.Expression()
		}

	}

	return localctx
}

// IWildcardExpressionContext is an interface to support dynamic dispatch.
type IWildcardExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWildcardExpressionContext differentiates from other interfaces.
	IsWildcardExpressionContext()
}

type WildcardExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWildcardExpressionContext() *WildcardExpressionContext {
	var p = new(WildcardExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_wildcardExpression
	return p
}

func (*WildcardExpressionContext) IsWildcardExpressionContext() {}

func NewWildcardExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WildcardExpressionContext {
	var p = new(WildcardExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_wildcardExpression

	return p
}

func (s *WildcardExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *WildcardExpressionContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(MojoParserUNDERSCORE, 0)
}

func (s *WildcardExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WildcardExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WildcardExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitWildcardExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) WildcardExpression() (localctx IWildcardExpressionContext) {
	localctx = NewWildcardExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 244, MojoParserRULE_wildcardExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1726)
		p.Match(MojoParserUNDERSCORE)
	}

	return localctx
}

// IPostfixExpressionContext is an interface to support dynamic dispatch.
type IPostfixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixExpressionContext differentiates from other interfaces.
	IsPostfixExpressionContext()
}

type PostfixExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixExpressionContext() *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_postfixExpression
	return p
}

func (*PostfixExpressionContext) IsPostfixExpressionContext() {}

func NewPostfixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixExpressionContext {
	var p = new(PostfixExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_postfixExpression

	return p
}

func (s *PostfixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *PostfixExpressionContext) AllSuffixExpression() []ISuffixExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISuffixExpressionContext)(nil)).Elem())
	var tst = make([]ISuffixExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISuffixExpressionContext)
		}
	}

	return tst
}

func (s *PostfixExpressionContext) SuffixExpression(i int) ISuffixExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISuffixExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISuffixExpressionContext)
}

func (s *PostfixExpressionContext) PostfixOperator() IPostfixOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPostfixOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPostfixOperatorContext)
}

func (s *PostfixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPostfixExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PostfixExpression() (localctx IPostfixExpressionContext) {
	localctx = NewPostfixExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 246, MojoParserRULE_postfixExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1728)
		p.PrimaryExpression()
	}
	p.SetState(1732)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 219, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1729)
				p.SuffixExpression()
			}

		}
		p.SetState(1734)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 219, p.GetParserRuleContext())
	}
	p.SetState(1736)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1735)
			p.PostfixOperator()
		}

	}

	return localctx
}

// ISuffixExpressionContext is an interface to support dynamic dispatch.
type ISuffixExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSuffixExpressionContext differentiates from other interfaces.
	IsSuffixExpressionContext()
}

type SuffixExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySuffixExpressionContext() *SuffixExpressionContext {
	var p = new(SuffixExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_suffixExpression
	return p
}

func (*SuffixExpressionContext) IsSuffixExpressionContext() {}

func NewSuffixExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SuffixExpressionContext {
	var p = new(SuffixExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_suffixExpression

	return p
}

func (s *SuffixExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *SuffixExpressionContext) FunctionCallSuffix() IFunctionCallSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallSuffixContext)
}

func (s *SuffixExpressionContext) ExplicitMemberSuffix() IExplicitMemberSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplicitMemberSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExplicitMemberSuffixContext)
}

func (s *SuffixExpressionContext) SubscriptSuffix() ISubscriptSuffixContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubscriptSuffixContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubscriptSuffixContext)
}

func (s *SuffixExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SuffixExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SuffixExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitSuffixExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) SuffixExpression() (localctx ISuffixExpressionContext) {
	localctx = NewSuffixExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 248, MojoParserRULE_suffixExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1741)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLCURLY, MojoParserLPAREN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1738)
			p.FunctionCallSuffix()
		}

	case MojoParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1739)
			p.ExplicitMemberSuffix()
		}

	case MojoParserLBRACK:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1740)
			p.SubscriptSuffix()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IExplicitMemberSuffixContext is an interface to support dynamic dispatch.
type IExplicitMemberSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplicitMemberSuffixContext differentiates from other interfaces.
	IsExplicitMemberSuffixContext()
}

type ExplicitMemberSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplicitMemberSuffixContext() *ExplicitMemberSuffixContext {
	var p = new(ExplicitMemberSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_explicitMemberSuffix
	return p
}

func (*ExplicitMemberSuffixContext) IsExplicitMemberSuffixContext() {}

func NewExplicitMemberSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplicitMemberSuffixContext {
	var p = new(ExplicitMemberSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_explicitMemberSuffix

	return p
}

func (s *ExplicitMemberSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplicitMemberSuffixContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *ExplicitMemberSuffixContext) PURE_DECIMAL_DIGITS() antlr.TerminalNode {
	return s.GetToken(MojoParserPURE_DECIMAL_DIGITS, 0)
}

func (s *ExplicitMemberSuffixContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExplicitMemberSuffixContext) GenericArgumentClause() IGenericArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *ExplicitMemberSuffixContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *ExplicitMemberSuffixContext) ArgumentNames() IArgumentNamesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentNamesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentNamesContext)
}

func (s *ExplicitMemberSuffixContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *ExplicitMemberSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplicitMemberSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExplicitMemberSuffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitExplicitMemberSuffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ExplicitMemberSuffix() (localctx IExplicitMemberSuffixContext) {
	localctx = NewExplicitMemberSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 250, MojoParserRULE_explicitMemberSuffix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1743)
		p.Match(MojoParserDOT)
	}
	p.SetState(1753)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserPURE_DECIMAL_DIGITS:
		{
			p.SetState(1744)
			p.Match(MojoParserPURE_DECIMAL_DIGITS)
		}

	case MojoParserVALUE_IDENTIFIER, MojoParserIMPLICIT_PARAMETER_NAME:
		{
			p.SetState(1745)
			p.Identifier()
		}
		p.SetState(1751)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1746)
				p.GenericArgumentClause()
			}

		} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) == 2 {
			{
				p.SetState(1747)
				p.Match(MojoParserLPAREN)
			}
			{
				p.SetState(1748)
				p.ArgumentNames()
			}
			{
				p.SetState(1749)
				p.Match(MojoParserRPAREN)
			}

		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISubscriptSuffixContext is an interface to support dynamic dispatch.
type ISubscriptSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubscriptSuffixContext differentiates from other interfaces.
	IsSubscriptSuffixContext()
}

type SubscriptSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubscriptSuffixContext() *SubscriptSuffixContext {
	var p = new(SubscriptSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_subscriptSuffix
	return p
}

func (*SubscriptSuffixContext) IsSubscriptSuffixContext() {}

func NewSubscriptSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubscriptSuffixContext {
	var p = new(SubscriptSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_subscriptSuffix

	return p
}

func (s *SubscriptSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *SubscriptSuffixContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserLBRACK, 0)
}

func (s *SubscriptSuffixContext) FunctionCallArguments() IFunctionCallArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentsContext)
}

func (s *SubscriptSuffixContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserRBRACK, 0)
}

func (s *SubscriptSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubscriptSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SubscriptSuffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitSubscriptSuffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) SubscriptSuffix() (localctx ISubscriptSuffixContext) {
	localctx = NewSubscriptSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 252, MojoParserRULE_subscriptSuffix)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1755)
		p.Match(MojoParserLBRACK)
	}
	{
		p.SetState(1756)
		p.FunctionCallArguments()
	}
	{
		p.SetState(1757)
		p.Match(MojoParserRBRACK)
	}

	return localctx
}

// IFunctionCallSuffixContext is an interface to support dynamic dispatch.
type IFunctionCallSuffixContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallSuffixContext differentiates from other interfaces.
	IsFunctionCallSuffixContext()
}

type FunctionCallSuffixContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallSuffixContext() *FunctionCallSuffixContext {
	var p = new(FunctionCallSuffixContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionCallSuffix
	return p
}

func (*FunctionCallSuffixContext) IsFunctionCallSuffixContext() {}

func NewFunctionCallSuffixContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallSuffixContext {
	var p = new(FunctionCallSuffixContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionCallSuffix

	return p
}

func (s *FunctionCallSuffixContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallSuffixContext) TrailingClosures() ITrailingClosuresContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITrailingClosuresContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITrailingClosuresContext)
}

func (s *FunctionCallSuffixContext) FunctionCallArgumentClause() IFunctionCallArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentClauseContext)
}

func (s *FunctionCallSuffixContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallSuffixContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallSuffixContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionCallSuffix(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionCallSuffix() (localctx IFunctionCallSuffixContext) {
	localctx = NewFunctionCallSuffixContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 254, MojoParserRULE_functionCallSuffix)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1764)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 225, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(1760)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserLPAREN {
			{
				p.SetState(1759)
				p.FunctionCallArgumentClause()
			}

		}
		{
			p.SetState(1762)
			p.TrailingClosures()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1763)
			p.FunctionCallArgumentClause()
		}

	}

	return localctx
}

// IFunctionCallArgumentClauseContext is an interface to support dynamic dispatch.
type IFunctionCallArgumentClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallArgumentClauseContext differentiates from other interfaces.
	IsFunctionCallArgumentClauseContext()
}

type FunctionCallArgumentClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallArgumentClauseContext() *FunctionCallArgumentClauseContext {
	var p = new(FunctionCallArgumentClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionCallArgumentClause
	return p
}

func (*FunctionCallArgumentClauseContext) IsFunctionCallArgumentClauseContext() {}

func NewFunctionCallArgumentClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallArgumentClauseContext {
	var p = new(FunctionCallArgumentClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionCallArgumentClause

	return p
}

func (s *FunctionCallArgumentClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallArgumentClauseContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *FunctionCallArgumentClauseContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *FunctionCallArgumentClauseContext) FunctionCallArguments() IFunctionCallArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentsContext)
}

func (s *FunctionCallArgumentClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallArgumentClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallArgumentClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionCallArgumentClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionCallArgumentClause() (localctx IFunctionCallArgumentClauseContext) {
	localctx = NewFunctionCallArgumentClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 256, MojoParserRULE_functionCallArgumentClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1772)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 226, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1766)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1767)
			p.Match(MojoParserRPAREN)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1768)
			p.Match(MojoParserLPAREN)
		}
		{
			p.SetState(1769)
			p.FunctionCallArguments()
		}
		{
			p.SetState(1770)
			p.Match(MojoParserRPAREN)
		}

	}

	return localctx
}

// IFunctionCallArgumentsContext is an interface to support dynamic dispatch.
type IFunctionCallArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallArgumentsContext differentiates from other interfaces.
	IsFunctionCallArgumentsContext()
}

type FunctionCallArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallArgumentsContext() *FunctionCallArgumentsContext {
	var p = new(FunctionCallArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionCallArguments
	return p
}

func (*FunctionCallArgumentsContext) IsFunctionCallArgumentsContext() {}

func NewFunctionCallArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallArgumentsContext {
	var p = new(FunctionCallArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionCallArguments

	return p
}

func (s *FunctionCallArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallArgumentsContext) AllFunctionCallArgument() []IFunctionCallArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionCallArgumentContext)(nil)).Elem())
	var tst = make([]IFunctionCallArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionCallArgumentContext)
		}
	}

	return tst
}

func (s *FunctionCallArgumentsContext) FunctionCallArgument(i int) IFunctionCallArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentContext)
}

func (s *FunctionCallArgumentsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(MojoParserCOMMA)
}

func (s *FunctionCallArgumentsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, i)
}

func (s *FunctionCallArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionCallArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionCallArguments() (localctx IFunctionCallArgumentsContext) {
	localctx = NewFunctionCallArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 258, MojoParserRULE_functionCallArguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1774)
		p.FunctionCallArgument()
	}
	p.SetState(1779)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserCOMMA {
		{
			p.SetState(1775)
			p.Match(MojoParserCOMMA)
		}
		{
			p.SetState(1776)
			p.FunctionCallArgument()
		}

		p.SetState(1781)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IFunctionCallArgumentContext is an interface to support dynamic dispatch.
type IFunctionCallArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallArgumentContext differentiates from other interfaces.
	IsFunctionCallArgumentContext()
}

type FunctionCallArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallArgumentContext() *FunctionCallArgumentContext {
	var p = new(FunctionCallArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionCallArgument
	return p
}

func (*FunctionCallArgumentContext) IsFunctionCallArgumentContext() {}

func NewFunctionCallArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallArgumentContext {
	var p = new(FunctionCallArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionCallArgument

	return p
}

func (s *FunctionCallArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallArgumentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallArgumentContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *FunctionCallArgumentContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *FunctionCallArgumentContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *FunctionCallArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionCallArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionCallArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionCallArgument() (localctx IFunctionCallArgumentContext) {
	localctx = NewFunctionCallArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 260, MojoParserRULE_functionCallArgument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1792)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 228, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1782)
			p.Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1783)
			p.LabelIdentifier()
		}
		{
			p.SetState(1784)
			p.Match(MojoParserCOLON)
		}
		{
			p.SetState(1785)
			p.Expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1787)
			p.Operator()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1788)
			p.LabelIdentifier()
		}
		{
			p.SetState(1789)
			p.Match(MojoParserCOLON)
		}
		{
			p.SetState(1790)
			p.Operator()
		}

	}

	return localctx
}

// ITrailingClosuresContext is an interface to support dynamic dispatch.
type ITrailingClosuresContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTrailingClosuresContext differentiates from other interfaces.
	IsTrailingClosuresContext()
}

type TrailingClosuresContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTrailingClosuresContext() *TrailingClosuresContext {
	var p = new(TrailingClosuresContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_trailingClosures
	return p
}

func (*TrailingClosuresContext) IsTrailingClosuresContext() {}

func NewTrailingClosuresContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TrailingClosuresContext {
	var p = new(TrailingClosuresContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_trailingClosures

	return p
}

func (s *TrailingClosuresContext) GetParser() antlr.Parser { return s.parser }

func (s *TrailingClosuresContext) ClosureExpression() IClosureExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClosureExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClosureExpressionContext)
}

func (s *TrailingClosuresContext) LabeledTrailingClosures() ILabeledTrailingClosuresContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabeledTrailingClosuresContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabeledTrailingClosuresContext)
}

func (s *TrailingClosuresContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TrailingClosuresContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TrailingClosuresContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTrailingClosures(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TrailingClosures() (localctx ITrailingClosuresContext) {
	localctx = NewTrailingClosuresContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 262, MojoParserRULE_trailingClosures)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1794)
		p.ClosureExpression()
	}
	p.SetState(1796)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 229, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1795)
			p.LabeledTrailingClosures()
		}

	}

	return localctx
}

// ILabeledTrailingClosuresContext is an interface to support dynamic dispatch.
type ILabeledTrailingClosuresContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabeledTrailingClosuresContext differentiates from other interfaces.
	IsLabeledTrailingClosuresContext()
}

type LabeledTrailingClosuresContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledTrailingClosuresContext() *LabeledTrailingClosuresContext {
	var p = new(LabeledTrailingClosuresContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_labeledTrailingClosures
	return p
}

func (*LabeledTrailingClosuresContext) IsLabeledTrailingClosuresContext() {}

func NewLabeledTrailingClosuresContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledTrailingClosuresContext {
	var p = new(LabeledTrailingClosuresContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_labeledTrailingClosures

	return p
}

func (s *LabeledTrailingClosuresContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledTrailingClosuresContext) AllLabeledTrailingClosure() []ILabeledTrailingClosureContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILabeledTrailingClosureContext)(nil)).Elem())
	var tst = make([]ILabeledTrailingClosureContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILabeledTrailingClosureContext)
		}
	}

	return tst
}

func (s *LabeledTrailingClosuresContext) LabeledTrailingClosure(i int) ILabeledTrailingClosureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabeledTrailingClosureContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILabeledTrailingClosureContext)
}

func (s *LabeledTrailingClosuresContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledTrailingClosuresContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabeledTrailingClosuresContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLabeledTrailingClosures(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LabeledTrailingClosures() (localctx ILabeledTrailingClosuresContext) {
	localctx = NewLabeledTrailingClosuresContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 264, MojoParserRULE_labeledTrailingClosures)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1799)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1798)
				p.LabeledTrailingClosure()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1801)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 230, p.GetParserRuleContext())
	}

	return localctx
}

// ILabeledTrailingClosureContext is an interface to support dynamic dispatch.
type ILabeledTrailingClosureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabeledTrailingClosureContext differentiates from other interfaces.
	IsLabeledTrailingClosureContext()
}

type LabeledTrailingClosureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledTrailingClosureContext() *LabeledTrailingClosureContext {
	var p = new(LabeledTrailingClosureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_labeledTrailingClosure
	return p
}

func (*LabeledTrailingClosureContext) IsLabeledTrailingClosureContext() {}

func NewLabeledTrailingClosureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledTrailingClosureContext {
	var p = new(LabeledTrailingClosureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_labeledTrailingClosure

	return p
}

func (s *LabeledTrailingClosureContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledTrailingClosureContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LabeledTrailingClosureContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *LabeledTrailingClosureContext) ClosureExpression() IClosureExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IClosureExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IClosureExpressionContext)
}

func (s *LabeledTrailingClosureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledTrailingClosureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabeledTrailingClosureContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLabeledTrailingClosure(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LabeledTrailingClosure() (localctx ILabeledTrailingClosureContext) {
	localctx = NewLabeledTrailingClosureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 266, MojoParserRULE_labeledTrailingClosure)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1803)
		p.Identifier()
	}
	{
		p.SetState(1804)
		p.Match(MojoParserCOLON)
	}
	{
		p.SetState(1805)
		p.ClosureExpression()
	}

	return localctx
}

// IArgumentNamesContext is an interface to support dynamic dispatch.
type IArgumentNamesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentNamesContext differentiates from other interfaces.
	IsArgumentNamesContext()
}

type ArgumentNamesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentNamesContext() *ArgumentNamesContext {
	var p = new(ArgumentNamesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_argumentNames
	return p
}

func (*ArgumentNamesContext) IsArgumentNamesContext() {}

func NewArgumentNamesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentNamesContext {
	var p = new(ArgumentNamesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_argumentNames

	return p
}

func (s *ArgumentNamesContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentNamesContext) AllArgumentName() []IArgumentNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArgumentNameContext)(nil)).Elem())
	var tst = make([]IArgumentNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArgumentNameContext)
		}
	}

	return tst
}

func (s *ArgumentNamesContext) ArgumentName(i int) IArgumentNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArgumentNameContext)
}

func (s *ArgumentNamesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentNamesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentNamesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArgumentNames(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArgumentNames() (localctx IArgumentNamesContext) {
	localctx = NewArgumentNamesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 268, MojoParserRULE_argumentNames)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1807)
		p.ArgumentName()
	}
	p.SetState(1811)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MojoParserKEYWORD_AND)|(1<<MojoParserKEYWORD_AS)|(1<<MojoParserKEYWORD_ATTRIBUTE)|(1<<MojoParserKEYWORD_BREAK)|(1<<MojoParserKEYWORD_CONST)|(1<<MojoParserKEYWORD_CONTINUE)|(1<<MojoParserKEYWORD_ELSE)|(1<<MojoParserKEYWORD_ENUM)|(1<<MojoParserKEYWORD_FALSE)|(1<<MojoParserKEYWORD_FOR)|(1<<MojoParserKEYWORD_FUNC)|(1<<MojoParserKEYWORD_IF)|(1<<MojoParserKEYWORD_IMPORT)|(1<<MojoParserKEYWORD_IN)|(1<<MojoParserKEYWORD_INTERFACE)|(1<<MojoParserKEYWORD_IS)|(1<<MojoParserKEYWORD_MATCH)|(1<<MojoParserKEYWORD_NOT)|(1<<MojoParserKEYWORD_NULL)|(1<<MojoParserKEYWORD_OR)|(1<<MojoParserKEYWORD_PACKAGE)|(1<<MojoParserKEYWORD_REPEATE)|(1<<MojoParserKEYWORD_RETURN)|(1<<MojoParserKEYWORD_STRUCT)|(1<<MojoParserKEYWORD_TRUE)|(1<<MojoParserKEYWORD_TYPE)|(1<<MojoParserKEYWORD_VAR)|(1<<MojoParserKEYWORD_WHILE)|(1<<MojoParserKEYWORD_XOR))) != 0) || _la == MojoParserVALUE_IDENTIFIER {
		{
			p.SetState(1808)
			p.ArgumentName()
		}

		p.SetState(1813)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IArgumentNameContext is an interface to support dynamic dispatch.
type IArgumentNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentNameContext differentiates from other interfaces.
	IsArgumentNameContext()
}

type ArgumentNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentNameContext() *ArgumentNameContext {
	var p = new(ArgumentNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_argumentName
	return p
}

func (*ArgumentNameContext) IsArgumentNameContext() {}

func NewArgumentNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentNameContext {
	var p = new(ArgumentNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_argumentName

	return p
}

func (s *ArgumentNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentNameContext) LabelIdentifier() ILabelIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelIdentifierContext)
}

func (s *ArgumentNameContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *ArgumentNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArgumentName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArgumentName() (localctx IArgumentNameContext) {
	localctx = NewArgumentNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 270, MojoParserRULE_argumentName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1814)
		p.LabelIdentifier()
	}
	{
		p.SetState(1815)
		p.Match(MojoParserCOLON)
	}

	return localctx
}

// IType_Context is an interface to support dynamic dispatch.
type IType_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_Context differentiates from other interfaces.
	IsType_Context()
}

type Type_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_Context() *Type_Context {
	var p = new(Type_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_type_
	return p
}

func (*Type_Context) IsType_Context() {}

func NewType_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_Context {
	var p = new(Type_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_type_

	return p
}

func (s *Type_Context) GetParser() antlr.Parser { return s.parser }

func (s *Type_Context) BasicType() IBasicTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeContext)
}

func (s *Type_Context) FunctionType() IFunctionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeContext)
}

func (s *Type_Context) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *Type_Context) BANG() antlr.TerminalNode {
	return s.GetToken(MojoParserBANG, 0)
}

func (s *Type_Context) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *Type_Context) ELLIPSIS() antlr.TerminalNode {
	return s.GetToken(MojoParserELLIPSIS, 0)
}

func (s *Type_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_Context) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitType_(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Type_() (localctx IType_Context) {
	return p.type_(0)
}

func (p *MojoParser) type_(_p int) (localctx IType_Context) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewType_Context(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IType_Context = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 272
	p.EnterRecursionRule(localctx, 272, MojoParserRULE_type_, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1820)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 232, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1818)
			p.basicType(0)
		}

	case 2:
		{
			p.SetState(1819)
			p.FunctionType()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1830)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1828)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 233, p.GetParserRuleContext()) {
			case 1:
				localctx = NewType_Context(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_type_)
				p.SetState(1822)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(1823)
					p.Match(MojoParserBANG)
				}

			case 2:
				localctx = NewType_Context(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_type_)
				p.SetState(1824)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(1825)
					p.Match(MojoParserQUESTION)
				}

			case 3:
				localctx = NewType_Context(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_type_)
				p.SetState(1826)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(1827)
					p.Match(MojoParserELLIPSIS)
				}

			}

		}
		p.SetState(1832)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 234, p.GetParserRuleContext())
	}

	return localctx
}

// IBasicTypeContext is an interface to support dynamic dispatch.
type IBasicTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBasicTypeContext differentiates from other interfaces.
	IsBasicTypeContext()
}

type BasicTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasicTypeContext() *BasicTypeContext {
	var p = new(BasicTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_basicType
	return p
}

func (*BasicTypeContext) IsBasicTypeContext() {}

func NewBasicTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicTypeContext {
	var p = new(BasicTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_basicType

	return p
}

func (s *BasicTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicTypeContext) CopyFrom(ctx *BasicTypeContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *BasicTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type IntersectionContext struct {
	*BasicTypeContext
}

func NewIntersectionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntersectionContext {
	var p = new(IntersectionContext)

	p.BasicTypeContext = NewEmptyBasicTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BasicTypeContext))

	return p
}

func (s *IntersectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntersectionContext) AllBasicType() []IBasicTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBasicTypeContext)(nil)).Elem())
	var tst = make([]IBasicTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBasicTypeContext)
		}
	}

	return tst
}

func (s *IntersectionContext) BasicType(i int) IBasicTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeContext)
}

func (s *IntersectionContext) AND() antlr.TerminalNode {
	return s.GetToken(MojoParserAND, 0)
}

func (s *IntersectionContext) AllAttributes() []IAttributesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributesContext)(nil)).Elem())
	var tst = make([]IAttributesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributesContext)
		}
	}

	return tst
}

func (s *IntersectionContext) Attributes(i int) IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *IntersectionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *IntersectionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *IntersectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIntersection(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrimeContext struct {
	*BasicTypeContext
}

func NewPrimeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimeContext {
	var p = new(PrimeContext)

	p.BasicTypeContext = NewEmptyBasicTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BasicTypeContext))

	return p
}

func (s *PrimeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimeContext) PrimeType() IPrimeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimeTypeContext)
}

func (s *PrimeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrime(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnionContext struct {
	*BasicTypeContext
}

func NewUnionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnionContext {
	var p = new(UnionContext)

	p.BasicTypeContext = NewEmptyBasicTypeContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BasicTypeContext))

	return p
}

func (s *UnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionContext) AllBasicType() []IBasicTypeContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBasicTypeContext)(nil)).Elem())
	var tst = make([]IBasicTypeContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBasicTypeContext)
		}
	}

	return tst
}

func (s *UnionContext) BasicType(i int) IBasicTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicTypeContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBasicTypeContext)
}

func (s *UnionContext) PIPE() antlr.TerminalNode {
	return s.GetToken(MojoParserPIPE, 0)
}

func (s *UnionContext) AllAttributes() []IAttributesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributesContext)(nil)).Elem())
	var tst = make([]IAttributesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributesContext)
		}
	}

	return tst
}

func (s *UnionContext) Attributes(i int) IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *UnionContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *UnionContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *UnionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitUnion(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BasicType() (localctx IBasicTypeContext) {
	return p.basicType(0)
}

func (p *MojoParser) basicType(_p int) (localctx IBasicTypeContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBasicTypeContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBasicTypeContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 274
	p.EnterRecursionRule(localctx, 274, MojoParserRULE_basicType, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewPrimeContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(1834)
		p.PrimeType()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(1880)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 244, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(1878)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 243, p.GetParserRuleContext()) {
			case 1:
				localctx = NewUnionContext(p, NewBasicTypeContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_basicType)
				p.SetState(1836)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				p.SetState(1838)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MojoParserAT {
					{
						p.SetState(1837)
						p.Attributes()
					}

				}
				p.SetState(1843)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(1840)
						p.Match(MojoParserEOL)
					}

					p.SetState(1845)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1846)
					p.Match(MojoParserPIPE)
				}
				p.SetState(1850)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(1847)
						p.Match(MojoParserEOL)
					}

					p.SetState(1852)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1853)
					p.basicType(0)
				}
				p.SetState(1855)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 238, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1854)
						p.Attributes()
					}

				}

			case 2:
				localctx = NewIntersectionContext(p, NewBasicTypeContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, MojoParserRULE_basicType)
				p.SetState(1857)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				p.SetState(1859)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == MojoParserAT {
					{
						p.SetState(1858)
						p.Attributes()
					}

				}
				p.SetState(1864)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(1861)
						p.Match(MojoParserEOL)
					}

					p.SetState(1866)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1867)
					p.Match(MojoParserAND)
				}
				p.SetState(1871)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				for _la == MojoParserEOL {
					{
						p.SetState(1868)
						p.Match(MojoParserEOL)
					}

					p.SetState(1873)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)
				}
				{
					p.SetState(1874)
					p.basicType(0)
				}
				p.SetState(1876)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 242, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(1875)
						p.Attributes()
					}

				}

			}

		}
		p.SetState(1882)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 244, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimeTypeContext is an interface to support dynamic dispatch.
type IPrimeTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimeTypeContext differentiates from other interfaces.
	IsPrimeTypeContext()
}

type PrimeTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimeTypeContext() *PrimeTypeContext {
	var p = new(PrimeTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_primeType
	return p
}

func (*PrimeTypeContext) IsPrimeTypeContext() {}

func NewPrimeTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimeTypeContext {
	var p = new(PrimeTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_primeType

	return p
}

func (s *PrimeTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimeTypeContext) ArrayType() IArrayTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *PrimeTypeContext) MapType() IMapTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMapTypeContext)
}

func (s *PrimeTypeContext) TupleType() ITupleTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleTypeContext)
}

func (s *PrimeTypeContext) TypeIdentifier() ITypeIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierContext)
}

func (s *PrimeTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimeTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimeTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrimeType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrimeType() (localctx IPrimeTypeContext) {
	localctx = NewPrimeTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 276, MojoParserRULE_primeType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1887)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLBRACK:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1883)
			p.ArrayType()
		}

	case MojoParserLCURLY:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1884)
			p.MapType()
		}

	case MojoParserLPAREN:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1885)
			p.TupleType()
		}

	case MojoParserTYPE_IDENTIFIER, MojoParserVALUE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1886)
			p.TypeIdentifier()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeAnnotationContext is an interface to support dynamic dispatch.
type ITypeAnnotationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAnnotationContext differentiates from other interfaces.
	IsTypeAnnotationContext()
}

type TypeAnnotationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAnnotationContext() *TypeAnnotationContext {
	var p = new(TypeAnnotationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeAnnotation
	return p
}

func (*TypeAnnotationContext) IsTypeAnnotationContext() {}

func NewTypeAnnotationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAnnotationContext {
	var p = new(TypeAnnotationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeAnnotation

	return p
}

func (s *TypeAnnotationContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAnnotationContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TypeAnnotationContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeAnnotationContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TypeAnnotationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAnnotationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAnnotationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeAnnotation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeAnnotation() (localctx ITypeAnnotationContext) {
	localctx = NewTypeAnnotationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 278, MojoParserRULE_typeAnnotation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1889)
		p.Match(MojoParserCOLON)
	}
	{
		p.SetState(1890)
		p.type_(0)
	}
	p.SetState(1892)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 246, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1891)
			p.Attributes()
		}

	}

	return localctx
}

// ITypeIdentifierContext is an interface to support dynamic dispatch.
type ITypeIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeIdentifierContext differentiates from other interfaces.
	IsTypeIdentifierContext()
}

type TypeIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeIdentifierContext() *TypeIdentifierContext {
	var p = new(TypeIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeIdentifier
	return p
}

func (*TypeIdentifierContext) IsTypeIdentifierContext() {}

func NewTypeIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeIdentifierContext {
	var p = new(TypeIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeIdentifier

	return p
}

func (s *TypeIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeIdentifierContext) AllTypeIdentifierClause() []ITypeIdentifierClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeIdentifierClauseContext)(nil)).Elem())
	var tst = make([]ITypeIdentifierClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeIdentifierClauseContext)
		}
	}

	return tst
}

func (s *TypeIdentifierContext) TypeIdentifierClause(i int) ITypeIdentifierClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeIdentifierClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeIdentifierClauseContext)
}

func (s *TypeIdentifierContext) PackageIdentifier() IPackageIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageIdentifierContext)
}

func (s *TypeIdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *TypeIdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *TypeIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeIdentifier() (localctx ITypeIdentifierContext) {
	localctx = NewTypeIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 280, MojoParserRULE_typeIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1897)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserVALUE_IDENTIFIER {
		{
			p.SetState(1894)
			p.PackageIdentifier()
		}
		{
			p.SetState(1895)
			p.Match(MojoParserDOT)
		}

	}
	{
		p.SetState(1899)
		p.TypeIdentifierClause()
	}
	p.SetState(1904)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1900)
				p.Match(MojoParserDOT)
			}
			{
				p.SetState(1901)
				p.TypeIdentifierClause()
			}

		}
		p.SetState(1906)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 248, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeIdentifierClauseContext is an interface to support dynamic dispatch.
type ITypeIdentifierClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeIdentifierClauseContext differentiates from other interfaces.
	IsTypeIdentifierClauseContext()
}

type TypeIdentifierClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeIdentifierClauseContext() *TypeIdentifierClauseContext {
	var p = new(TypeIdentifierClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeIdentifierClause
	return p
}

func (*TypeIdentifierClauseContext) IsTypeIdentifierClauseContext() {}

func NewTypeIdentifierClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeIdentifierClauseContext {
	var p = new(TypeIdentifierClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeIdentifierClause

	return p
}

func (s *TypeIdentifierClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeIdentifierClauseContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypeIdentifierClauseContext) GenericArgumentClause() IGenericArgumentClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGenericArgumentClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGenericArgumentClauseContext)
}

func (s *TypeIdentifierClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeIdentifierClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeIdentifierClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeIdentifierClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeIdentifierClause() (localctx ITypeIdentifierClauseContext) {
	localctx = NewTypeIdentifierClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 282, MojoParserRULE_typeIdentifierClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1907)
		p.TypeName()
	}
	p.SetState(1909)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 249, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1908)
			p.GenericArgumentClause()
		}

	}

	return localctx
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeName
	return p
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) TYPE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserTYPE_IDENTIFIER, 0)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeName() (localctx ITypeNameContext) {
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 284, MojoParserRULE_typeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1911)
		p.Match(MojoParserTYPE_IDENTIFIER)
	}

	return localctx
}

// ITupleTypeContext is an interface to support dynamic dispatch.
type ITupleTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeContext differentiates from other interfaces.
	IsTupleTypeContext()
}

type TupleTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeContext() *TupleTypeContext {
	var p = new(TupleTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleType
	return p
}

func (*TupleTypeContext) IsTupleTypeContext() {}

func NewTupleTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeContext {
	var p = new(TupleTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleType

	return p
}

func (s *TupleTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserLPAREN, 0)
}

func (s *TupleTypeContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(MojoParserRPAREN, 0)
}

func (s *TupleTypeContext) TupleTypeElements() ITupleTypeElementsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleTypeElementsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleTypeElementsContext)
}

func (s *TupleTypeContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TupleTypeContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TupleTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleType() (localctx ITupleTypeContext) {
	localctx = NewTupleTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 286, MojoParserRULE_tupleType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1913)
		p.Match(MojoParserLPAREN)
	}
	p.SetState(1921)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 251, p.GetParserRuleContext()) == 1 {
		p.SetState(1917)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == MojoParserEOL {
			{
				p.SetState(1914)
				p.Match(MojoParserEOL)
			}

			p.SetState(1919)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1920)
			p.TupleTypeElements()
		}

	}
	p.SetState(1926)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1923)
			p.Match(MojoParserEOL)
		}

		p.SetState(1928)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1929)
		p.Match(MojoParserRPAREN)
	}

	return localctx
}

// ITupleTypeElementsContext is an interface to support dynamic dispatch.
type ITupleTypeElementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeElementsContext differentiates from other interfaces.
	IsTupleTypeElementsContext()
}

type TupleTypeElementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeElementsContext() *TupleTypeElementsContext {
	var p = new(TupleTypeElementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleTypeElements
	return p
}

func (*TupleTypeElementsContext) IsTupleTypeElementsContext() {}

func NewTupleTypeElementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeElementsContext {
	var p = new(TupleTypeElementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleTypeElements

	return p
}

func (s *TupleTypeElementsContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeElementsContext) AllTupleTypeElement() []ITupleTypeElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITupleTypeElementContext)(nil)).Elem())
	var tst = make([]ITupleTypeElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITupleTypeElementContext)
		}
	}

	return tst
}

func (s *TupleTypeElementsContext) TupleTypeElement(i int) ITupleTypeElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleTypeElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITupleTypeElementContext)
}

func (s *TupleTypeElementsContext) AllEovWithDocument() []IEovWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem())
	var tst = make([]IEovWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovWithDocumentContext)
		}
	}

	return tst
}

func (s *TupleTypeElementsContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *TupleTypeElementsContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TupleTypeElementsContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TupleTypeElementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeElementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeElementsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleTypeElements(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleTypeElements() (localctx ITupleTypeElementsContext) {
	localctx = NewTupleTypeElementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 288, MojoParserRULE_tupleTypeElements)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1931)
		p.TupleTypeElement()
	}
	p.SetState(1943)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1932)
				p.EovWithDocument()
			}
			p.SetState(1936)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1933)
					p.Match(MojoParserEOL)
				}

				p.SetState(1938)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1939)
				p.TupleTypeElement()
			}

		}
		p.SetState(1945)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 254, p.GetParserRuleContext())
	}
	p.SetState(1947)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 255, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1946)
			p.EovWithDocument()
		}

	}

	return localctx
}

// ITupleTypeElementContext is an interface to support dynamic dispatch.
type ITupleTypeElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleTypeElementContext differentiates from other interfaces.
	IsTupleTypeElementContext()
}

type TupleTypeElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleTypeElementContext() *TupleTypeElementContext {
	var p = new(TupleTypeElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_tupleTypeElement
	return p
}

func (*TupleTypeElementContext) IsTupleTypeElementContext() {}

func NewTupleTypeElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleTypeElementContext {
	var p = new(TupleTypeElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_tupleTypeElement

	return p
}

func (s *TupleTypeElementContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleTypeElementContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TupleTypeElementContext) DeclarationIdentifier() IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *TupleTypeElementContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TupleTypeElementContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TupleTypeElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleTypeElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleTypeElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTupleTypeElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TupleTypeElement() (localctx ITupleTypeElementContext) {
	localctx = NewTupleTypeElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 290, MojoParserRULE_tupleTypeElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1952)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 256, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1949)
			p.DeclarationIdentifier()
		}
		{
			p.SetState(1950)
			p.Match(MojoParserCOLON)
		}

	}
	{
		p.SetState(1954)
		p.type_(0)
	}
	p.SetState(1956)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1955)
			p.Attributes()
		}

	}

	return localctx
}

// IFunctionTypeContext is an interface to support dynamic dispatch.
type IFunctionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeContext differentiates from other interfaces.
	IsFunctionTypeContext()
}

type FunctionTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeContext() *FunctionTypeContext {
	var p = new(FunctionTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_functionType
	return p
}

func (*FunctionTypeContext) IsFunctionTypeContext() {}

func NewFunctionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_functionType

	return p
}

func (s *FunctionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeContext) FunctionParameterClause() IFunctionParameterClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionParameterClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionParameterClauseContext)
}

func (s *FunctionTypeContext) ArrowOperator() IArrowOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrowOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrowOperatorContext)
}

func (s *FunctionTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFunctionType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FunctionType() (localctx IFunctionTypeContext) {
	localctx = NewFunctionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 292, MojoParserRULE_functionType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1958)
		p.FunctionParameterClause()
	}
	{
		p.SetState(1959)
		p.ArrowOperator()
	}
	{
		p.SetState(1960)
		p.type_(0)
	}

	return localctx
}

// IArrayTypeContext is an interface to support dynamic dispatch.
type IArrayTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayTypeContext differentiates from other interfaces.
	IsArrayTypeContext()
}

type ArrayTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayTypeContext() *ArrayTypeContext {
	var p = new(ArrayTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrayType
	return p
}

func (*ArrayTypeContext) IsArrayTypeContext() {}

func NewArrayTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayTypeContext {
	var p = new(ArrayTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrayType

	return p
}

func (s *ArrayTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayTypeContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserLBRACK, 0)
}

func (s *ArrayTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ArrayTypeContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(MojoParserRBRACK, 0)
}

func (s *ArrayTypeContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *ArrayTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrayType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrayType() (localctx IArrayTypeContext) {
	localctx = NewArrayTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 294, MojoParserRULE_arrayType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1962)
		p.Match(MojoParserLBRACK)
	}
	{
		p.SetState(1963)
		p.type_(0)
	}
	p.SetState(1965)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1964)
			p.Attributes()
		}

	}
	{
		p.SetState(1967)
		p.Match(MojoParserRBRACK)
	}

	return localctx
}

// IMapTypeContext is an interface to support dynamic dispatch.
type IMapTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapTypeContext differentiates from other interfaces.
	IsMapTypeContext()
}

type MapTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapTypeContext() *MapTypeContext {
	var p = new(MapTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_mapType
	return p
}

func (*MapTypeContext) IsMapTypeContext() {}

func NewMapTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapTypeContext {
	var p = new(MapTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_mapType

	return p
}

func (s *MapTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *MapTypeContext) LCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserLCURLY, 0)
}

func (s *MapTypeContext) AllType_() []IType_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_Context)(nil)).Elem())
	var tst = make([]IType_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_Context)
		}
	}

	return tst
}

func (s *MapTypeContext) Type_(i int) IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *MapTypeContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *MapTypeContext) RCURLY() antlr.TerminalNode {
	return s.GetToken(MojoParserRCURLY, 0)
}

func (s *MapTypeContext) AllAttributes() []IAttributesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAttributesContext)(nil)).Elem())
	var tst = make([]IAttributesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAttributesContext)
		}
	}

	return tst
}

func (s *MapTypeContext) Attributes(i int) IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *MapTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitMapType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) MapType() (localctx IMapTypeContext) {
	localctx = NewMapTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 296, MojoParserRULE_mapType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1969)
		p.Match(MojoParserLCURLY)
	}
	{
		p.SetState(1970)
		p.type_(0)
	}
	p.SetState(1972)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1971)
			p.Attributes()
		}

	}
	{
		p.SetState(1974)
		p.Match(MojoParserCOLON)
	}
	{
		p.SetState(1975)
		p.type_(0)
	}
	p.SetState(1977)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(1976)
			p.Attributes()
		}

	}
	{
		p.SetState(1979)
		p.Match(MojoParserRCURLY)
	}

	return localctx
}

// ITypeInheritanceClauseContext is an interface to support dynamic dispatch.
type ITypeInheritanceClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeInheritanceClauseContext differentiates from other interfaces.
	IsTypeInheritanceClauseContext()
}

type TypeInheritanceClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeInheritanceClauseContext() *TypeInheritanceClauseContext {
	var p = new(TypeInheritanceClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeInheritanceClause
	return p
}

func (*TypeInheritanceClauseContext) IsTypeInheritanceClauseContext() {}

func NewTypeInheritanceClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeInheritanceClauseContext {
	var p = new(TypeInheritanceClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeInheritanceClause

	return p
}

func (s *TypeInheritanceClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeInheritanceClauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(MojoParserCOLON, 0)
}

func (s *TypeInheritanceClauseContext) TypeInheritances() ITypeInheritancesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeInheritancesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeInheritancesContext)
}

func (s *TypeInheritanceClauseContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypeInheritanceClauseContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypeInheritanceClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeInheritanceClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeInheritanceClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeInheritanceClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeInheritanceClause() (localctx ITypeInheritanceClauseContext) {
	localctx = NewTypeInheritanceClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 298, MojoParserRULE_typeInheritanceClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1981)
		p.Match(MojoParserCOLON)
	}
	p.SetState(1985)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserEOL {
		{
			p.SetState(1982)
			p.Match(MojoParserEOL)
		}

		p.SetState(1987)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1988)
		p.TypeInheritances()
	}

	return localctx
}

// ITypeInheritancesContext is an interface to support dynamic dispatch.
type ITypeInheritancesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeInheritancesContext differentiates from other interfaces.
	IsTypeInheritancesContext()
}

type TypeInheritancesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeInheritancesContext() *TypeInheritancesContext {
	var p = new(TypeInheritancesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeInheritances
	return p
}

func (*TypeInheritancesContext) IsTypeInheritancesContext() {}

func NewTypeInheritancesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeInheritancesContext {
	var p = new(TypeInheritancesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeInheritances

	return p
}

func (s *TypeInheritancesContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeInheritancesContext) AllTypeInheritance() []ITypeInheritanceContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeInheritanceContext)(nil)).Elem())
	var tst = make([]ITypeInheritanceContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeInheritanceContext)
		}
	}

	return tst
}

func (s *TypeInheritancesContext) TypeInheritance(i int) ITypeInheritanceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeInheritanceContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeInheritanceContext)
}

func (s *TypeInheritancesContext) AllEovWithDocument() []IEovWithDocumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem())
	var tst = make([]IEovWithDocumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEovWithDocumentContext)
		}
	}

	return tst
}

func (s *TypeInheritancesContext) EovWithDocument(i int) IEovWithDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEovWithDocumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEovWithDocumentContext)
}

func (s *TypeInheritancesContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *TypeInheritancesContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *TypeInheritancesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeInheritancesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeInheritancesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeInheritances(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeInheritances() (localctx ITypeInheritancesContext) {
	localctx = NewTypeInheritancesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 300, MojoParserRULE_typeInheritances)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1990)
		p.TypeInheritance()
	}
	p.SetState(2002)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 263, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1991)
				p.EovWithDocument()
			}
			p.SetState(1995)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == MojoParserEOL {
				{
					p.SetState(1992)
					p.Match(MojoParserEOL)
				}

				p.SetState(1997)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(1998)
				p.TypeInheritance()
			}

		}
		p.SetState(2004)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 263, p.GetParserRuleContext())
	}
	p.SetState(2006)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 264, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(2005)
			p.EovWithDocument()
		}

	}

	return localctx
}

// ITypeInheritanceContext is an interface to support dynamic dispatch.
type ITypeInheritanceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeInheritanceContext differentiates from other interfaces.
	IsTypeInheritanceContext()
}

type TypeInheritanceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeInheritanceContext() *TypeInheritanceContext {
	var p = new(TypeInheritanceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_typeInheritance
	return p
}

func (*TypeInheritanceContext) IsTypeInheritanceContext() {}

func NewTypeInheritanceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeInheritanceContext {
	var p = new(TypeInheritanceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_typeInheritance

	return p
}

func (s *TypeInheritanceContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeInheritanceContext) PrimeType() IPrimeTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimeTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimeTypeContext)
}

func (s *TypeInheritanceContext) Attributes() IAttributesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAttributesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAttributesContext)
}

func (s *TypeInheritanceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeInheritanceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeInheritanceContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitTypeInheritance(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) TypeInheritance() (localctx ITypeInheritanceContext) {
	localctx = NewTypeInheritanceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 302, MojoParserRULE_typeInheritance)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2008)
		p.PrimeType()
	}
	p.SetState(2010)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == MojoParserAT {
		{
			p.SetState(2009)
			p.Attributes()
		}

	}

	return localctx
}

// IDeclarationIdentifierContext is an interface to support dynamic dispatch.
type IDeclarationIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationIdentifierContext differentiates from other interfaces.
	IsDeclarationIdentifierContext()
}

type DeclarationIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationIdentifierContext() *DeclarationIdentifierContext {
	var p = new(DeclarationIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_declarationIdentifier
	return p
}

func (*DeclarationIdentifierContext) IsDeclarationIdentifierContext() {}

func NewDeclarationIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationIdentifierContext {
	var p = new(DeclarationIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_declarationIdentifier

	return p
}

func (s *DeclarationIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationIdentifierContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *DeclarationIdentifierContext) KeywordAsIdentifierInDeclarations() IKeywordAsIdentifierInDeclarationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeywordAsIdentifierInDeclarationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeywordAsIdentifierInDeclarationsContext)
}

func (s *DeclarationIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDeclarationIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) DeclarationIdentifier() (localctx IDeclarationIdentifierContext) {
	localctx = NewDeclarationIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 304, MojoParserRULE_declarationIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2014)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserVALUE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2012)
			p.Match(MojoParserVALUE_IDENTIFIER)
		}

	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_XOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2013)
			p.KeywordAsIdentifierInDeclarations()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILabelIdentifierContext is an interface to support dynamic dispatch.
type ILabelIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelIdentifierContext differentiates from other interfaces.
	IsLabelIdentifierContext()
}

type LabelIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelIdentifierContext() *LabelIdentifierContext {
	var p = new(LabelIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_labelIdentifier
	return p
}

func (*LabelIdentifierContext) IsLabelIdentifierContext() {}

func NewLabelIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelIdentifierContext {
	var p = new(LabelIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_labelIdentifier

	return p
}

func (s *LabelIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelIdentifierContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *LabelIdentifierContext) KeywordAsIdentifierInLabels() IKeywordAsIdentifierInLabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeywordAsIdentifierInLabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeywordAsIdentifierInLabelsContext)
}

func (s *LabelIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabelIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLabelIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) LabelIdentifier() (localctx ILabelIdentifierContext) {
	localctx = NewLabelIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 306, MojoParserRULE_labelIdentifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2018)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserVALUE_IDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2016)
			p.Match(MojoParserVALUE_IDENTIFIER)
		}

	case MojoParserKEYWORD_AND, MojoParserKEYWORD_AS, MojoParserKEYWORD_ATTRIBUTE, MojoParserKEYWORD_BREAK, MojoParserKEYWORD_CONST, MojoParserKEYWORD_CONTINUE, MojoParserKEYWORD_ELSE, MojoParserKEYWORD_ENUM, MojoParserKEYWORD_FALSE, MojoParserKEYWORD_FOR, MojoParserKEYWORD_FUNC, MojoParserKEYWORD_IF, MojoParserKEYWORD_IMPORT, MojoParserKEYWORD_IN, MojoParserKEYWORD_INTERFACE, MojoParserKEYWORD_IS, MojoParserKEYWORD_MATCH, MojoParserKEYWORD_NOT, MojoParserKEYWORD_NULL, MojoParserKEYWORD_OR, MojoParserKEYWORD_PACKAGE, MojoParserKEYWORD_REPEATE, MojoParserKEYWORD_RETURN, MojoParserKEYWORD_STRUCT, MojoParserKEYWORD_TRUE, MojoParserKEYWORD_TYPE, MojoParserKEYWORD_VAR, MojoParserKEYWORD_WHILE, MojoParserKEYWORD_XOR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2017)
			p.KeywordAsIdentifierInLabels()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPathIdentifierContext is an interface to support dynamic dispatch.
type IPathIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPathIdentifierContext differentiates from other interfaces.
	IsPathIdentifierContext()
}

type PathIdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPathIdentifierContext() *PathIdentifierContext {
	var p = new(PathIdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_pathIdentifier
	return p
}

func (*PathIdentifierContext) IsPathIdentifierContext() {}

func NewPathIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PathIdentifierContext {
	var p = new(PathIdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_pathIdentifier

	return p
}

func (s *PathIdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *PathIdentifierContext) AllDeclarationIdentifier() []IDeclarationIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem())
	var tst = make([]IDeclarationIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDeclarationIdentifierContext)
		}
	}

	return tst
}

func (s *PathIdentifierContext) DeclarationIdentifier(i int) IDeclarationIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDeclarationIdentifierContext)
}

func (s *PathIdentifierContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserDOT)
}

func (s *PathIdentifierContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, i)
}

func (s *PathIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathIdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PathIdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPathIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PathIdentifier() (localctx IPathIdentifierContext) {
	localctx = NewPathIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 308, MojoParserRULE_pathIdentifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2020)
		p.DeclarationIdentifier()
	}
	p.SetState(2025)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == MojoParserDOT {
		{
			p.SetState(2021)
			p.Match(MojoParserDOT)
		}
		{
			p.SetState(2022)
			p.DeclarationIdentifier()
		}

		p.SetState(2027)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) VALUE_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(MojoParserVALUE_IDENTIFIER, 0)
}

func (s *IdentifierContext) IMPLICIT_PARAMETER_NAME() antlr.TerminalNode {
	return s.GetToken(MojoParserIMPLICIT_PARAMETER_NAME, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 310, MojoParserRULE_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2028)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserVALUE_IDENTIFIER || _la == MojoParserIMPLICIT_PARAMETER_NAME) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IKeywordAsIdentifierInDeclarationsContext is an interface to support dynamic dispatch.
type IKeywordAsIdentifierInDeclarationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywordAsIdentifierInDeclarationsContext differentiates from other interfaces.
	IsKeywordAsIdentifierInDeclarationsContext()
}

type KeywordAsIdentifierInDeclarationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordAsIdentifierInDeclarationsContext() *KeywordAsIdentifierInDeclarationsContext {
	var p = new(KeywordAsIdentifierInDeclarationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_keywordAsIdentifierInDeclarations
	return p
}

func (*KeywordAsIdentifierInDeclarationsContext) IsKeywordAsIdentifierInDeclarationsContext() {}

func NewKeywordAsIdentifierInDeclarationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordAsIdentifierInDeclarationsContext {
	var p = new(KeywordAsIdentifierInDeclarationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_keywordAsIdentifierInDeclarations

	return p
}

func (s *KeywordAsIdentifierInDeclarationsContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_AND() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AND, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ATTRIBUTE, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_BREAK() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_BREAK, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_CONST() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONST, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_ENUM() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ENUM, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_FUNC() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FUNC, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_IF() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IF, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_IMPORT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IMPORT, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_IN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IN, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_INTERFACE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_INTERFACE, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_IS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IS, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_MATCH() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_MATCH, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_NOT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NOT, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_NULL() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NULL, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_PACKAGE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_PACKAGE, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_REPEATE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_REPEATE, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_RETURN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_RETURN, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_STRUCT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_STRUCT, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_VAR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_VAR, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) KEYWORD_XOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_XOR, 0)
}

func (s *KeywordAsIdentifierInDeclarationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordAsIdentifierInDeclarationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordAsIdentifierInDeclarationsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitKeywordAsIdentifierInDeclarations(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) KeywordAsIdentifierInDeclarations() (localctx IKeywordAsIdentifierInDeclarationsContext) {
	localctx = NewKeywordAsIdentifierInDeclarationsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 312, MojoParserRULE_keywordAsIdentifierInDeclarations)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2030)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MojoParserKEYWORD_AND)|(1<<MojoParserKEYWORD_AS)|(1<<MojoParserKEYWORD_ATTRIBUTE)|(1<<MojoParserKEYWORD_BREAK)|(1<<MojoParserKEYWORD_CONST)|(1<<MojoParserKEYWORD_ENUM)|(1<<MojoParserKEYWORD_FUNC)|(1<<MojoParserKEYWORD_IF)|(1<<MojoParserKEYWORD_IMPORT)|(1<<MojoParserKEYWORD_IN)|(1<<MojoParserKEYWORD_INTERFACE)|(1<<MojoParserKEYWORD_IS)|(1<<MojoParserKEYWORD_MATCH)|(1<<MojoParserKEYWORD_NOT)|(1<<MojoParserKEYWORD_NULL)|(1<<MojoParserKEYWORD_PACKAGE)|(1<<MojoParserKEYWORD_REPEATE)|(1<<MojoParserKEYWORD_RETURN)|(1<<MojoParserKEYWORD_STRUCT)|(1<<MojoParserKEYWORD_TYPE)|(1<<MojoParserKEYWORD_VAR)|(1<<MojoParserKEYWORD_XOR))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IKeywordAsIdentifierInLabelsContext is an interface to support dynamic dispatch.
type IKeywordAsIdentifierInLabelsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeywordAsIdentifierInLabelsContext differentiates from other interfaces.
	IsKeywordAsIdentifierInLabelsContext()
}

type KeywordAsIdentifierInLabelsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeywordAsIdentifierInLabelsContext() *KeywordAsIdentifierInLabelsContext {
	var p = new(KeywordAsIdentifierInLabelsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_keywordAsIdentifierInLabels
	return p
}

func (*KeywordAsIdentifierInLabelsContext) IsKeywordAsIdentifierInLabelsContext() {}

func NewKeywordAsIdentifierInLabelsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeywordAsIdentifierInLabelsContext {
	var p = new(KeywordAsIdentifierInLabelsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_keywordAsIdentifierInLabels

	return p
}

func (s *KeywordAsIdentifierInLabelsContext) GetParser() antlr.Parser { return s.parser }

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_AND() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AND, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_AS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_AS, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_ATTRIBUTE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ATTRIBUTE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_BREAK() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_BREAK, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_CONST() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONST, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_CONTINUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_CONTINUE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_ELSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ELSE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_ENUM() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_ENUM, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_FALSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FALSE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_FOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FOR, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_FUNC() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FUNC, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_IF() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IF, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_IMPORT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IMPORT, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_IN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IN, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_INTERFACE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_INTERFACE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_IS() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_IS, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_MATCH() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_MATCH, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_NOT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NOT, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_NULL() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NULL, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_OR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_OR, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_PACKAGE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_PACKAGE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_REPEATE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_REPEATE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_RETURN() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_RETURN, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_STRUCT() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_STRUCT, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_TRUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TRUE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_TYPE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TYPE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_VAR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_VAR, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_WHILE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_WHILE, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) KEYWORD_XOR() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_XOR, 0)
}

func (s *KeywordAsIdentifierInLabelsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeywordAsIdentifierInLabelsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeywordAsIdentifierInLabelsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitKeywordAsIdentifierInLabels(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) KeywordAsIdentifierInLabels() (localctx IKeywordAsIdentifierInLabelsContext) {
	localctx = NewKeywordAsIdentifierInLabelsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 314, MojoParserRULE_keywordAsIdentifierInLabels)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2032)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<MojoParserKEYWORD_AND)|(1<<MojoParserKEYWORD_AS)|(1<<MojoParserKEYWORD_ATTRIBUTE)|(1<<MojoParserKEYWORD_BREAK)|(1<<MojoParserKEYWORD_CONST)|(1<<MojoParserKEYWORD_CONTINUE)|(1<<MojoParserKEYWORD_ELSE)|(1<<MojoParserKEYWORD_ENUM)|(1<<MojoParserKEYWORD_FALSE)|(1<<MojoParserKEYWORD_FOR)|(1<<MojoParserKEYWORD_FUNC)|(1<<MojoParserKEYWORD_IF)|(1<<MojoParserKEYWORD_IMPORT)|(1<<MojoParserKEYWORD_IN)|(1<<MojoParserKEYWORD_INTERFACE)|(1<<MojoParserKEYWORD_IS)|(1<<MojoParserKEYWORD_MATCH)|(1<<MojoParserKEYWORD_NOT)|(1<<MojoParserKEYWORD_NULL)|(1<<MojoParserKEYWORD_OR)|(1<<MojoParserKEYWORD_PACKAGE)|(1<<MojoParserKEYWORD_REPEATE)|(1<<MojoParserKEYWORD_RETURN)|(1<<MojoParserKEYWORD_STRUCT)|(1<<MojoParserKEYWORD_TRUE)|(1<<MojoParserKEYWORD_TYPE)|(1<<MojoParserKEYWORD_VAR)|(1<<MojoParserKEYWORD_WHILE)|(1<<MojoParserKEYWORD_XOR))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IDocumentContext is an interface to support dynamic dispatch.
type IDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDocumentContext differentiates from other interfaces.
	IsDocumentContext()
}

type DocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDocumentContext() *DocumentContext {
	var p = new(DocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_document
	return p
}

func (*DocumentContext) IsDocumentContext() {}

func NewDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DocumentContext {
	var p = new(DocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_document

	return p
}

func (s *DocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *DocumentContext) AllLINE_DOCUMENT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserLINE_DOCUMENT)
}

func (s *DocumentContext) LINE_DOCUMENT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserLINE_DOCUMENT, i)
}

func (s *DocumentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *DocumentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *DocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Document() (localctx IDocumentContext) {
	localctx = NewDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 316, MojoParserRULE_document)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2034)
		p.Match(MojoParserLINE_DOCUMENT)
	}
	p.SetState(2039)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 269, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2035)
				p.Match(MojoParserEOL)
			}
			{
				p.SetState(2036)
				p.Match(MojoParserLINE_DOCUMENT)
			}

		}
		p.SetState(2041)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 269, p.GetParserRuleContext())
	}
	{
		p.SetState(2042)
		p.Match(MojoParserEOL)
	}

	return localctx
}

// IFollowingDocumentContext is an interface to support dynamic dispatch.
type IFollowingDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFollowingDocumentContext differentiates from other interfaces.
	IsFollowingDocumentContext()
}

type FollowingDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFollowingDocumentContext() *FollowingDocumentContext {
	var p = new(FollowingDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_followingDocument
	return p
}

func (*FollowingDocumentContext) IsFollowingDocumentContext() {}

func NewFollowingDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FollowingDocumentContext {
	var p = new(FollowingDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_followingDocument

	return p
}

func (s *FollowingDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *FollowingDocumentContext) AllFOLLOWING_LINE_DOCUMENT() []antlr.TerminalNode {
	return s.GetTokens(MojoParserFOLLOWING_LINE_DOCUMENT)
}

func (s *FollowingDocumentContext) FOLLOWING_LINE_DOCUMENT(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserFOLLOWING_LINE_DOCUMENT, i)
}

func (s *FollowingDocumentContext) AllEOL() []antlr.TerminalNode {
	return s.GetTokens(MojoParserEOL)
}

func (s *FollowingDocumentContext) EOL(i int) antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, i)
}

func (s *FollowingDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FollowingDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FollowingDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitFollowingDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) FollowingDocument() (localctx IFollowingDocumentContext) {
	localctx = NewFollowingDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 318, MojoParserRULE_followingDocument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2044)
		p.Match(MojoParserFOLLOWING_LINE_DOCUMENT)
	}
	p.SetState(2049)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 270, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2045)
				p.Match(MojoParserEOL)
			}
			{
				p.SetState(2046)
				p.Match(MojoParserFOLLOWING_LINE_DOCUMENT)
			}

		}
		p.SetState(2051)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 270, p.GetParserRuleContext())
	}

	return localctx
}

// IAssignmentOperatorContext is an interface to support dynamic dispatch.
type IAssignmentOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentOperatorContext differentiates from other interfaces.
	IsAssignmentOperatorContext()
}

type AssignmentOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentOperatorContext() *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_assignmentOperator
	return p
}

func (*AssignmentOperatorContext) IsAssignmentOperatorContext() {}

func NewAssignmentOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentOperatorContext {
	var p = new(AssignmentOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_assignmentOperator

	return p
}

func (s *AssignmentOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentOperatorContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(MojoParserEQUAL, 0)
}

func (s *AssignmentOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitAssignmentOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) AssignmentOperator() (localctx IAssignmentOperatorContext) {
	localctx = NewAssignmentOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 320, MojoParserRULE_assignmentOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2052)
		p.Match(MojoParserEQUAL)
	}

	return localctx
}

// INegatePrefixOperatorContext is an interface to support dynamic dispatch.
type INegatePrefixOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNegatePrefixOperatorContext differentiates from other interfaces.
	IsNegatePrefixOperatorContext()
}

type NegatePrefixOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNegatePrefixOperatorContext() *NegatePrefixOperatorContext {
	var p = new(NegatePrefixOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_negatePrefixOperator
	return p
}

func (*NegatePrefixOperatorContext) IsNegatePrefixOperatorContext() {}

func NewNegatePrefixOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NegatePrefixOperatorContext {
	var p = new(NegatePrefixOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_negatePrefixOperator

	return p
}

func (s *NegatePrefixOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *NegatePrefixOperatorContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MojoParserMINUS, 0)
}

func (s *NegatePrefixOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NegatePrefixOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NegatePrefixOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitNegatePrefixOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) NegatePrefixOperator() (localctx INegatePrefixOperatorContext) {
	localctx = NewNegatePrefixOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 322, MojoParserRULE_negatePrefixOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2054)
		p.Match(MojoParserMINUS)
	}

	return localctx
}

// IArrowOperatorContext is an interface to support dynamic dispatch.
type IArrowOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrowOperatorContext differentiates from other interfaces.
	IsArrowOperatorContext()
}

type ArrowOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrowOperatorContext() *ArrowOperatorContext {
	var p = new(ArrowOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_arrowOperator
	return p
}

func (*ArrowOperatorContext) IsArrowOperatorContext() {}

func NewArrowOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrowOperatorContext {
	var p = new(ArrowOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_arrowOperator

	return p
}

func (s *ArrowOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrowOperatorContext) RIGHT_ARROW() antlr.TerminalNode {
	return s.GetToken(MojoParserRIGHT_ARROW, 0)
}

func (s *ArrowOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrowOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrowOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitArrowOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) ArrowOperator() (localctx IArrowOperatorContext) {
	localctx = NewArrowOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 324, MojoParserRULE_arrowOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2056)
		p.Match(MojoParserRIGHT_ARROW)
	}

	return localctx
}

// IRangeOperatorContext is an interface to support dynamic dispatch.
type IRangeOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRangeOperatorContext differentiates from other interfaces.
	IsRangeOperatorContext()
}

type RangeOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRangeOperatorContext() *RangeOperatorContext {
	var p = new(RangeOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_rangeOperator
	return p
}

func (*RangeOperatorContext) IsRangeOperatorContext() {}

func NewRangeOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeOperatorContext {
	var p = new(RangeOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_rangeOperator

	return p
}

func (s *RangeOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeOperatorContext) DOT_DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT_DOT, 0)
}

func (s *RangeOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitRangeOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) RangeOperator() (localctx IRangeOperatorContext) {
	localctx = NewRangeOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 326, MojoParserRULE_rangeOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2058)
		p.Match(MojoParserDOT_DOT)
	}

	return localctx
}

// IHalfOpenRangeOperatorContext is an interface to support dynamic dispatch.
type IHalfOpenRangeOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHalfOpenRangeOperatorContext differentiates from other interfaces.
	IsHalfOpenRangeOperatorContext()
}

type HalfOpenRangeOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHalfOpenRangeOperatorContext() *HalfOpenRangeOperatorContext {
	var p = new(HalfOpenRangeOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_halfOpenRangeOperator
	return p
}

func (*HalfOpenRangeOperatorContext) IsHalfOpenRangeOperatorContext() {}

func NewHalfOpenRangeOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HalfOpenRangeOperatorContext {
	var p = new(HalfOpenRangeOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_halfOpenRangeOperator

	return p
}

func (s *HalfOpenRangeOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *HalfOpenRangeOperatorContext) DOT_DOT_LT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT_DOT_LT, 0)
}

func (s *HalfOpenRangeOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HalfOpenRangeOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HalfOpenRangeOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitHalfOpenRangeOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) HalfOpenRangeOperator() (localctx IHalfOpenRangeOperatorContext) {
	localctx = NewHalfOpenRangeOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 328, MojoParserRULE_halfOpenRangeOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2060)
		p.Match(MojoParserDOT_DOT_LT)
	}

	return localctx
}

// IBinaryOperatorContext is an interface to support dynamic dispatch.
type IBinaryOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinaryOperatorContext differentiates from other interfaces.
	IsBinaryOperatorContext()
}

type BinaryOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinaryOperatorContext() *BinaryOperatorContext {
	var p = new(BinaryOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_binaryOperator
	return p
}

func (*BinaryOperatorContext) IsBinaryOperatorContext() {}

func NewBinaryOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BinaryOperatorContext {
	var p = new(BinaryOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_binaryOperator

	return p
}

func (s *BinaryOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *BinaryOperatorContext) RangeOperator() IRangeOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRangeOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRangeOperatorContext)
}

func (s *BinaryOperatorContext) HalfOpenRangeOperator() IHalfOpenRangeOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHalfOpenRangeOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHalfOpenRangeOperatorContext)
}

func (s *BinaryOperatorContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *BinaryOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BinaryOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBinaryOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BinaryOperator() (localctx IBinaryOperatorContext) {
	localctx = NewBinaryOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 330, MojoParserRULE_binaryOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2065)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserDOT_DOT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2062)
			p.RangeOperator()
		}

	case MojoParserDOT_DOT_LT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2063)
			p.HalfOpenRangeOperator()
		}

	case MojoParserDOT, MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserOPERATOR_HEAD_OTHER:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2064)
			p.Operator()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IPrefixOperatorContext is an interface to support dynamic dispatch.
type IPrefixOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrefixOperatorContext differentiates from other interfaces.
	IsPrefixOperatorContext()
}

type PrefixOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrefixOperatorContext() *PrefixOperatorContext {
	var p = new(PrefixOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_prefixOperator
	return p
}

func (*PrefixOperatorContext) IsPrefixOperatorContext() {}

func NewPrefixOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrefixOperatorContext {
	var p = new(PrefixOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_prefixOperator

	return p
}

func (s *PrefixOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PrefixOperatorContext) Operator() IOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperatorContext)
}

func (s *PrefixOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrefixOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrefixOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPrefixOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PrefixOperator() (localctx IPrefixOperatorContext) {
	localctx = NewPrefixOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 332, MojoParserRULE_prefixOperator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2067)
		p.Operator()
	}

	return localctx
}

// IPostfixOperatorContext is an interface to support dynamic dispatch.
type IPostfixOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPostfixOperatorContext differentiates from other interfaces.
	IsPostfixOperatorContext()
}

type PostfixOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPostfixOperatorContext() *PostfixOperatorContext {
	var p = new(PostfixOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_postfixOperator
	return p
}

func (*PostfixOperatorContext) IsPostfixOperatorContext() {}

func NewPostfixOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PostfixOperatorContext {
	var p = new(PostfixOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_postfixOperator

	return p
}

func (s *PostfixOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *PostfixOperatorContext) PLUS_PLUS() antlr.TerminalNode {
	return s.GetToken(MojoParserPLUS_PLUS, 0)
}

func (s *PostfixOperatorContext) MINUS_MINUS() antlr.TerminalNode {
	return s.GetToken(MojoParserMINUS_MINUS, 0)
}

func (s *PostfixOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PostfixOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PostfixOperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitPostfixOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) PostfixOperator() (localctx IPostfixOperatorContext) {
	localctx = NewPostfixOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 334, MojoParserRULE_postfixOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2069)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserPLUS_PLUS || _la == MojoParserMINUS_MINUS) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOperatorContext is an interface to support dynamic dispatch.
type IOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperatorContext differentiates from other interfaces.
	IsOperatorContext()
}

type OperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperatorContext() *OperatorContext {
	var p = new(OperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_operator
	return p
}

func (*OperatorContext) IsOperatorContext() {}

func NewOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperatorContext {
	var p = new(OperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_operator

	return p
}

func (s *OperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *OperatorContext) Operator_head() IOperator_headContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_headContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_headContext)
}

func (s *OperatorContext) Operator_characters() IOperator_charactersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_charactersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_charactersContext)
}

func (s *OperatorContext) Dot_operator_head() IDot_operator_headContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDot_operator_headContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDot_operator_headContext)
}

func (s *OperatorContext) AllDot_operator_character() []IDot_operator_characterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDot_operator_characterContext)(nil)).Elem())
	var tst = make([]IDot_operator_characterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDot_operator_characterContext)
		}
	}

	return tst
}

func (s *OperatorContext) Dot_operator_character(i int) IDot_operator_characterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDot_operator_characterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDot_operator_characterContext)
}

func (s *OperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperatorContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOperator(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Operator() (localctx IOperatorContext) {
	localctx = NewOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 336, MojoParserRULE_operator)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(2082)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserOPERATOR_HEAD_OTHER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2071)
			p.Operator_head()
		}
		p.SetState(2073)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 272, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2072)
				p.Operator_characters()
			}

		}

	case MojoParserDOT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2075)
			p.Dot_operator_head()
		}
		p.SetState(2079)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2076)
					p.Dot_operator_character()
				}

			}
			p.SetState(2081)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 273, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOperator_charactersContext is an interface to support dynamic dispatch.
type IOperator_charactersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_charactersContext differentiates from other interfaces.
	IsOperator_charactersContext()
}

type Operator_charactersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_charactersContext() *Operator_charactersContext {
	var p = new(Operator_charactersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_operator_characters
	return p
}

func (*Operator_charactersContext) IsOperator_charactersContext() {}

func NewOperator_charactersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_charactersContext {
	var p = new(Operator_charactersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_operator_characters

	return p
}

func (s *Operator_charactersContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_charactersContext) AllOperator_character() []IOperator_characterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOperator_characterContext)(nil)).Elem())
	var tst = make([]IOperator_characterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOperator_characterContext)
		}
	}

	return tst
}

func (s *Operator_charactersContext) Operator_character(i int) IOperator_characterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_characterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOperator_characterContext)
}

func (s *Operator_charactersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_charactersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_charactersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOperator_characters(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Operator_characters() (localctx IOperator_charactersContext) {
	localctx = NewOperator_charactersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 338, MojoParserRULE_operator_characters)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(2086)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(2084)

			if !(p.GetTokenStream().Get(p.GetTokenStream().Index()-1).GetTokenType() != MojoParserWS) {
				panic(antlr.NewFailedPredicateException(p, "p.GetTokenStream().Get(p.GetTokenStream().Index()-1).GetTokenType() != MojoParserWS", ""))
			}
			{
				p.SetState(2085)
				p.Operator_character()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(2088)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 275, p.GetParserRuleContext())
	}

	return localctx
}

// IOperator_characterContext is an interface to support dynamic dispatch.
type IOperator_characterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_characterContext differentiates from other interfaces.
	IsOperator_characterContext()
}

type Operator_characterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_characterContext() *Operator_characterContext {
	var p = new(Operator_characterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_operator_character
	return p
}

func (*Operator_characterContext) IsOperator_characterContext() {}

func NewOperator_characterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_characterContext {
	var p = new(Operator_characterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_operator_character

	return p
}

func (s *Operator_characterContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_characterContext) Operator_head() IOperator_headContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_headContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_headContext)
}

func (s *Operator_characterContext) OPERATOR_FOLLOWING_CHARACTER() antlr.TerminalNode {
	return s.GetToken(MojoParserOPERATOR_FOLLOWING_CHARACTER, 0)
}

func (s *Operator_characterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_characterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_characterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOperator_character(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Operator_character() (localctx IOperator_characterContext) {
	localctx = NewOperator_characterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 340, MojoParserRULE_operator_character)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2092)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserOPERATOR_HEAD_OTHER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2090)
			p.Operator_head()
		}

	case MojoParserOPERATOR_FOLLOWING_CHARACTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2091)
			p.Match(MojoParserOPERATOR_FOLLOWING_CHARACTER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOperator_headContext is an interface to support dynamic dispatch.
type IOperator_headContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperator_headContext differentiates from other interfaces.
	IsOperator_headContext()
}

type Operator_headContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperator_headContext() *Operator_headContext {
	var p = new(Operator_headContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_operator_head
	return p
}

func (*Operator_headContext) IsOperator_headContext() {}

func NewOperator_headContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Operator_headContext {
	var p = new(Operator_headContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_operator_head

	return p
}

func (s *Operator_headContext) GetParser() antlr.Parser { return s.parser }

func (s *Operator_headContext) SLASH() antlr.TerminalNode {
	return s.GetToken(MojoParserSLASH, 0)
}

func (s *Operator_headContext) EQUAL() antlr.TerminalNode {
	return s.GetToken(MojoParserEQUAL, 0)
}

func (s *Operator_headContext) MINUS() antlr.TerminalNode {
	return s.GetToken(MojoParserMINUS, 0)
}

func (s *Operator_headContext) PLUS() antlr.TerminalNode {
	return s.GetToken(MojoParserPLUS, 0)
}

func (s *Operator_headContext) BANG() antlr.TerminalNode {
	return s.GetToken(MojoParserBANG, 0)
}

func (s *Operator_headContext) STAR() antlr.TerminalNode {
	return s.GetToken(MojoParserSTAR, 0)
}

func (s *Operator_headContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(MojoParserPERCENT, 0)
}

func (s *Operator_headContext) AND() antlr.TerminalNode {
	return s.GetToken(MojoParserAND, 0)
}

func (s *Operator_headContext) PIPE() antlr.TerminalNode {
	return s.GetToken(MojoParserPIPE, 0)
}

func (s *Operator_headContext) LT() antlr.TerminalNode {
	return s.GetToken(MojoParserLT, 0)
}

func (s *Operator_headContext) GT() antlr.TerminalNode {
	return s.GetToken(MojoParserGT, 0)
}

func (s *Operator_headContext) CARET() antlr.TerminalNode {
	return s.GetToken(MojoParserCARET, 0)
}

func (s *Operator_headContext) TILDE() antlr.TerminalNode {
	return s.GetToken(MojoParserTILDE, 0)
}

func (s *Operator_headContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(MojoParserQUESTION, 0)
}

func (s *Operator_headContext) OPERATOR_HEAD_OTHER() antlr.TerminalNode {
	return s.GetToken(MojoParserOPERATOR_HEAD_OTHER, 0)
}

func (s *Operator_headContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Operator_headContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Operator_headContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitOperator_head(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Operator_head() (localctx IOperator_headContext) {
	localctx = NewOperator_headContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 342, MojoParserRULE_operator_head)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2096)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2094)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-40)&-(0x1f+1)) == 0 && ((1<<uint((_la-40)))&((1<<(MojoParserLT-40))|(1<<(MojoParserGT-40))|(1<<(MojoParserBANG-40))|(1<<(MojoParserQUESTION-40))|(1<<(MojoParserAND-40))|(1<<(MojoParserMINUS-40))|(1<<(MojoParserEQUAL-40))|(1<<(MojoParserPIPE-40))|(1<<(MojoParserSLASH-40))|(1<<(MojoParserPLUS-40))|(1<<(MojoParserSTAR-40))|(1<<(MojoParserPERCENT-40))|(1<<(MojoParserCARET-40))|(1<<(MojoParserTILDE-40)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case MojoParserOPERATOR_HEAD_OTHER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2095)
			p.Match(MojoParserOPERATOR_HEAD_OTHER)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IDot_operator_headContext is an interface to support dynamic dispatch.
type IDot_operator_headContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDot_operator_headContext differentiates from other interfaces.
	IsDot_operator_headContext()
}

type Dot_operator_headContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDot_operator_headContext() *Dot_operator_headContext {
	var p = new(Dot_operator_headContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_dot_operator_head
	return p
}

func (*Dot_operator_headContext) IsDot_operator_headContext() {}

func NewDot_operator_headContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dot_operator_headContext {
	var p = new(Dot_operator_headContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_dot_operator_head

	return p
}

func (s *Dot_operator_headContext) GetParser() antlr.Parser { return s.parser }

func (s *Dot_operator_headContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *Dot_operator_headContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dot_operator_headContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dot_operator_headContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDot_operator_head(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Dot_operator_head() (localctx IDot_operator_headContext) {
	localctx = NewDot_operator_headContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 344, MojoParserRULE_dot_operator_head)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2098)
		p.Match(MojoParserDOT)
	}

	return localctx
}

// IDot_operator_characterContext is an interface to support dynamic dispatch.
type IDot_operator_characterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDot_operator_characterContext differentiates from other interfaces.
	IsDot_operator_characterContext()
}

type Dot_operator_characterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDot_operator_characterContext() *Dot_operator_characterContext {
	var p = new(Dot_operator_characterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_dot_operator_character
	return p
}

func (*Dot_operator_characterContext) IsDot_operator_characterContext() {}

func NewDot_operator_characterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Dot_operator_characterContext {
	var p = new(Dot_operator_characterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_dot_operator_character

	return p
}

func (s *Dot_operator_characterContext) GetParser() antlr.Parser { return s.parser }

func (s *Dot_operator_characterContext) DOT() antlr.TerminalNode {
	return s.GetToken(MojoParserDOT, 0)
}

func (s *Dot_operator_characterContext) Operator_character() IOperator_characterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperator_characterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperator_characterContext)
}

func (s *Dot_operator_characterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Dot_operator_characterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Dot_operator_characterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitDot_operator_character(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Dot_operator_character() (localctx IDot_operator_characterContext) {
	localctx = NewDot_operator_characterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 346, MojoParserRULE_dot_operator_character)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2102)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserDOT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2100)
			p.Match(MojoParserDOT)
		}

	case MojoParserLT, MojoParserGT, MojoParserBANG, MojoParserQUESTION, MojoParserAND, MojoParserMINUS, MojoParserEQUAL, MojoParserPIPE, MojoParserSLASH, MojoParserPLUS, MojoParserSTAR, MojoParserPERCENT, MojoParserCARET, MojoParserTILDE, MojoParserOPERATOR_HEAD_OTHER, MojoParserOPERATOR_FOLLOWING_CHARACTER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2101)
			p.Operator_character()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) NumericLiteral() INumericLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumericLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumericLiteralContext)
}

func (s *LiteralContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *LiteralContext) BoolLiteral() IBoolLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBoolLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBoolLiteralContext)
}

func (s *LiteralContext) NullLiteral() INullLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INullLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INullLiteralContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 348, MojoParserRULE_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2108)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserMINUS, MojoParserBINARY_LITERAL, MojoParserOCTAL_LITERAL, MojoParserDECIMAL_LITERAL, MojoParserPURE_DECIMAL_DIGITS, MojoParserHEXADECIMAL_LITERAL, MojoParserFLOAT_LITERAL:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2104)
			p.NumericLiteral()
		}

	case MojoParserSTATIC_STRING_LITERAL, MojoParserINTERPOLATED_STRING_LITERAL:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(2105)
			p.StringLiteral()
		}

	case MojoParserKEYWORD_FALSE, MojoParserKEYWORD_TRUE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(2106)
			p.BoolLiteral()
		}

	case MojoParserKEYWORD_NULL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(2107)
			p.NullLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBoolLiteralContext is an interface to support dynamic dispatch.
type IBoolLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBoolLiteralContext differentiates from other interfaces.
	IsBoolLiteralContext()
}

type BoolLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBoolLiteralContext() *BoolLiteralContext {
	var p = new(BoolLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_boolLiteral
	return p
}

func (*BoolLiteralContext) IsBoolLiteralContext() {}

func NewBoolLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BoolLiteralContext {
	var p = new(BoolLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_boolLiteral

	return p
}

func (s *BoolLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *BoolLiteralContext) KEYWORD_TRUE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_TRUE, 0)
}

func (s *BoolLiteralContext) KEYWORD_FALSE() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_FALSE, 0)
}

func (s *BoolLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BoolLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitBoolLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) BoolLiteral() (localctx IBoolLiteralContext) {
	localctx = NewBoolLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 350, MojoParserRULE_boolLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2110)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserKEYWORD_FALSE || _la == MojoParserKEYWORD_TRUE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// INullLiteralContext is an interface to support dynamic dispatch.
type INullLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNullLiteralContext differentiates from other interfaces.
	IsNullLiteralContext()
}

type NullLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNullLiteralContext() *NullLiteralContext {
	var p = new(NullLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_nullLiteral
	return p
}

func (*NullLiteralContext) IsNullLiteralContext() {}

func NewNullLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NullLiteralContext {
	var p = new(NullLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_nullLiteral

	return p
}

func (s *NullLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NullLiteralContext) KEYWORD_NULL() antlr.TerminalNode {
	return s.GetToken(MojoParserKEYWORD_NULL, 0)
}

func (s *NullLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NullLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitNullLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) NullLiteral() (localctx INullLiteralContext) {
	localctx = NewNullLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 352, MojoParserRULE_nullLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2112)
		p.Match(MojoParserKEYWORD_NULL)
	}

	return localctx
}

// INumericLiteralContext is an interface to support dynamic dispatch.
type INumericLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumericLiteralContext differentiates from other interfaces.
	IsNumericLiteralContext()
}

type NumericLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumericLiteralContext() *NumericLiteralContext {
	var p = new(NumericLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_numericLiteral
	return p
}

func (*NumericLiteralContext) IsNumericLiteralContext() {}

func NewNumericLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumericLiteralContext {
	var p = new(NumericLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_numericLiteral

	return p
}

func (s *NumericLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumericLiteralContext) IntegerLiteral() IIntegerLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntegerLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntegerLiteralContext)
}

func (s *NumericLiteralContext) NegatePrefixOperator() INegatePrefixOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INegatePrefixOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INegatePrefixOperatorContext)
}

func (s *NumericLiteralContext) FLOAT_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserFLOAT_LITERAL, 0)
}

func (s *NumericLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumericLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumericLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitNumericLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) NumericLiteral() (localctx INumericLiteralContext) {
	localctx = NewNumericLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 354, MojoParserRULE_numericLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2122)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 282, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(2115)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserMINUS {
			{
				p.SetState(2114)
				p.NegatePrefixOperator()
			}

		}
		{
			p.SetState(2117)
			p.IntegerLiteral()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2119)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserMINUS {
			{
				p.SetState(2118)
				p.NegatePrefixOperator()
			}

		}
		{
			p.SetState(2121)
			p.Match(MojoParserFLOAT_LITERAL)
		}

	}

	return localctx
}

// IIntegerLiteralContext is an interface to support dynamic dispatch.
type IIntegerLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntegerLiteralContext differentiates from other interfaces.
	IsIntegerLiteralContext()
}

type IntegerLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntegerLiteralContext() *IntegerLiteralContext {
	var p = new(IntegerLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_integerLiteral
	return p
}

func (*IntegerLiteralContext) IsIntegerLiteralContext() {}

func NewIntegerLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntegerLiteralContext {
	var p = new(IntegerLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_integerLiteral

	return p
}

func (s *IntegerLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *IntegerLiteralContext) BINARY_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserBINARY_LITERAL, 0)
}

func (s *IntegerLiteralContext) OCTAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserOCTAL_LITERAL, 0)
}

func (s *IntegerLiteralContext) DECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserDECIMAL_LITERAL, 0)
}

func (s *IntegerLiteralContext) PURE_DECIMAL_DIGITS() antlr.TerminalNode {
	return s.GetToken(MojoParserPURE_DECIMAL_DIGITS, 0)
}

func (s *IntegerLiteralContext) HEXADECIMAL_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserHEXADECIMAL_LITERAL, 0)
}

func (s *IntegerLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntegerLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitIntegerLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) IntegerLiteral() (localctx IIntegerLiteralContext) {
	localctx = NewIntegerLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 356, MojoParserRULE_integerLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2124)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-77)&-(0x1f+1)) == 0 && ((1<<uint((_la-77)))&((1<<(MojoParserBINARY_LITERAL-77))|(1<<(MojoParserOCTAL_LITERAL-77))|(1<<(MojoParserDECIMAL_LITERAL-77))|(1<<(MojoParserPURE_DECIMAL_DIGITS-77))|(1<<(MojoParserHEXADECIMAL_LITERAL-77)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStringLiteralContext is an interface to support dynamic dispatch.
type IStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralContext differentiates from other interfaces.
	IsStringLiteralContext()
}

type StringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralContext() *StringLiteralContext {
	var p = new(StringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_stringLiteral
	return p
}

func (*StringLiteralContext) IsStringLiteralContext() {}

func NewStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_stringLiteral

	return p
}

func (s *StringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralContext) STATIC_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserSTATIC_STRING_LITERAL, 0)
}

func (s *StringLiteralContext) INTERPOLATED_STRING_LITERAL() antlr.TerminalNode {
	return s.GetToken(MojoParserINTERPOLATED_STRING_LITERAL, 0)
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) StringLiteral() (localctx IStringLiteralContext) {
	localctx = NewStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 358, MojoParserRULE_stringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2126)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserSTATIC_STRING_LITERAL || _la == MojoParserINTERPOLATED_STRING_LITERAL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IEosContext is an interface to support dynamic dispatch.
type IEosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEosContext differentiates from other interfaces.
	IsEosContext()
}

type EosContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEosContext() *EosContext {
	var p = new(EosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eos
	return p
}

func (*EosContext) IsEosContext() {}

func NewEosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosContext {
	var p = new(EosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eos

	return p
}

func (s *EosContext) GetParser() antlr.Parser { return s.parser }

func (s *EosContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MojoParserSEMI, 0)
}

func (s *EosContext) EOL() antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, 0)
}

func (s *EosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EosContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEos(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Eos() (localctx IEosContext) {
	localctx = NewEosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 360, MojoParserRULE_eos)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2128)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserSEMI || _la == MojoParserEOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IEovContext is an interface to support dynamic dispatch.
type IEovContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEovContext differentiates from other interfaces.
	IsEovContext()
}

type EovContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEovContext() *EovContext {
	var p = new(EovContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eov
	return p
}

func (*EovContext) IsEovContext() {}

func NewEovContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EovContext {
	var p = new(EovContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eov

	return p
}

func (s *EovContext) GetParser() antlr.Parser { return s.parser }

func (s *EovContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, 0)
}

func (s *EovContext) EOL() antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, 0)
}

func (s *EovContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EovContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EovContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEov(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) Eov() (localctx IEovContext) {
	localctx = NewEovContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 362, MojoParserRULE_eov)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2130)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MojoParserCOMMA || _la == MojoParserEOL) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IEosWithDocumentContext is an interface to support dynamic dispatch.
type IEosWithDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEosWithDocumentContext differentiates from other interfaces.
	IsEosWithDocumentContext()
}

type EosWithDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEosWithDocumentContext() *EosWithDocumentContext {
	var p = new(EosWithDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eosWithDocument
	return p
}

func (*EosWithDocumentContext) IsEosWithDocumentContext() {}

func NewEosWithDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosWithDocumentContext {
	var p = new(EosWithDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eosWithDocument

	return p
}

func (s *EosWithDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *EosWithDocumentContext) SEMI() antlr.TerminalNode {
	return s.GetToken(MojoParserSEMI, 0)
}

func (s *EosWithDocumentContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *EosWithDocumentContext) EOL() antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, 0)
}

func (s *EosWithDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EosWithDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EosWithDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEosWithDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EosWithDocument() (localctx IEosWithDocumentContext) {
	localctx = NewEosWithDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 364, MojoParserRULE_eosWithDocument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2142)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserSEMI:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2132)
			p.Match(MojoParserSEMI)
		}
		p.SetState(2136)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
			{
				p.SetState(2133)
				p.FollowingDocument()
			}
			{
				p.SetState(2134)
				p.Match(MojoParserEOL)
			}

		}

	case MojoParserEOL, MojoParserFOLLOWING_LINE_DOCUMENT:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2139)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
			{
				p.SetState(2138)
				p.FollowingDocument()
			}

		}
		{
			p.SetState(2141)
			p.Match(MojoParserEOL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IEovWithDocumentContext is an interface to support dynamic dispatch.
type IEovWithDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEovWithDocumentContext differentiates from other interfaces.
	IsEovWithDocumentContext()
}

type EovWithDocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEovWithDocumentContext() *EovWithDocumentContext {
	var p = new(EovWithDocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = MojoParserRULE_eovWithDocument
	return p
}

func (*EovWithDocumentContext) IsEovWithDocumentContext() {}

func NewEovWithDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EovWithDocumentContext {
	var p = new(EovWithDocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = MojoParserRULE_eovWithDocument

	return p
}

func (s *EovWithDocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *EovWithDocumentContext) COMMA() antlr.TerminalNode {
	return s.GetToken(MojoParserCOMMA, 0)
}

func (s *EovWithDocumentContext) FollowingDocument() IFollowingDocumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFollowingDocumentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFollowingDocumentContext)
}

func (s *EovWithDocumentContext) EOL() antlr.TerminalNode {
	return s.GetToken(MojoParserEOL, 0)
}

func (s *EovWithDocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EovWithDocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EovWithDocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case MojoParserVisitor:
		return t.VisitEovWithDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *MojoParser) EovWithDocument() (localctx IEovWithDocumentContext) {
	localctx = NewEovWithDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 366, MojoParserRULE_eovWithDocument)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(2154)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case MojoParserCOMMA:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(2144)
			p.Match(MojoParserCOMMA)
		}
		p.SetState(2148)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 286, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(2145)
				p.FollowingDocument()
			}
			{
				p.SetState(2146)
				p.Match(MojoParserEOL)
			}

		}

	case MojoParserEOL, MojoParserFOLLOWING_LINE_DOCUMENT:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(2151)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == MojoParserFOLLOWING_LINE_DOCUMENT {
			{
				p.SetState(2150)
				p.FollowingDocument()
			}

		}
		{
			p.SetState(2153)
			p.Match(MojoParserEOL)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

func (p *MojoParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 78:
		var t *PatternContext = nil
		if localctx != nil {
			t = localctx.(*PatternContext)
		}
		return p.Pattern_Sempred(t, predIndex)

	case 136:
		var t *Type_Context = nil
		if localctx != nil {
			t = localctx.(*Type_Context)
		}
		return p.Type__Sempred(t, predIndex)

	case 137:
		var t *BasicTypeContext = nil
		if localctx != nil {
			t = localctx.(*BasicTypeContext)
		}
		return p.BasicType_Sempred(t, predIndex)

	case 169:
		var t *Operator_charactersContext = nil
		if localctx != nil {
			t = localctx.(*Operator_charactersContext)
		}
		return p.Operator_characters_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *MojoParser) Pattern_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MojoParser) Type__Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 3:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MojoParser) BasicType_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 4:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *MojoParser) Operator_characters_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.GetTokenStream().Get(p.GetTokenStream().Index()-1).GetTokenType() != MojoParserWS

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
