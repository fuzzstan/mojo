// Code generated by wand. DO NOT EDIT.
// Rerunning wand will overwrite this file.{{if IsMojoPackage .PackageName}}
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.{{end}}

package {{.GoPackageName}}

import (
	"strconv"
	"unsafe"
)

var {{CompactFullName .FullName}}Names = map[int32]string{
{{range .EnumItems}}
	{{.Number}}: "{{.Value}}",
{{end}}
}

var {{CompactFullName .FullName}}Values = map[string]{{.FullName}}{
{{range .EnumItems}}
	"{{.Value}}": {{$.EnclosingName}}_{{ToUpper $.EnumName}}_{{ToUpper .RawValue}},
{{end}}
}

func (x {{EnclosingName}}_{{EnumName}}) Format() string {
	s, ok := {{CompactFullName .FullName}}Names[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

{{$FirstItem := index .EnumItems 0}}

func (x *{{EnclosingName}}_{{EnumName}}) Parse(value string) {
	if x != nil {
		s, ok := {{CompactFullName .FullName}}Values[value]
		if ok {
			*x = s
		} else {
			*x = {{.EnclosingName}}_{{.Upper .EnumName}}_{{.Upper .FirstItem.RawValue}}
		}
	} else {
		*x = {{.EnclosingName}}_{{.Upper .EnumName}}_{{.Upper .FirstItem.RawValue}}
	}
}