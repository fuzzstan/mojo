// Code generated by wand. DO NOT EDIT.
// Rerunning wand will overwrite this file. {{if IsMojoPackage .PackageName}}
//
// Copyright 2021 Mojo-lang.org
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.{{end}}

package {{.GoPackageName}}

import (
	jsoniter "github.com/json-iterator/go"
	"unsafe"
)

func init() {
	jsoniter.RegisterTypeDecoder("{{.GoPackageName}}.{{.FullName}}", &{{CompactFullName .FullName}}Codec{})
	jsoniter.RegisterTypeEncoder("{{.GoPackageName}}.{{.FullName}}", &{{CompactFullName .FullName}}Codec{})
}

type {{CompactFullName .FullName}}Codec struct {
}

func (codec *{{CompactFullName .FullName}}Codec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	any := iter.ReadAny()
    {{ToLowerCamel .Name}} := (*{{.FullName}})(ptr)
    if any.ValueType() == jsoniter.ArrayValue {
        any.ToVal(&{{ToLowerCamel .Name}}.Values)
    }
}

func (codec *{{CompactFullName .FullName}}Codec) IsEmpty(ptr unsafe.Pointer) bool {
	{{ToLowerCamel .Name}} := (*{{.FullName}})(ptr)
	return {{ToLowerCamel .Name}} == nil || len({{ToLowerCamel .Name}}.Values) == 0
}

func (codec *{{CompactFullName .FullName}}Codec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	{{ToLowerCamel .Name}} := (*{{.FullName}})(ptr)

    stream.WriteArrayStart()
    for i, v := range {{ToLowerCamel .Name}}.Values {
        if i > 0 {
            stream.WriteMore()
        }
        stream.WriteVal(v)
    }
    stream.WriteArrayEnd()
}